---
import { Icon } from '@astrojs/starlight/components';

interface Props {
	options?: Array<{
		label: string;
		value: string;
		selected: boolean;
	}>;
}

const options = Astro.props.options || [
	{ label: 'Auto', value: 'auto', selected: true },
	{ label: 'Dark', value: 'dark', selected: false },
	{ label: 'Light', value: 'light', selected: false },
];
---

<starlight-theme-select>
	<label>
		<span class="sr-only">Select theme</span>
		<Icon name="laptop" class="icon label-icon" />
		<select value="auto" autocomplete="off">
			{options.map(({ value, selected, label }) => (
				<option value={value} selected={selected}>{label}</option>
			))}
		</select>
	</label>
</starlight-theme-select>

<script is:inline>
	StarlightThemeProvider.updatePickers();
</script>

<script>
	type Theme = 'auto' | 'dark' | 'light';

	const storageKey = 'starlight-theme';

	const parseTheme = (theme: string | null): Theme =>
		theme === 'auto' || theme === 'dark' || theme === 'light' ? theme : 'auto';

	const loadTheme = (): Theme => {
		// Check if we have a theme parameter in the URL
		const urlParams = new URLSearchParams(window.location.search);
		const urlTheme = urlParams.get('theme');
		if (urlTheme) {
			return parseTheme(urlTheme);
		}
		
		// Fall back to localStorage
		return parseTheme(typeof localStorage !== 'undefined' && localStorage.getItem(storageKey));
	};

	function storeTheme(theme: Theme) {
		// Don't store the theme if it's forced via URL parameter
		const urlParams = new URLSearchParams(window.location.search);
		if (urlParams.has('theme')) {
			return;
		}
		
		if (typeof localStorage !== 'undefined') {
			localStorage.setItem(storageKey, theme === 'light' || theme === 'dark' ? theme : '');
		}
	}

	const getPreferredColorScheme = () =>
		matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark';

	function onThemeChange(theme: Theme) {
		StarlightThemeProvider.updatePickers(theme);
		document.documentElement.dataset.theme = theme === 'auto' ? getPreferredColorScheme() : theme;
		storeTheme(theme);
	}

	matchMedia(`(prefers-color-scheme: light)`).addEventListener('change', () => {
		if (loadTheme() === 'auto') onThemeChange('auto');
	});

	class StarlightThemeSelect extends HTMLElement {
		constructor() {
			super();
			const theme = loadTheme();
			onThemeChange(theme);
			
			// Update the select element to show the current theme
			const select = this.querySelector('select');
			if (select) {
				select.value = theme;
				
				// Disable the select if theme is forced via URL
				const urlParams = new URLSearchParams(window.location.search);
				if (urlParams.has('theme')) {
					select.disabled = true;
					select.title = 'Theme is controlled by URL parameter';
				}
				
				select.addEventListener('change', (e) => {
					if (e.currentTarget instanceof HTMLSelectElement) {
						onThemeChange(parseTheme(e.currentTarget.value));
					}
				});
			}
		}
	}
	customElements.define('starlight-theme-select', StarlightThemeSelect);
</script>

<style>
	starlight-theme-select {
		display: inline-block;
	}

	label {
		position: relative;
		display: flex;
		align-items: center;
		color: var(--sl-color-gray-1);
		cursor: pointer;
		padding: 0.5rem;
		border-radius: 0.25rem;
	}

	label:hover {
		color: var(--sl-color-gray-2);
		background: var(--sl-color-gray-6);
	}

	.icon {
		font-size: 1rem;
		position: relative;
		pointer-events: none;
	}

	select {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		opacity: 0;
		cursor: pointer;
		border: 0;
		background: transparent;
		appearance: none;
	}

	option {
		background-color: var(--sl-color-bg-nav);
		color: var(--sl-color-gray-1);
	}

	.sr-only {
		position: absolute;
		width: 1px;
		height: 1px;
		padding: 0;
		margin: -1px;
		overflow: hidden;
		clip: rect(0, 0, 0, 0);
		white-space: nowrap;
		border-width: 0;
	}
</style>