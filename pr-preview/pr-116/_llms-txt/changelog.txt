<SYSTEM>Changelog</SYSTEM>

# Tenzir Node Changelog

This page lists the changelog for Tenzir Node. ## Versions [Section titled “Versions”](#versions) * [Version 5.18.0](/changelog/node/v5-18-0) * [Version 5.17.0](/changelog/node/v5-17-0) * [Version 5.16.0](/changelog/node/v5-16-0) * [Version 5.15.0](/changelog/node/v5-15-0) * [Version 5.14.0](/changelog/node/v5-14-0) * [Version 5.13.2](/changelog/node/v5-13-2) * [Version 5.13.1](/changelog/node/v5-13-1) * [Version 5.13.0](/changelog/node/v5-13-0) * [Version 5.12.1](/changelog/node/v5-12-1) * [Version 5.12.0](/changelog/node/v5-12-0) * [Version 5.11.1](/changelog/node/v5-11-1) * [Version 5.11.0](/changelog/node/v5-11-0) * [Version 5.10.0](/changelog/node/v5-10-0) * [Version 5.9.0](/changelog/node/v5-9-0) * [Version 5.8.0](/changelog/node/v5-8-0) * [Version 5.7.0](/changelog/node/v5-7-0) * [Version 5.6.1](/changelog/node/v5-6-1) * [Version 5.6.0](/changelog/node/v5-6-0) * [Version 5.5.0](/changelog/node/v5-5-0) * [Version 5.4.1](/changelog/node/v5-4-1) * [Version 5.4.0](/changelog/node/v5-4-0) * [Version 5.3.4](/changelog/node/v5-3-4) * [Version 5.3.3](/changelog/node/v5-3-3) * [Version 5.3.2](/changelog/node/v5-3-2) * [Version 5.3.0](/changelog/node/v5-3-0) * [Version 5.2.0](/changelog/node/v5-2-0) * [Version 5.1.8](/changelog/node/v5-1-8) * [Version 5.1.7](/changelog/node/v5-1-7) * [Version 5.1.6](/changelog/node/v5-1-6) * [Version 5.1.5](/changelog/node/v5-1-5) * [Version 5.1.4](/changelog/node/v5-1-4) * [Version 5.1.3](/changelog/node/v5-1-3) * [Version 5.1.2](/changelog/node/v5-1-2) * [Version 5.1.1](/changelog/node/v5-1-1) * [Version 5.1.0](/changelog/node/v5-1-0) * [Version 5.0.1](/changelog/node/v5-0-1) * [Version 5.0.0](/changelog/node/v5-0-0) * [Version 4.32.1](/changelog/node/v4-32-1) * [Version 4.32.0](/changelog/node/v4-32-0) * [Version 4.31.2](/changelog/node/v4-31-2) * [Version 4.31.0](/changelog/node/v4-31-0) * [Version 4.30.3](/changelog/node/v4-30-3) * [Version 4.30.2](/changelog/node/v4-30-2) * [Version 4.30.1](/changelog/node/v4-30-1) * [Version 4.30.0](/changelog/node/v4-30-0) * [Version 4.29.2](/changelog/node/v4-29-2) * [Version 4.29.1](/changelog/node/v4-29-1) * [Version 4.29.0](/changelog/node/v4-29-0) * [Version 4.28.2](/changelog/node/v4-28-2) * [Version 4.28.0](/changelog/node/v4-28-0) * [Version 4.27.0](/changelog/node/v4-27-0) * [Version 4.26.0](/changelog/node/v4-26-0) * [Version 4.25.0](/changelog/node/v4-25-0) * [Version 4.24.1](/changelog/node/v4-24-1) * [Version 4.24.0](/changelog/node/v4-24-0) * [Version 4.23.1](/changelog/node/v4-23-1) * [Version 4.23.0](/changelog/node/v4-23-0) * [Version 4.22.2](/changelog/node/v4-22-2) * [Version 4.22.1](/changelog/node/v4-22-1) * [Version 4.22.0](/changelog/node/v4-22-0) * [Version 4.21.1](/changelog/node/v4-21-1) * [Version 4.21.0](/changelog/node/v4-21-0) * [Version 4.20.3](/changelog/node/v4-20-3) * [Version 4.20.2](/changelog/node/v4-20-2) * [Version 4.20.1](/changelog/node/v4-20-1) * [Version 4.20.0](/changelog/node/v4-20-0) * [Version 4.19.6](/changelog/node/v4-19-6) * [Version 4.19.5](/changelog/node/v4-19-5) * [Version 4.19.4](/changelog/node/v4-19-4) * [Version 4.19.3](/changelog/node/v4-19-3) * [Version 4.19.2](/changelog/node/v4-19-2) * [Version 4.19.1](/changelog/node/v4-19-1) * [Version 4.19.0](/changelog/node/v4-19-0) * [Version 4.18.5](/changelog/node/v4-18-5) * [Version 4.18.4](/changelog/node/v4-18-4) * [Version 4.18.3](/changelog/node/v4-18-3) * [Version 4.18.2](/changelog/node/v4-18-2) * [Version 4.18.1](/changelog/node/v4-18-1) * [Version 4.18.0](/changelog/node/v4-18-0) * [Version 4.17.4](/changelog/node/v4-17-4) * [Version 4.17.3](/changelog/node/v4-17-3) * [Version 4.17.2](/changelog/node/v4-17-2) * [Version 4.17.1](/changelog/node/v4-17-1) * [Version 4.17.0](/changelog/node/v4-17-0) * [Version 4.16.0](/changelog/node/v4-16-0) * [Version 4.15.2](/changelog/node/v4-15-2) * [Version 4.15.1](/changelog/node/v4-15-1) * [Version 4.15.0](/changelog/node/v4-15-0) * [Version 4.14.0](/changelog/node/v4-14-0) * [Version 4.13.1](/changelog/node/v4-13-1) * [Version 4.13.0](/changelog/node/v4-13-0) * [Version 4.12.2](/changelog/node/v4-12-2) * [Version 4.12.1](/changelog/node/v4-12-1) * [Version 4.12.0](/changelog/node/v4-12-0) * [Version 4.11.2](/changelog/node/v4-11-2) * [Version 4.11.0](/changelog/node/v4-11-0) * [Version 4.10.4](/changelog/node/v4-10-4) * [Version 4.10.3](/changelog/node/v4-10-3) * [Version 4.10.1](/changelog/node/v4-10-1) * [Version 4.10.0](/changelog/node/v4-10-0) * [Version 4.9.0](/changelog/node/v4-9-0) * [Version 4.8.2](/changelog/node/v4-8-2) * [Version 4.8.1](/changelog/node/v4-8-1) * [Version 4.8.0](/changelog/node/v4-8-0) * [Version 4.7.1](/changelog/node/v4-7-1) * [Version 4.7.0](/changelog/node/v4-7-0) * [Version 4.6.4](/changelog/node/v4-6-4) * [Version 4.6.3](/changelog/node/v4-6-3) * [Version 4.6.0](/changelog/node/v4-6-0) * [Version 4.5.0](/changelog/node/v4-5-0) * [Version 4.4.0](/changelog/node/v4-4-0) * [Version 4.3.0](/changelog/node/v4-3-0) * [Version 4.2.0](/changelog/node/v4-2-0) * [Version 4.1.0](/changelog/node/v4-1-0) * [Version 4.0.1](/changelog/node/v4-0-1) * [Version 4.0.0](/changelog/node/v4-0-0) * [Version 3.1.0](/changelog/node/v3-1-0) * [Version 3.0.4](/changelog/node/v3-0-4) * [Version 3.0.3](/changelog/node/v3-0-3) * [Version 3.0.2](/changelog/node/v3-0-2) * [Version 3.0.1](/changelog/node/v3-0-1) * [Version 3.0.0](/changelog/node/v3-0-0) * [Version 2.4.2](/changelog/node/v2-4-2) * [Version 2.4.1](/changelog/node/v2-4-1) * [Version 2.4.0](/changelog/node/v2-4-0) * [Version 2.3.1](/changelog/node/v2-3-1) * [Version 2.3.0](/changelog/node/v2-3-0) * [Version 2.2.0](/changelog/node/v2-2-0) * [Version 2.1.0](/changelog/node/v2-1-0) * [Version 2.0.0](/changelog/node/v2-0-0) * [Version 1.1.2](/changelog/node/v1-1-2) * [Version 1.1.1](/changelog/node/v1-1-1) * [Version 1.1.0](/changelog/node/v1-1-0) * [Version 1.0.0](/changelog/node/v1-0-0) * [Version 2021.12.16](/changelog/node/2021-12-16) * [Version 2021.11.18](/changelog/node/2021-11-18) * [Version 2021.09.30](/changelog/node/2021-09-30) * [Version 2021.08.26](/changelog/node/2021-08-26) * [Version 2021.07.29](/changelog/node/2021-07-29) * [Version 2021.06.24](/changelog/node/2021-06-24) * [Version 2021.05.27](/changelog/node/2021-05-27) * [Version 2021.04.29](/changelog/node/2021-04-29) * [Version 2021.03.25](/changelog/node/2021-03-25) * [Version 2021.02.24](/changelog/node/2021-02-24) * [Version 2021.01.28](/changelog/node/2021-01-28) * [Version 2020.12.16](/changelog/node/2020-12-16) * [Version 2020.10.29](/changelog/node/2020-10-29) * [Version 2020.09.30](/changelog/node/2020-09-30) * [Version 2020.08.28](/changelog/node/2020-08-28) * [Version 2020.07.28](/changelog/node/2020-07-28) * [Version 2020.06.25](/changelog/node/2020-06-25) * [Version 2020.05.28](/changelog/node/2020-05-28) * [Version 2020.04.29](/changelog/node/2020-04-29) * [Version 2020.03.26](/changelog/node/2020-03-26) * [Version 2020.02.27](/changelog/node/2020-02-27) * [Version 2020.01.31](/changelog/node/2020-01-31)

# VAST 2020.01.31

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2020.01.31). ### Features [Section titled “Features”](#features) #### Add -c as shorthand for —config [Section titled “Add -c as shorthand for —config”](#add--c-as-shorthand-for-config) The long option `--config`, which sets an explicit path to the VAST configuration file, now also has the short option `-c`. By [@mavam](https://github.com/mavam) in [#689](https://github.com/tenzir/tenzir/pull/689). #### PRs 632-726 [Section titled “PRs 632-726”](#prs-632-726) When a record field has the `#index=hash` attribute, VAST will choose an optimized index implementation. This new index type only supports (in)equality queries and is therefore intended to be used with opaque types, such as unique identifiers or random strings. By [@mavam](https://github.com/mavam) in [#632](https://github.com/tenzir/tenzir/pull/632). #### Add support for Apache Arrow [Section titled “Add support for Apache Arrow”](#add-support-for-apache-arrow) Added *Apache Arrow* as new export format. This allows users to export query results as Apache Arrow record batches for processing the results downstream, e.g., in Python or Spark. By [@dominiklohmann](https://github.com/dominiklohmann) in [#633](https://github.com/tenzir/tenzir/pull/633). #### Allow configuring pcap snapshot length [Section titled “Allow configuring pcap snapshot length”](#allow-configuring-pcap-snapshot-length) The `import pcap` command now takes an optional snapshot length via `--snaplen`. If the snapshot length is set to snaplen, and snaplen is less than the size of a packet that is captured, only the first snaplen bytes of that packet will be captured and provided as packet data. By [@dominiklohmann](https://github.com/dominiklohmann) in [#642](https://github.com/tenzir/tenzir/pull/642). #### Add FreeBSD rc.d script [Section titled “Add FreeBSD rc.d script”](#add-freebsd-rcd-script) On FreeBSD, a VAST installation now includes an rc.d script that simpliefies spinning up a VAST node. CMake installs the script at `PREFIX/etc/rc.d/vast`. By [@mavam](https://github.com/mavam) in [#693](https://github.com/tenzir/tenzir/pull/693). #### Add Python module for submitting queries to VAST [Section titled “Add Python module for submitting queries to VAST”](#add-python-module-for-submitting-queries-to-vast) An experimental new Python module enables querying VAST and processing results as [pyarrow](https://arrow.apache.org/docs/python/) tables. By [@tobim](https://github.com/tobim) in [#685](https://github.com/tenzir/tenzir/pull/685). ### Changes [Section titled “Changes”](#changes) #### Add Python module for submitting queries to VAST [Section titled “Add Python module for submitting queries to VAST”](#add-python-module-for-submitting-queries-to-vast-1) Record field names can now be entered as quoted strings in the schema and expression languages. This lifts a restriction where JSON fields with whitespaces or special characters could not be ingested. By [@tobim](https://github.com/tobim) in [#685](https://github.com/tenzir/tenzir/pull/685). #### Minor parser changes [Section titled “Minor parser changes”](#minor-parser-changes) Two minor modifications were done in the parsing framework: (i) the parsers for enums and records now allow trailing separators, and (ii) the dash (`-`) was removed from the allowed characters of schema type names. By [@tobim](https://github.com/tobim) in [#706](https://github.com/tenzir/tenzir/pull/706). #### Add separate interface option for import pcap [Section titled “Add separate interface option for import pcap”](#add-separate-interface-option-for-import-pcap) The `import pcap` command no longer takes interface names via `--read,-r`, but instead from a separate option named `--interface,-i`. This change has been made for consistency with other tools. By [@dominiklohmann](https://github.com/dominiklohmann) in [#641](https://github.com/tenzir/tenzir/pull/641). #### Switch to a calendar-based versioning scheme [Section titled “Switch to a calendar-based versioning scheme”](#switch-to-a-calendar-based-versioning-scheme) VAST is switching to a calendar-based versioning scheme starting with this release. By [@dominiklohmann](https://github.com/dominiklohmann) in [#739](https://github.com/tenzir/tenzir/pull/739). #### Perform pass over build config defaults [Section titled “Perform pass over build config defaults”](#perform-pass-over-build-config-defaults) Build configuration defaults have been adapated for a better user experience. Installations are now relocatable by default, which can be reverted by configuring with `--without-relocatable`. Additionally, new sets of defaults named `--release` and `--debug` (renamed from `--dev-mode`) have been added. By [@dominiklohmann](https://github.com/dominiklohmann) in [#695](https://github.com/tenzir/tenzir/pull/695). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix configuration file option parsing [Section titled “Fix configuration file option parsing”](#fix-configuration-file-option-parsing) The example configuration file contained an invalid section `vast`. This has been changed to the correct name `system`. By [@tobim](https://github.com/tobim) in [#705](https://github.com/tenzir/tenzir/pull/705). #### Fix datagram source actor not running heartbeat [Section titled “Fix datagram source actor not running heartbeat”](#fix-datagram-source-actor-not-running-heartbeat) The import process did not print statistics when importing events over UDP. Additionally, warnings about dropped UDP packets are no longer shown per packet, but rather periodically reported in a readable format. By [@dominiklohmann](https://github.com/dominiklohmann) in [#662](https://github.com/tenzir/tenzir/pull/662). #### Fix race in index lookup [Section titled “Fix race in index lookup”](#fix-race-in-index-lookup) A race condition in the index logic was able to lead to incomplete or empty result sets for `vast export`. By [@tobim](https://github.com/tobim) in [#703](https://github.com/tenzir/tenzir/pull/703). #### Refactor importer initialization [Section titled “Refactor importer initialization”](#refactor-importer-initialization) In some cases it was possible that a source would connect to a node before it was fully initialized, resulting in a hanging `vast import` process. By [@tobim](https://github.com/tobim) in [#647](https://github.com/tenzir/tenzir/pull/647). #### Ignore VLAN tags in PCAP import [Section titled “Ignore VLAN tags in PCAP import”](#ignore-vlan-tags-in-pcap-import) PCAP ingestion failed for traces containing VLAN tags. VAST now strips [IEEE 802.1Q](https://en.wikipedia.org/wiki/IEEE_802.1Q) headers instead of skipping VLAN-tagged packets. By [@mavam](https://github.com/mavam) in [#650](https://github.com/tenzir/tenzir/pull/650). #### Register the accountant for datagram sources [Section titled “Register the accountant for datagram sources”](#register-the-accountant-for-datagram-sources) Importing events over UDP with `vast import <format> --listen :<port>/udp` failed to register the accountant component. This caused an unexpected message warning to be printed on startup and resulted in losing import statistics. VAST now correctly registers the accountant. By [@dominiklohmann](https://github.com/dominiklohmann) in [#655](https://github.com/tenzir/tenzir/pull/655). #### Add Python module for submitting queries to VAST [Section titled “Add Python module for submitting queries to VAST”](#add-python-module-for-submitting-queries-to-vast-2) A bug in the quoted string parser caused a parsing failure if an escape character occurred in the last position. By [@tobim](https://github.com/tobim) in [#685](https://github.com/tenzir/tenzir/pull/685).

# VAST 2020.02.27

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2020.02.27). ### Features [Section titled “Features”](#features) #### Add a nix package expression for VAST [Section titled “Add a nix package expression for VAST”](#add-a-nix-package-expression-for-vast) For users of the [Nix](https://nixos.org/nix/) package manager, expressions have been added to generate reproducible development environments with `nix-shell`. By [@tobim](https://github.com/tobim) in [#740](https://github.com/tenzir/tenzir/pull/740). ### Changes [Section titled “Changes”](#changes) #### Revert “Annotate schemas with [Section titled “Revert “Annotate schemas with”](#revert-annotate-schemas-with) Hash indices have been disabled again due to a performance regression. By [@lava](https://github.com/lava) in [#765](https://github.com/tenzir/tenzir/pull/765). #### Remove default option for historical queries [Section titled “Remove default option for historical queries”](#remove-default-option-for-historical-queries) The option `--historical` for export commands has been removed, as it was the default already. By [@dominiklohmann](https://github.com/dominiklohmann) in [#754](https://github.com/tenzir/tenzir/pull/754). #### Update VAST for Apache Arrow 0.16 [Section titled “Update VAST for Apache Arrow 0.16”](#update-vast-for-apache-arrow-016) VAST now supports (and requires) Apache Arrow >= 0.16. By [@dominiklohmann](https://github.com/dominiklohmann) in [#751](https://github.com/tenzir/tenzir/pull/751). #### Add a nix package expression for VAST [Section titled “Add a nix package expression for VAST”](#add-a-nix-package-expression-for-vast-1) The build system will from now on try use the CAF library from the system, if one is provided. If it is not found, the CAF submodule will be used as a fallback. By [@tobim](https://github.com/tobim) in [#740](https://github.com/tenzir/tenzir/pull/740). #### Allow for separating persistent state and log directories [Section titled “Allow for separating persistent state and log directories”](#allow-for-separating-persistent-state-and-log-directories) The option `--directory` has been replaced by `--db-directory` and `log-directory`, which set directories for persistent state and log files respectively. The default log file path has changed from `vast.db/log` to `vast.log`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#758](https://github.com/tenzir/tenzir/pull/758). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Continuous import of Zeek logs in VAST is broken [Section titled “Continuous import of Zeek logs in VAST is broken”](#continuous-import-of-zeek-logs-in-vast-is-broken) Continuously importing events from a Zeek process with a low rate of emitted events resulted in a long delay until the data would be included in the result set of queries. This is because the import process would buffer up to 10,000 events before sending them to the server as a batch. The algorithm has been tuned to flush its buffers if no data is available for more than 500 milliseconds. By [@tobim](https://github.com/tobim) in [#750](https://github.com/tenzir/tenzir/pull/750).

# VAST 2020.03.26

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2020.03.26). ### Features [Section titled “Features”](#features) #### Use heterogenous lookup for hash index [Section titled “Use heterogenous lookup for hash index”](#use-heterogenous-lookup-for-hash-index) The hash index has been re-enabled after it was outfitted with a new [high-performance hash map](https://github.com/Tessil/robin-map/) implementation that increased performance to the point where it is on par with the regular index. By [@lava](https://github.com/lava) in [#796](https://github.com/tenzir/tenzir/pull/796). #### Require end-of-input to be reached for range-based parser invocations [Section titled “Require end-of-input to be reached for range-based parser invocations”](#require-end-of-input-to-be-reached-for-range-based-parser-invocations) An under-the-hood change to our parser-combinator framework makes sure that we do not discard possibly invalid input data up the the end of input. This uncovered a bug in our MRT/bgpdump integrations, which have thus been disabled (for now), and will be fixed at a later point in time. By [@dominiklohmann](https://github.com/dominiklohmann) in [#808](https://github.com/tenzir/tenzir/pull/808). #### Fix user shutdown handling for continuous exports [Section titled “Fix user shutdown handling for continuous exports”](#fix-user-shutdown-handling-for-continuous-exports) Continuous export processes can now be stopped correctly. Before this change, the node showed an error message and the exporting process exited with a non-zero exit code. By [@dominiklohmann](https://github.com/dominiklohmann) in [#779](https://github.com/tenzir/tenzir/pull/779). #### Implement reader for Syslog RFC5424 [Section titled “Implement reader for Syslog RFC5424”](#implement-reader-for-syslog-rfc5424) The new `vast import syslog` command allows importing Syslog messages as defined in [RFC5424](https://tools.ietf.org/html/rfc5424). By [@knapperzbusch](https://github.com/knapperzbusch) in [#770](https://github.com/tenzir/tenzir/pull/770). #### Remove -c short option for setting config file [Section titled “Remove -c short option for setting config file”](#remove--c-short-option-for-setting-config-file) The short option `-c` for setting the configuration file has been removed. The long option `--config` must now be used instead. This fixed a bug that did not allow for `-c` to be used for continuous exports. By [@dominiklohmann](https://github.com/dominiklohmann) in [#781](https://github.com/tenzir/tenzir/pull/781). #### Allow disabling Community ID computation for PCAPs [Section titled “Allow disabling Community ID computation for PCAPs”](#allow-disabling-community-id-computation-for-pcaps) The option `--disable-community-id` has been added to the `vast import pcap` command for disabling the automatic computation of Community IDs. By [@dominiklohmann](https://github.com/dominiklohmann) in [#777](https://github.com/tenzir/tenzir/pull/777). #### Require expressions to be parsed to end-of-input [Section titled “Require expressions to be parsed to end-of-input”](#require-expressions-to-be-parsed-to-end-of-input) Expressions must now be parsed to the end of input. This fixes a bug that caused malformed queries to be evaluated until the parser failed. For example, the query `#type == "suricata.http" && .dest_port == 80` was erroneously evaluated as `#type == "suricata.http"` instead. By [@dominiklohmann](https://github.com/dominiklohmann) in [#791](https://github.com/tenzir/tenzir/pull/791). ### Changes [Section titled “Changes”](#changes) #### Rename vast.account event type to vast.statistics [Section titled “Rename vast.account event type to vast.statistics”](#rename-vastaccount-event-type-to-vaststatistics) The internal statistics event type `vast.account` has been renamed to `vast.statistics` for clarity. By [@dominiklohmann](https://github.com/dominiklohmann) in [#789](https://github.com/tenzir/tenzir/pull/789). #### Add timestamp attribute to statistics ts field [Section titled “Add timestamp attribute to statistics ts field”](#add-timestamp-attribute-to-statistics-ts-field) The config option `system.log-directory` was deprecated and replaced by the new option `system.log-file`. All logs will now be written to a single file. By [@tobim](https://github.com/tobim) in [#806](https://github.com/tenzir/tenzir/pull/806). #### Restrict log file creation to ‘vast start’ [Section titled “Restrict log file creation to ‘vast start’”](#restrict-log-file-creation-to-vast-start) The log folder `vast.log/` in the current directory will not be created by default any more. Users must explicitly set the `system.file-verbosity` option if they wish to keep the old behavior. By [@lava](https://github.com/lava) in [#803](https://github.com/tenzir/tenzir/pull/803). #### Introduce the VERBOSE log level [Section titled “Introduce the VERBOSE log level”](#introduce-the-verbose-log-level) The VERBOSE log level has been added between INFO and DEBUG. This level is enabled at build time for all build types, making it possible to get more detailed logging output from release builds. By [@tobim](https://github.com/tobim) in [#787](https://github.com/tenzir/tenzir/pull/787). #### Replace ‘caf#’ prefix for CAF options with ‘caf.’ [Section titled “Replace ‘caf#’ prefix for CAF options with ‘caf.’”](#replace-caf-prefix-for-caf-options-with-caf) The command line options prefix for changing CAF options was changed from `--caf#` to `--caf.`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#797](https://github.com/tenzir/tenzir/pull/797).

# VAST 2020.04.29

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2020.04.29). ### Features [Section titled “Features”](#features) #### PRs 827-844 [Section titled “PRs 827-844”](#prs-827-844) Packet drop and discard statistics are now reported to the accountant for PCAP import, and are available using the keys `pcap-reader.recv`, `pcap-reader.drop`, `pcap-reader.ifdrop`, `pcap-reader.discard`, and `pcap-reader.discard-rate` in the `vast.statistics` event. If the number of dropped packets exceeds a configurable threshold, VAST additionally warns about packet drops on the command line. By [@dominiklohmann](https://github.com/dominiklohmann) in [#827](https://github.com/tenzir/tenzir/pull/827). #### Add Bash autocompletion for VAST [Section titled “Add Bash autocompletion for VAST”](#add-bash-autocompletion-for-vast) Bash autocompletion for `vast` is now available via the autocomplete script located at `scripts/vast-completions.bash` in the VAST source tree. By [@lava](https://github.com/lava) in [#833](https://github.com/tenzir/tenzir/pull/833). ### Changes [Section titled “Changes”](#changes) #### Rename count.skip-candidate-checks to count.estimate [Section titled “Rename count.skip-candidate-checks to count.estimate”](#rename-countskip-candidate-checks-to-countestimate) The option `--skip-candidate-checks` / `-s` for the `count` command was renamed to `--estimate` / `-e`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#843](https://github.com/tenzir/tenzir/pull/843). #### Change default listen address to ‘localhost’ [Section titled “Change default listen address to ‘localhost’”](#change-default-listen-address-to-localhost) The default bind address has been changed from `::` to `localhost`. By [@lava](https://github.com/lava) in [#828](https://github.com/tenzir/tenzir/pull/828). #### Simplify partition structure [Section titled “Simplify partition structure”](#simplify-partition-structure) The index specific options `max-partition-size`, `max-resident-partitions`, `max-taste-partitions`, and `max-queries` can now be specified on the command line when starting a node. By [@tobim](https://github.com/tobim) in [#728](https://github.com/tenzir/tenzir/pull/728). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix meta index nondeterminism [Section titled “Fix meta index nondeterminism”](#fix-meta-index-nondeterminism) For some queries, the index evaluated only a subset of all relevant partitions in a non-deterministic manner. Fixing a violated evaluation invariant now guarantees deterministic execution. By [@tobim](https://github.com/tobim) in [#842](https://github.com/tenzir/tenzir/pull/842). #### Use line reader timeout [Section titled “Use line reader timeout”](#use-line-reader-timeout) Fixed a bug that could cause stalled input streams not to forward events to the index and archive components for the JSON, CSV, and Syslog readers, when the input stopped arriving but no EOF was sent. This is a follow-up to [#750](https://github.com/tenzir/vast/pull/750). A timeout now ensures that that the readers continue when some events were already handled, but the input appears to be stalled. By [@dominiklohmann](https://github.com/dominiklohmann) in [#835](https://github.com/tenzir/tenzir/pull/835). #### Fix inequality port lookups [Section titled “Fix inequality port lookups”](#fix-inequality-port-lookups) Queries of the form `x != 80/tcp` were falsely evaluated as `x != 80/? && x != ?/tcp`. (The syntax in the second predicate does not yet exist; it only illustrates the bug.) Port inequality queries now correctly evaluate `x != 80/? || x != ?/tcp`. E.g., the result now contains values like `80/udp` and `80/?`, but also `8080/tcp`. By [@mavam](https://github.com/mavam) in [#834](https://github.com/tenzir/tenzir/pull/834). #### Make archive session extraction interruptible [Section titled “Make archive session extraction interruptible”](#make-archive-session-extraction-interruptible) Archive lookups are now interruptible. This change fixes an issue that caused consecutive exports to slow down the node, which improves the overall performance for larger databases considerably. By [@dominiklohmann](https://github.com/dominiklohmann) in [#825](https://github.com/tenzir/tenzir/pull/825). #### Remove assertion from expression tailoring [Section titled “Remove assertion from expression tailoring”](#remove-assertion-from-expression-tailoring) Fixed a crash when importing data while a continuous export was running for unrelated events. By [@lava](https://github.com/lava) in [#830](https://github.com/tenzir/tenzir/pull/830). #### Make stop command blocking and return properly [Section titled “Make stop command blocking and return properly”](#make-stop-command-blocking-and-return-properly) The `stop` command always returned immediately, regardless of whether it succeeded. It now blocks until the remote node shut down properly or returns an error exit code upon failure. By [@mavam](https://github.com/mavam) in [#849](https://github.com/tenzir/tenzir/pull/849).

# VAST 2020.05.28

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2020.05.28). ### Features [Section titled “Features”](#features) #### Support \` [Section titled “Support \`”](#support) \`-style newlines in VAST All input parsers now support mixed `\n` and `\r\n` line endings. By [@lava](https://github.com/lava) in [#865](https://github.com/tenzir/tenzir/pull/865). #### Deduce types for heterogenous JSONL import [Section titled “Deduce types for heterogenous JSONL import”](#deduce-types-for-heterogenous-jsonl-import) When importing events of a new or updated type, VAST now only requires the type to be specified once (e.g., in a schema file). For consecutive imports, the event type does not need to be specified again. A list of registered types can now be viewed using `vast status` under the key `node.type-registry.types`. When importing JSON data without knowing the type of the imported events a priori, VAST now supports automatic event type deduction based on the JSON object keys in the data. VAST selects a type *iff* the set of fields match a known type. The `--type` / `-t` option to the `import` command restricts the matching to the set of types that share the provided prefix. Omitting `-t` attempts to match JSON against all known types. If only a single variant of a type is matched, the import falls back to the old behavior and fills in `nil` for mismatched keys. By [@dominiklohmann](https://github.com/dominiklohmann) in [#875](https://github.com/tenzir/tenzir/pull/875). #### UX improvements for `read_query()` [Section titled “UX improvements for read\_query()”](#ux-improvements-for-read_query) VAST now prints a message when it is waiting for user input to read a query from a terminal. By [@lava](https://github.com/lava) in [#878](https://github.com/tenzir/tenzir/pull/878). #### Publish Sysmon schema [Section titled “Publish Sysmon schema”](#publish-sysmon-schema) VAST now ships with a schema suitable for Sysmon import. By [@dominiklohmann](https://github.com/dominiklohmann) in [#886](https://github.com/tenzir/tenzir/pull/886). #### PRs 873-877 [Section titled “PRs 873-877”](#prs-873-877) Added a new `explore` command to VAST that can be used to show data records within a certain time from the results of a query. By [@lava](https://github.com/lava) in [#873](https://github.com/tenzir/tenzir/pull/873). ### Changes [Section titled “Changes”](#changes) #### Rename statistics event to metrics [Section titled “Rename statistics event to metrics”](#rename-statistics-event-to-metrics) The command line flag for disabling the accountant has been renamed to `--disable-metrics` to more accurately reflect its intended purpose. The internal `vast.statistics` event has been renamed to `vast.metrics`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#870](https://github.com/tenzir/tenzir/pull/870). #### UX improvements for `read_query()` [Section titled “UX improvements for read\_query()”](#ux-improvements-for-read_query-1) Spreading a query over multiple command line arguments in commands like explore/export/pivot/etc. has been deprecated. By [@lava](https://github.com/lava) in [#878](https://github.com/tenzir/tenzir/pull/878). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Correct check for user schema in zeek reader [Section titled “Correct check for user schema in zeek reader”](#correct-check-for-user-schema-in-zeek-reader) The parser for Zeek tsv data used to ignore attributes that were defined for the Zeek-specific types in the schema files. It has been modified to respect and prefer the specified attributes for the fields that are present in the input data. By [@tobim](https://github.com/tobim) in [#847](https://github.com/tenzir/tenzir/pull/847). #### Various config and default setting fixes [Section titled “Various config and default setting fixes”](#various-config-and-default-setting-fixes) Fixed a bug that caused `vast import` processes to produce `'default'` table slices, despite having the `'arrow'` type as the default. Fixed a bug where setting the `logger.file-verbosity` in the config file would not have an effect. By [@tobim](https://github.com/tobim) in [#866](https://github.com/tenzir/tenzir/pull/866).

# VAST 2020.06.25

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2020.06.25). ### Features [Section titled “Features”](#features) #### Allow output format selection for the pivot/explore command [Section titled “Allow output format selection for the pivot/explore command”](#allow-output-format-selection-for-the-pivotexplore-command) The output format for the `explore` and `pivot` commands can now be set using the `explore.format` and `pivot.format` options respectively. Both default to JSON. By [@dominiklohmann](https://github.com/dominiklohmann) in [#921](https://github.com/tenzir/tenzir/pull/921). #### Support type relaxation for JSON import [Section titled “Support type relaxation for JSON import”](#support-type-relaxation-for-json-import) The `import json` command’s type restrictions are more relaxed now, and can additionally convert from JSON strings to VAST internal data types. By [@dominiklohmann](https://github.com/dominiklohmann) in [#891](https://github.com/tenzir/tenzir/pull/891). #### Support /etc/vast/vast.conf as global config [Section titled “Support /etc/vast/vast.conf as global config”](#support-etcvastvastconf-as-global-config) VAST now supports `/etc/vast/vast.conf` as an additional fallback for the configuration file. The following file locations are looked at in order: Path specified on the command line via `--config=path/to/vast.conf`, `vast.conf` in current working directory, `${INSTALL_PREFIX}/etc/vast/vast.conf`, and `/etc/vast/vast.conf`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#898](https://github.com/tenzir/tenzir/pull/898). #### Support aging out data based on a query [Section titled “Support aging out data based on a query”](#support-aging-out-data-based-on-a-query) VAST now supports aging out existing data. This feature currently only concerns data in the archive. The options `system.aging-frequency` and `system.aging-query` configure a query that runs on a regular schedule to determine which events to delete. It is also possible to trigger an aging cycle manually. By [@dominiklohmann](https://github.com/dominiklohmann) in [#929](https://github.com/tenzir/tenzir/pull/929). #### Add limit options for vast explore [Section titled “Add limit options for vast explore”](#add-limit-options-for-vast-explore) VAST now has options to limit the amount of results produced by an invocation of `vast explore`. By [@lava](https://github.com/lava) in [#882](https://github.com/tenzir/tenzir/pull/882). #### Forcefully emit batches on input timeout error [Section titled “Forcefully emit batches on input timeout error”](#forcefully-emit-batches-on-input-timeout-error) The `import` command gained a new `--read-timeout` option that forces data to be forwarded to the importer regardless of the internal batching parameters and table slices being unfinished. This allows for reducing the latency between the `import` command and the node. The default timeout is 10 seconds. By [@dominiklohmann](https://github.com/dominiklohmann) in [#916](https://github.com/tenzir/tenzir/pull/916). #### Add Bloom filter meta index [Section titled “Add Bloom filter meta index”](#add-bloom-filter-meta-index) The meta index now uses Bloom filters for equality queries involving IP addresses. This especially accelerates queries where the user wants to know whether a certain IP address exists in the entire database. By [@mavam](https://github.com/mavam) in [#931](https://github.com/tenzir/tenzir/pull/931). ### Changes [Section titled “Changes”](#changes) #### Rename the ‘default’ table slice type to ‘caf’ [Section titled “Rename the ‘default’ table slice type to ‘caf’”](#rename-the-default-table-slice-type-to-caf) The `default` table slice type has been renamed to `caf`. It has not been the default when built with Apache Arrow support for a while now, and the new name more accurately reflects what it is doing. By [@dominiklohmann](https://github.com/dominiklohmann) in [#948](https://github.com/tenzir/tenzir/pull/948). #### Print timestamps with full precision for JSON [Section titled “Print timestamps with full precision for JSON”](#print-timestamps-with-full-precision-for-json) The JSON export format now renders timestamps using strings instead of numbers in order to avoid possible loss of precision. By [@dominiklohmann](https://github.com/dominiklohmann) in [#909](https://github.com/tenzir/tenzir/pull/909). #### PRs 908-951 [Section titled “PRs 908-951”](#prs-908-951) The options `system.table-slice-type` and `system.table-slice-size` have been removed, as they duplicated `import.table-slice-type` and `import.table-slice-size` respectively. By [@tobim](https://github.com/tobim) in [#908](https://github.com/tenzir/tenzir/pull/908). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Improve handling of UTF-8 input [Section titled “Improve handling of UTF-8 input”](#improve-handling-of-utf-8-input) The `export json` command now correctly unescapes its output. VAST now correctly checks for control characters in inputs. By [@dominiklohmann](https://github.com/dominiklohmann) in [#910](https://github.com/tenzir/tenzir/pull/910). #### Simplify id space management [Section titled “Simplify id space management”](#simplify-id-space-management) A bogus import process that assembled table slices with a greater number of events than expected by the node was able to lead to wrong query results. By [@tobim](https://github.com/tobim) in [#908](https://github.com/tenzir/tenzir/pull/908). #### Fix use-after-free bug in indexer state [Section titled “Fix use-after-free bug in indexer state”](#fix-use-after-free-bug-in-indexer-state) A use after free bug would sometimes crash the node while it was shutting down. By [@lava](https://github.com/lava) in [#896](https://github.com/tenzir/tenzir/pull/896).

# VAST 2020.07.28

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2020.07.28). ### Features [Section titled “Features”](#features) #### Add a static binary workflow [Section titled “Add a static binary workflow”](#add-a-static-binary-workflow) Starting with this release, installing VAST on any Linux becomes significantly easier: A static binary will be provided with each release on the GitHub releases page. By [@tobim](https://github.com/tobim) in [#966](https://github.com/tenzir/tenzir/pull/966). #### Add MsgPack-based Table Slice implementation [Section titled “Add MsgPack-based Table Slice implementation”](#add-msgpack-based-table-slice-implementation) We open-sourced our [MessagePack](http://msgpack.org)-based table slice implementation, which provides a compact row-oriented encoding of data. This encoding works well for binary formats (e.g., PCAP) and access patterns that involve materializing entire rows. The MessagePack table slice is the new default when Apache Arrow is unavailable. To enable parsing into MessagePack, you can pass `--table-slice-type=msgpack` to the `import` command, or set the configuration option `import.table-slice-type` to `'msgpack'`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#975](https://github.com/tenzir/tenzir/pull/975). ### Changes [Section titled “Changes”](#changes) #### Use Flatbuffers for Persistent State of Segment Store and Meta Index [Section titled “Use Flatbuffers for Persistent State of Segment Store and Meta Index”](#use-flatbuffers-for-persistent-state-of-segment-store-and-meta-index) [FlatBuffers](https://google.github.io/flatbuffers/) is now a required dependency for VAST. The archive and the segment store use FlatBuffers to store and version their on-disk persistent state. By [@lava](https://github.com/lava) in [#972](https://github.com/tenzir/tenzir/pull/972). #### Improve handling of the default schema paths [Section titled “Improve handling of the default schema paths”](#improve-handling-of-the-default-schema-paths) VAST now recognizes `/etc/vast/schema` as an additional default directory for schema files. By [@tobim](https://github.com/tobim) in [#980](https://github.com/tenzir/tenzir/pull/980). #### PRs 954-986 [Section titled “PRs 954-986”](#prs-954-986) The suricata schema file contains new type definitions for the stats, krb5, smb, and ssh events. By [@tobim](https://github.com/tobim) in [#954](https://github.com/tenzir/tenzir/pull/954). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix spawn source subcommand [Section titled “Fix spawn source subcommand”](#fix-spawn-source-subcommand) The PCAP reader now correctly shows the amount of generated events. By [@tobim](https://github.com/tobim) in [#954](https://github.com/tenzir/tenzir/pull/954).

# VAST 2020.08.28

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2020.08.28). ### Features [Section titled “Features”](#features) #### Always convert JSON null to VAST nil [Section titled “Always convert JSON null to VAST nil”](#always-convert-json-null-to-vast-nil) The default schema for Suricata has been updated to support the `suricata.ftp` and `suricata.ftp_data` event types. VAST now prints the location of the configuration file that is used. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1009](https://github.com/tenzir/tenzir/pull/1009). #### Protect DB directory with PID lock [Section titled “Protect DB directory with PID lock”](#protect-db-directory-with-pid-lock) VAST now writes a PID lock file on startup to prevent multiple server processes from accessing the same persistent state. The `pid.lock` file resides in the `vast.db` directory. By [@mavam](https://github.com/mavam) in [#1001](https://github.com/tenzir/tenzir/pull/1001). ### Changes [Section titled “Changes”](#changes) #### Rename vector to list [Section titled “Rename vector to list”](#rename-vector-to-list) The `vector` type has been renamed to `list`. In an effort to streamline the type system vocabulary, we favor `list` over `vector` because it’s closer to existing terminology (e.g., Apache Arrow). This change requires updating existing schemas by changing `vector<T>` to `list<T>`. By [@mavam](https://github.com/mavam) in [#1016](https://github.com/tenzir/tenzir/pull/1016). #### Allow the ’-’ in the expression key parser [Section titled “Allow the ’-’ in the expression key parser”](#allow-the---in-the-expression-key-parser) The expression field parser now allows the ’-’ character. By [@tobim](https://github.com/tobim) in [#999](https://github.com/tenzir/tenzir/pull/999). #### Remove set data type [Section titled “Remove set data type”](#remove-set-data-type) The `set` type has been removed. Experience with the data model showed that there is no strong use case to separate sets from vectors in the core. While this may be useful in programming languages, VAST deals with immutable data where set constraints have been enforced upstream. This change requires updating existing schemas by changing `set<T>` to `vector<T>`. In the query language, the new symbol for the empty `map` changed from `{-}` to `{}`, as it now unambiguously identifies `map` instances. By [@mavam](https://github.com/mavam) in [#1010](https://github.com/tenzir/tenzir/pull/1010). #### Expand CAF stream slot ids to 32 bits [Section titled “Expand CAF stream slot ids to 32 bits”](#expand-caf-stream-slot-ids-to-32-bits) We now bundle a patched version of CAF, with a changed ABI. This means that if you’re linking against the bundled CAF library, you also need to distribute that library so that VAST can use it at runtime. The versions are API compatible so linking against a system version of CAF is still possible and supported. By [@lava](https://github.com/lava) in [#1020](https://github.com/tenzir/tenzir/pull/1020). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix bug in decoding multi-object MsgPack types [Section titled “Fix bug in decoding multi-object MsgPack types”](#fix-bug-in-decoding-multi-object-msgpack-types) MessagePack-encoded table slices now work correctly for nested container types. By [@mavam](https://github.com/mavam) in [#984](https://github.com/tenzir/tenzir/pull/984). #### Expand CAF stream slot ids to 32 bits [Section titled “Expand CAF stream slot ids to 32 bits”](#expand-caf-stream-slot-ids-to-32-bits-1) When running VAST under heavy load, CAF stream slot ids could wrap around after a few days and deadlock the system. As a workaround, we extended the slot id bit width to make the time until this happens unrealistically large. By [@lava](https://github.com/lava) in [#1020](https://github.com/tenzir/tenzir/pull/1020). #### Allow the ’-’ in the expression key parser [Section titled “Allow the ’-’ in the expression key parser”](#allow-the---in-the-expression-key-parser-1) A bug in the expression parser prevented the correct parsing of fields starting with either ‘F’ or ‘T’. By [@tobim](https://github.com/tobim) in [#999](https://github.com/tenzir/tenzir/pull/999). #### Terminate exporters when sinks die [Section titled “Terminate exporters when sinks die”](#terminate-exporters-when-sinks-die) When continuous query in a client process terminated, the node did not clean up the corresponding server-side state. This memory leak no longer exists. By [@mavam](https://github.com/mavam) in [#1006](https://github.com/tenzir/tenzir/pull/1006). #### Support hard-kill for unresponsive actors [Section titled “Support hard-kill for unresponsive actors”](#support-hard-kill-for-unresponsive-actors) The shutdown process of the server process could potentially hang forever. VAST now uses a 2-step procedure that first attempts to terminate all components cleanly. If that fails, it will attempt a hard kill afterwards, and if that fails after another timeout, the process will call `abort(3)`. By [@mavam](https://github.com/mavam) in [#1005](https://github.com/tenzir/tenzir/pull/1005). #### Make port-encoding for Arrow host-independent [Section titled “Make port-encoding for Arrow host-independent”](#make-port-encoding-for-arrow-host-independent) The port encoding for Arrow-encoded table slices is now host-independent and always uses network-byte order. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1007](https://github.com/tenzir/tenzir/pull/1007). #### Close file descriptor by default in ‘vast::file’ [Section titled “Close file descriptor by default in ‘vast::file’”](#close-file-descriptor-by-default-in-vastfile) Some file descriptors remained open when they weren’t needed any more. This descriptor leak has been fixed. By [@lava](https://github.com/lava) in [#1018](https://github.com/tenzir/tenzir/pull/1018). #### Always convert JSON null to VAST nil [Section titled “Always convert JSON null to VAST nil”](#always-convert-json-null-to-vast-nil-1) Importing JSON no longer fails for JSON fields containing `null` when the corresponding VAST type in the schema is a non-trivial type like `vector<string>`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1009](https://github.com/tenzir/tenzir/pull/1009). #### Correct the use of ::read() [Section titled “Correct the use of ::read()”](#correct-the-use-of-read) Incomplete reads have not been handled properly, which manifested for files larger than 2GB. On macOS, writing files larger than 2GB may have failed previously. VAST now respects OS-specific constraints on the maximum block size. By [@tobim](https://github.com/tobim) in [#1025](https://github.com/tenzir/tenzir/pull/1025). #### Shutdown node when component startup fails [Section titled “Shutdown node when component startup fails”](#shutdown-node-when-component-startup-fails) VAST did not terminate when a critical component failed during startup. VAST now binds the lifetime of the node to all critical components. By [@mavam](https://github.com/mavam) in [#1028](https://github.com/tenzir/tenzir/pull/1028). #### Don’t overwrite index state after startup error [Section titled “Don’t overwrite index state after startup error”](#dont-overwrite-index-state-after-startup-error) VAST would overwrite existing on-disk state data when encountering a partial read during startup. This state-corrupting behavior no longer exists. By [@lava](https://github.com/lava) in [#1026](https://github.com/tenzir/tenzir/pull/1026).

# VAST 2020.09.30

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2020.09.30). ### Features [Section titled “Features”](#features) #### Restructure vast status [Section titled “Restructure vast status”](#restructure-vast-status) The output of the `status` command was restructured with a strong focus on usability. The new flags `--detailed` and `--debug` add additional content to the output. By [@tobim](https://github.com/tobim) in [#995](https://github.com/tenzir/tenzir/pull/995). #### Flatbufferize index [Section titled “Flatbufferize index”](#flatbufferize-index) VAST now ships with a new tool `lsvast` to display information about the contents of a VAST database directory. See `lsvast --help` for usage instructions. By [@mavam](https://github.com/mavam) in [#863](https://github.com/tenzir/tenzir/pull/863). #### Merge contents of all configuration files [Section titled “Merge contents of all configuration files”](#merge-contents-of-all-configuration-files) VAST now merges the contents of all used configuration files instead of using only the most user-specific file. The file specified using `--config` takes the highest precedence, followed by the user-specific path `${XDG_CONFIG_HOME:-${HOME}/.config}/vast/vast.conf`, and the compile-time path `<sysconfdir>/vast/vast.conf`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1040](https://github.com/tenzir/tenzir/pull/1040). #### Add a get subcommand to retrieve events from the archive directly [Section titled “Add a get subcommand to retrieve events from the archive directly”](#add-a-get-subcommand-to-retrieve-events-from-the-archive-directly) The `vast get` command has been added. It retrieves events from the database directly by their ids. By [@tobim](https://github.com/tobim) in [#938](https://github.com/tenzir/tenzir/pull/938). #### Make vast.conf lookup on Linux systems more intuitive [Section titled “Make vast.conf lookup on Linux systems more intuitive”](#make-vastconf-lookup-on-linux-systems-more-intuitive) VAST now supports the XDG base directory specification: The `vast.conf` is now found at `${XDG_CONFIG_HOME:-${HOME}/.config}/vast/vast.conf`, and schema files at `${XDG_DATA_HOME:-${HOME}/.local/share}/vast/schema/`. The user-specific configuration file takes precedence over the global configuration file in `<sysconfdir>/vast/vast.conf`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1036](https://github.com/tenzir/tenzir/pull/1036). ### Changes [Section titled “Changes”](#changes) #### PRs 1045-1055-1059-1062 [Section titled “PRs 1045-1055-1059-1062”](#prs-1045-1055-1059-1062) The proprietary VAST configuration file has changed to the more ops-friendly industry standard YAML. This change introduced also a new dependency: [yaml-cpp](https://github.com/jbeder/yaml-cpp) version 0.6.2 or greater. The top-level `vast.yaml.example` illustrates how the new YAML config looks like. Please rename existing configuration files from `vast.conf` to `vast.yaml`. VAST still reads `vast.conf` but will soon only look for `vast.yaml` or `vast.yml` files in available configuration file paths. By [@mavam](https://github.com/mavam) in [#1045](https://github.com/tenzir/tenzir/pull/1045). #### Add event type name to the record batch metadata [Section titled “Add event type name to the record batch metadata”](#add-event-type-name-to-the-record-batch-metadata) Data exported in the Apache Arrow format now contains the name of the payload record type in the metadata section of the schema. By [@tobim](https://github.com/tobim) in [#1072](https://github.com/tenzir/tenzir/pull/1072). #### Render duration and port as JSON strings [Section titled “Render duration and port as JSON strings”](#render-duration-and-port-as-json-strings) The JSON export format now renders `duration` and `port` fields using strings as opposed to numbers. This avoids a possible loss of information and enables users to re-use the output in follow-up queries directly. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1034](https://github.com/tenzir/tenzir/pull/1034). #### Make periodic logging more sensible [Section titled “Make periodic logging more sensible”](#make-periodic-logging-more-sensible) The delay between the periodic log messages for reporting the current event rates has been increased to 10 seconds. By [@tobim](https://github.com/tobim) in [#1035](https://github.com/tenzir/tenzir/pull/1035). #### Make vast.conf lookup on Linux systems more intuitive [Section titled “Make vast.conf lookup on Linux systems more intuitive”](#make-vastconf-lookup-on-linux-systems-more-intuitive-1) The global VAST configuration now always resides in `<sysconfdir>/vast/vast.conf`, and bundled schemas always in `<datadir>/vast/schema/`. VAST no longer supports reading a `vast.conf` file in the current working directory. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1036](https://github.com/tenzir/tenzir/pull/1036). #### Flatbufferize index [Section titled “Flatbufferize index”](#flatbufferize-index-1) The persistent storage format of the index now uses FlatBuffers. By [@mavam](https://github.com/mavam) in [#863](https://github.com/tenzir/tenzir/pull/863). #### Improve import batching options [Section titled “Improve import batching options”](#improve-import-batching-options) The options that affect batches in the `import` command received new, more user-facing names: `import.table-slice-type`, `import.table-slice-size`, and `import.read-timeout` are now called `import.batch-encoding`, `import.batch-size`, and `import.read-timeout` respectively. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1058](https://github.com/tenzir/tenzir/pull/1058). #### Flatbufferize index [Section titled “Flatbufferize index”](#flatbufferize-index-2) We refactored the index architecture to improve stability and responsiveness. This includes fixes for several shutdown issues. By [@mavam](https://github.com/mavam) in [#863](https://github.com/tenzir/tenzir/pull/863). #### Restructure configuration file hierarchy [Section titled “Restructure configuration file hierarchy”](#restructure-configuration-file-hierarchy) All configuration options are now grouped into `vast` and `caf` sections, depending on whether they affect VAST itself or are handed through to the underlying actor framework CAF directly. Take a look at the bundled `vast.yaml.example` file for an explanation of the new layout. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1073](https://github.com/tenzir/tenzir/pull/1073). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Improve import batching options [Section titled “Improve import batching options”](#improve-import-batching-options-1) Stalled sources that were unable to generate new events no longer stop import processes from shutting down under rare circumstances. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1058](https://github.com/tenzir/tenzir/pull/1058).

# VAST 2020.10.29

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2020.10.29). ### Features [Section titled “Features”](#features) #### Age rotation for old data [Section titled “Age rotation for old data”](#age-rotation-for-old-data) The new options `vast.segments` and `vast.max-segment-size` control how the archive generates segments. By [@lava](https://github.com/lava) in [#1103](https://github.com/tenzir/tenzir/pull/1103). #### Enable loading of concepts from disk [Section titled “Enable loading of concepts from disk”](#enable-loading-of-concepts-from-disk) The query language now comes with support for concepts, the first part of taxonomies. Concepts is a mechanism to unify the various naming schemes of different data formats into a single, coherent nomenclature. By [@tobim](https://github.com/tobim) in [#1102](https://github.com/tenzir/tenzir/pull/1102). #### Allow tuple-style syntax for parsing records [Section titled “Allow tuple-style syntax for parsing records”](#allow-tuple-style-syntax-for-parsing-records) The expression language now accepts records without field names. For example,`id == <192.168.0.1, 41824, 143.51.53.13, 25, "tcp">` is now valid syntax and instantiates a record with 5 fields. Note: expressions with records currently do not execute. By [@tobim](https://github.com/tobim) in [#1129](https://github.com/tenzir/tenzir/pull/1129). #### Add script to convert CIM to VAST taxonomy [Section titled “Add script to convert CIM to VAST taxonomy”](#add-script-to-convert-cim-to-vast-taxonomy) The new script `splunk-to-vast` converts a splunk CIM model file in JSON to a VAST taxonomy. For example, `splunk-to-vast < Network_Traffic.json` renders the concept definitions for the *Network Traffic* datamodel. The generated taxonomy does not include field definitions, which users should add separately according to their data formats. By [@mavam](https://github.com/mavam) in [#1121](https://github.com/tenzir/tenzir/pull/1121). #### Support native systemd startup notification from VAST [Section titled “Support native systemd startup notification from VAST”](#support-native-systemd-startup-notification-from-vast) When running VAST under systemd supervision, it is now possible to use the `Type=notify` directive in the unit file to let VAST notify the service manager when it becomes ready. By [@lava](https://github.com/lava) in [#1091](https://github.com/tenzir/tenzir/pull/1091). #### Age rotation for old data [Section titled “Age rotation for old data”](#age-rotation-for-old-data-1) A new *disk monitor* component can now monitor the database size and delete data that exceeds a specified threshold. Once VAST reaches the maximum amount of disk space, the disk monitor deletes the oldest data. The command-line options `--disk-quota-high`, `--disk-quota-low`, and `--disk-quota-check-interval` control the rotation behavior. By [@lava](https://github.com/lava) in [#1103](https://github.com/tenzir/tenzir/pull/1103). ### Changes [Section titled “Changes”](#changes) #### Make default log format less verbose [Section titled “Make default log format less verbose”](#make-default-log-format-less-verbose) Log files are now less verbose because class and function names are not printed on every line. By [@lava](https://github.com/lava) in [#1107](https://github.com/tenzir/tenzir/pull/1107). #### Make the source actor more responsive [Section titled “Make the source actor more responsive”](#make-the-source-actor-more-responsive) The new option `import.read-timeout` allows for setting an input timeout for low volume sources. Reaching the timeout causes the current batch to be forwarded immediately. This behavior was previously controlled by `import.batch-timeout`, which now only controls the maximum buffer time before the source forwards batches to the server. By [@tobim](https://github.com/tobim) in [#1096](https://github.com/tenzir/tenzir/pull/1096). #### Change /var/db to /var/lib on Linux deployments [Section titled “Change /var/db to /var/lib on Linux deployments”](#change-vardb-to-varlib-on-linux-deployments) The default database directory moved to `/var/lib/vast` for Linux deployments. By [@0snap](https://github.com/0snap) in [#1116](https://github.com/tenzir/tenzir/pull/1116). #### Warn on client-server version mismatch [Section titled “Warn on client-server version mismatch”](#warn-on-client-server-version-mismatch) VAST will now warn if a client command connects to a server that runs on a different version of the vast binary. By [@tobim](https://github.com/tobim) in [#1098](https://github.com/tenzir/tenzir/pull/1098). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix merging of source status objects [Section titled “Fix merging of source status objects”](#fix-merging-of-source-status-objects) The `vast status --detailed` command now correctly shows the status of all sources, i.e., `vast import` or `vast spawn source` commands. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1109](https://github.com/tenzir/tenzir/pull/1109). #### Fix file identifier check in lsvast [Section titled “Fix file identifier check in lsvast”](#fix-file-identifier-check-in-lsvast) The `lsvast` tool failed to print FlatBuffers schemas correctly. The output now renders correctly. By [@lava](https://github.com/lava) in [#1123](https://github.com/tenzir/tenzir/pull/1123). #### Use a stable set for schema directories [Section titled “Use a stable set for schema directories”](#use-a-stable-set-for-schema-directories) The lookup for schema directories now happens in a fixed order. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1086](https://github.com/tenzir/tenzir/pull/1086). #### Don’t enable automatic connections by default [Section titled “Don’t enable automatic connections by default”](#dont-enable-automatic-connections-by-default) VAST no longer opens a random public port, which used to be enabled in the experimental VAST cluster mode in order to transparently establish a full mesh. By [@lava](https://github.com/lava) in [#1110](https://github.com/tenzir/tenzir/pull/1110). #### Make the source actor more responsive [Section titled “Make the source actor more responsive”](#make-the-source-actor-more-responsive-1) Sources that receive no or very little input do not block `vast status` any longer. By [@tobim](https://github.com/tobim) in [#1096](https://github.com/tenzir/tenzir/pull/1096).

# VAST 2020.12.16

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2020.12.16). ### Features [Section titled “Features”](#features) #### PRs 1196-1233 [Section titled “PRs 1196-1233”](#prs-1196-1233) The new `dump` command prints configuration and schema-related information. The implementation allows for printing all registered concepts and models, via `vast dump concepts` and `vast dump models`. The flag to `--yaml` to `dump` switches from JSON to YAML output, such that it confirms to the taxonomy configuration syntax. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1196](https://github.com/tenzir/tenzir/pull/1196). #### Add support for type-level synopses and a string synopsis [Section titled “Add support for type-level synopses and a string synopsis”](#add-support-for-type-level-synopses-and-a-string-synopsis) Low-selectivity queries of string (in)equality queries now run up to 30x faster, thanks to more intelligent selection of relevant index partitions. By [@tobim](https://github.com/tobim) in [#1214](https://github.com/tenzir/tenzir/pull/1214). #### Add support for USDT tracepoints in VAST [Section titled “Add support for USDT tracepoints in VAST”](#add-support-for-usdt-tracepoints-in-vast) On Linux, VAST now contains a set of built-in USDT tracepoints that can be used by tools like `perf` or `bpftrace` when debugging. Initially, we provide the two tracepoints `chunk_make` and `chunk_destroy`, which trigger every time a `vast::chunk` is created or destroyed. By [@lava](https://github.com/lava) in [#1206](https://github.com/tenzir/tenzir/pull/1206). #### PRs 1135-1150 [Section titled “PRs 1135-1150”](#prs-1135-1150) VAST now ships with its own taxonomy and basic concept definitions for Suricata, Zeek, and Sysmon. By [@mavam](https://github.com/mavam) in [#1135](https://github.com/tenzir/tenzir/pull/1135). #### Show file size information in lsvast [Section titled “Show file size information in lsvast”](#show-file-size-information-in-lsvast) The new option `--print-bytesizes` of `lsvast` prints information about the size of certain fields of the flatbuffers inside a VAST database directory. By [@lava](https://github.com/lava) in [#1149](https://github.com/tenzir/tenzir/pull/1149). #### Introduce the #field meta extractor [Section titled “Introduce the #field meta extractor”](#introduce-the-field-meta-extractor) The expression language gained support for the `#field` meta extractor. It is the complement for `#type` and uses suffix matching for field names at the layout level. By [@tobim](https://github.com/tobim) in [#1228](https://github.com/tenzir/tenzir/pull/1228). #### PRs 1172-1200-1216 [Section titled “PRs 1172-1200-1216”](#prs-1172-1200-1216) The storage required for index IP addresses has been optimized. This should result in significantly reduced memory usage over time, as well as faster restart times and reduced disk space requirements. By [@lava](https://github.com/lava) in [#1172](https://github.com/tenzir/tenzir/pull/1172). #### Allow for enabling client file logging [Section titled “Allow for enabling client file logging”](#allow-for-enabling-client-file-logging) The new option `vast.client-log-file` enables client-side logging. By default, VAST only writes log files for the server process. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1132](https://github.com/tenzir/tenzir/pull/1132). #### Show meta index size in vast status [Section titled “Show meta index size in vast status”](#show-meta-index-size-in-vast-status) A new key ‘meta-index-bytes’ appears in the status output generated by `vast status --detailed`. By [@lava](https://github.com/lava) in [#1193](https://github.com/tenzir/tenzir/pull/1193). #### PRs 1185-1228 [Section titled “PRs 1185-1228”](#prs-1185-1228) The query language now supports models. Models combine a list of concepts into a semantic unit that can be fulfiled by an event. If the type of an event contains a field for every concept in a model. Turn to [the documentation](https://vast.io/docs/understand/data-model/taxonomies#models) for more information. By [@tobim](https://github.com/tobim) in [#1185](https://github.com/tenzir/tenzir/pull/1185). ### Changes [Section titled “Changes”](#changes) #### Make Zeek writer work with all data types [Section titled “Make Zeek writer work with all data types”](#make-zeek-writer-work-with-all-data-types) The `zeek` export format now strips off the prefix `zeek.` to ensure full compatibility with regular Zeek output. For all non-Zeek types, the prefix remains intact. By [@mavam](https://github.com/mavam) in [#1205](https://github.com/tenzir/tenzir/pull/1205). #### Process schema directories recursively [Section titled “Process schema directories recursively”](#process-schema-directories-recursively) VAST now processes the schema directory recursively, as opposed to stopping at nested directories. By [@mavam](https://github.com/mavam) in [#1154](https://github.com/tenzir/tenzir/pull/1154). #### Make metrics opt-in [Section titled “Make metrics opt-in”](#make-metrics-opt-in) VAST does not produce metrics by default any more. The option `--disable-metrics` has been renamed to `--enable-metrics` accordingly. By [@tobim](https://github.com/tobim) in [#1137](https://github.com/tenzir/tenzir/pull/1137). #### PRs 1176-1180-1186-1237-satta [Section titled “PRs 1176-1180-1186-1237-satta”](#prs-1176-1180-1186-1237-satta) The Suricata schemas received an overhaul: there now exist `vlan` and `in_iface` fields in all types. In addition, VAST ships with new types for `ikev2`, `nfs`, `snmp`, `tftp`, `rdp`, `sip` and `dcerpc`. The `tls` type gets support for the additional `sni` and `session_resumed` fields. By [@satta](https://github.com/satta) in [#1176](https://github.com/tenzir/tenzir/pull/1176). #### Move schema definitions into subdirectory [Section titled “Move schema definitions into subdirectory”](#move-schema-definitions-into-subdirectory) Installed schema definitions now reside in `<datadir>/vast/schema/types`, taxonomy definitions in `<datadir>/vast/schema/taxonomy`, and concept definitions in `<datadir/vast/schema/concepts`, as opposed to them all being in the schema directory directly. When overriding an existing installation, you *may* have to delete the old schema definitions by hand. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1194](https://github.com/tenzir/tenzir/pull/1194). #### Set fallback port for underspecified endpoints [Section titled “Set fallback port for underspecified endpoints”](#set-fallback-port-for-underspecified-endpoints) VAST now listens on port 42000 instead of letting the operating system choose the port if the option `vast.endpoint` specifies an endpoint without a port. To restore the old behavior, set the port to 0 explicitly. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1170](https://github.com/tenzir/tenzir/pull/1170). #### Fulfill Deployment Requirements [Section titled “Fulfill Deployment Requirements”](#fulfill-deployment-requirements) The build configuration of VAST received a major overhaul. Inclusion of libvast in other procects via `add_subdirectory(path/to/vast)` is now easily possible. The names of all build options were aligned, and the new build summary shows all available options. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1175](https://github.com/tenzir/tenzir/pull/1175). #### Replace PID file if process does not exist [Section titled “Replace PID file if process does not exist”](#replace-pid-file-if-process-does-not-exist) VAST no longer requires you to manually remove a stale PID file from a no-longer running `vast` process. Instead, VAST prints a warning and overwrites the old PID file. By [@tobim](https://github.com/tobim) in [#1128](https://github.com/tenzir/tenzir/pull/1128). #### PRs 1143-1157-1160-1165 [Section titled “PRs 1143-1157-1160-1165”](#prs-1143-1157-1160-1165) The on-disk format for table slices now supports versioning of table slice encodings. This breaking change makes it so that adding further encodings or adding new versions of existing encodings is possible without breaking again in the future. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1143](https://github.com/tenzir/tenzir/pull/1143). #### Generalize splunk-to-vast [Section titled “Generalize splunk-to-vast”](#generalize-splunk-to-vast) The `splunk-to-vast` script has a new name: `taxonomize`. The script now also generates taxonomy declarations for Azure Sentinel. By [@mavam](https://github.com/mavam) in [#1134](https://github.com/tenzir/tenzir/pull/1134). #### Remove port type [Section titled “Remove port type”](#remove-port-type) The `port` type is no longer a first-class type. The new way to represent transport-layer ports relies on `count` instead. In the schema, VAST ships with a new alias `type port = count` to keep existing schema definitions in tact. However, this is a breaking change because the on-disk format and Arrow data representation changed. Queries with `:port` type extractors no longer work. Similarly, the syntax `53/udp` no longer exists; use `count` syntax `53` instead. Since most `port` occurrences do not carry a known transport-layer type, and the type information exists typically in a separate field, removing `port` as native type streamlines the data model. By [@mavam](https://github.com/mavam) in [#1187](https://github.com/tenzir/tenzir/pull/1187). #### Remove Version FlatBuffers table [Section titled “Remove Version FlatBuffers table”](#remove-version-flatbuffers-table) Archive segments no longer include an additional, unnecessary version identifier. We took the opportunity to clean this up bundled with the other recent breaking changes. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1168](https://github.com/tenzir/tenzir/pull/1168). #### Remove CAF-encoded table slices [Section titled “Remove CAF-encoded table slices”](#remove-caf-encoded-table-slices) CAF-encoded table slices no longer exist. As such, the option `vast.import.batch-encoding` now only supports `arrow` and `msgpack` as arguments. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1142](https://github.com/tenzir/tenzir/pull/1142). #### Increase the default segment size to 1 GiB [Section titled “Increase the default segment size to 1 GiB”](#increase-the-default-segment-size-to-1-gib) The default segment size in the archive is now 1 GiB. This reduces fragmentation of the archive meta data and speeds up VAST startup time. By [@mavam](https://github.com/mavam) in [#1166](https://github.com/tenzir/tenzir/pull/1166). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Reply to status requests in sinks [Section titled “Reply to status requests in sinks”](#reply-to-status-requests-in-sinks) The output of `vast status --detailed` now contains informations about runnings sinks, e.g., `vast export <format> <query>` processes. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1155](https://github.com/tenzir/tenzir/pull/1155). #### Send correct message to index when dropping further results [Section titled “Send correct message to index when dropping further results”](#send-correct-message-to-index-when-dropping-further-results) The index now correctly drops further results when queries finish early, thus improving the performance of queries for a limited number of events. By [@lava](https://github.com/lava) in [#1209](https://github.com/tenzir/tenzir/pull/1209). #### Error when specified config file does not exist [Section titled “Error when specified config file does not exist”](#error-when-specified-config-file-does-not-exist) VAST no longer starts if the specified config file does not exist. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1147](https://github.com/tenzir/tenzir/pull/1147). #### Introduce the #field meta extractor [Section titled “Introduce the #field meta extractor”](#introduce-the-field-meta-extractor-1) The summary log message of `vast export` now contains the correct number of candidate events. By [@tobim](https://github.com/tobim) in [#1228](https://github.com/tenzir/tenzir/pull/1228). #### Fix index worker depletion [Section titled “Fix index worker depletion”](#fix-index-worker-depletion) The index no longer causes exporters to deadlock when the meta index produces false positives. By [@tobim](https://github.com/tobim) in [#1225](https://github.com/tenzir/tenzir/pull/1225). #### Fix YAML syntax errors in example config [Section titled “Fix YAML syntax errors in example config”](#fix-yaml-syntax-errors-in-example-config) The `vast.yaml.example` contained syntax errors. The example config file now works again. By [@mavam](https://github.com/mavam) in [#1145](https://github.com/tenzir/tenzir/pull/1145). #### Fix loading and dumping of composed concepts [Section titled “Fix loading and dumping of composed concepts”](#fix-loading-and-dumping-of-composed-concepts) Concepts that reference other concepts are now loaded correctly from their definition. By [@tobim](https://github.com/tobim) in [#1236](https://github.com/tenzir/tenzir/pull/1236). #### Detect and handle breaking changes in schemas [Section titled “Detect and handle breaking changes in schemas”](#detect-and-handle-breaking-changes-in-schemas) The type registry now detects and handles breaking changes in schemas, e.g., when a field type changes or a field is dropped from record. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1195](https://github.com/tenzir/tenzir/pull/1195). #### Fix a hang when trying to process an invalid query [Section titled “Fix a hang when trying to process an invalid query”](#fix-a-hang-when-trying-to-process-an-invalid-query) VAST no longer blocks when an invalid query operation is issued. By [@tobim](https://github.com/tobim) in [#1189](https://github.com/tenzir/tenzir/pull/1189). #### Fix a bug that causes sources to stall [Section titled “Fix a bug that causes sources to stall”](#fix-a-bug-that-causes-sources-to-stall) `vast import` no longer stalls when it doesn’t receive any data for more than 10 seconds. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1136](https://github.com/tenzir/tenzir/pull/1136). #### Don’t collect status from sources and sinks [Section titled “Don’t collect status from sources and sinks”](#dont-collect-status-from-sources-and-sinks) The `vast status` command does not collect status information from sources and sinks any longer. They were often too busy to respond, leading to a long delay before the command completed. By [@tobim](https://github.com/tobim) in [#1234](https://github.com/tenzir/tenzir/pull/1234). #### Switch index behavior when running out of workers [Section titled “Switch index behavior when running out of workers”](#switch-index-behavior-when-running-out-of-workers) The index no longer crashes when too many parallel queries are running. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1210](https://github.com/tenzir/tenzir/pull/1210).

# VAST 2021.01.28

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2021.01.28). ### Features [Section titled “Features”](#features) #### Add the import zeek-json command [Section titled “Add the import zeek-json command”](#add-the-import-zeek-json-command) The new `import zeek-json` command allows for importing line-delimited Zeek JSON logs as produced by the [json-streaming-logs](https://github.com/corelight/json-streaming-logs) package. Unlike stock Zeek JSON logs, where one file contains exactly one log type, the streaming format contains different log event types in a single stream and uses an additional `_path` field to disambiguate the log type. For stock Zeek JSON logs, use the existing `import json` with the `-t` flag to specify the log type. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1259](https://github.com/tenzir/tenzir/pull/1259). #### Add per partition memory usage information to vast status [Section titled “Add per partition memory usage information to vast status”](#add-per-partition-memory-usage-information-to-vast-status) The output of `vast status` contains detailed memory usage information about active and cached partitions. By [@tobim](https://github.com/tobim) in [#1297](https://github.com/tenzir/tenzir/pull/1297). #### PRs 1230-1246-1281-1314-1315-ngrodzitski [Section titled “PRs 1230-1246-1281-1314-1315-ngrodzitski”](#prs-1230-1246-1281-1314-1315-ngrodzitski) VAST relies on [simdjson](https://github.com/simdjson/simdjson) for JSON parsing. The substantial gains in throughput shift the bottleneck of the ingest path from parsing input to indexing at the node. To use the (yet experimental) feature, use `vast import json|suricata|zeek-json --simdjson`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1230](https://github.com/tenzir/tenzir/pull/1230). #### Make duration units abbreviations consistent [Section titled “Make duration units abbreviations consistent”](#make-duration-units-abbreviations-consistent) VAST queries also accept `nanoseconds`, `microseconds`, `milliseconds` `seconds` and `minutes` as units for a duration. By [@rolandpeelen](https://github.com/rolandpeelen) in [#1265](https://github.com/tenzir/tenzir/pull/1265). #### Add third-party licenses for embedded dependencies [Section titled “Add third-party licenses for embedded dependencies”](#add-third-party-licenses-for-embedded-dependencies) VAST installations bundle a LICENSE.3rdparty file alongside the regular LICENSE file that lists all embedded code that is under a separate license. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1306](https://github.com/tenzir/tenzir/pull/1306). #### PRs 1208-1264-1275-1282-1285-1287-1302-1307-1316 [Section titled “PRs 1208-1264-1275-1282-1285-1287-1302-1307-1316”](#prs-1208-1264-1275-1282-1285-1287-1302-1307-1316) VAST features a new plugin framework to support efficient customization points at various places of the data processing pipeline. There exist several base classes that define an interface, e.g., for adding new commands or spawning a new actor that processes the incoming stream of data. The directory `examples/plugins/example` contains an example plugin. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1208](https://github.com/tenzir/tenzir/pull/1208). ### Changes [Section titled “Changes”](#changes) #### Consolidate Dockerfiles [Section titled “Consolidate Dockerfiles”](#consolidate-dockerfiles) The GitHub CI changed to Debian Buster and produces Debian artifacts instead of Ubuntu artifacts. Similarly, the Docker images we provide on [Docker Hub](https://hub.docker.com/r/tenzir/vast) use Debian Buster as base image. To build Docker images locally, users must set `DOCKER_BUILDKIT=1` in the build environment. By [@0snap](https://github.com/0snap) in [#1294](https://github.com/tenzir/tenzir/pull/1294). #### Rename `*-paths` to `*-dirs` options [Section titled “Rename \*-paths to \*-dirs options”](#rename--paths-to--dirs-options) The option `vast.schema-paths` is renamed to `vast.schema-dirs`. The old option is deprecated and will be removed in a future release. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1287](https://github.com/tenzir/tenzir/pull/1287). #### Support -v, -vv, -vvv, -q, -qq, -qqq for verbosity [Section titled “Support -v, -vv, -vvv, -q, -qq, -qqq for verbosity”](#support--v--vv--vvv--q--qq--qqq-for-verbosity) The new short options `-v`, `-vv`, `-vvv`, `-q`, `-qq`, and `-qqq` map onto the existing verbosity levels. The existing short syntax, e.g., `-v debug`, no longer works. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1244](https://github.com/tenzir/tenzir/pull/1244). #### PRs 1257-1289 [Section titled “PRs 1257-1289”](#prs-1257-1289) VAST preserves nested JSON objects in events instead of formatting them in a flattened form when exporting data with `vast export json`. The old behavior can be enabled with `vast export json --flatten`. By [@tobim](https://github.com/tobim) in [#1257](https://github.com/tenzir/tenzir/pull/1257). #### Make the start command print the endpoint on stdout [Section titled “Make the start command print the endpoint on stdout”](#make-the-start-command-print-the-endpoint-on-stdout) `vast start` prints the endpoint it is listening on when providing the option `--print-endpoint`. By [@tobim](https://github.com/tobim) in [#1271](https://github.com/tenzir/tenzir/pull/1271). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Handle Arrow decoder errors gracefully [Section titled “Handle Arrow decoder errors gracefully”](#handle-arrow-decoder-errors-gracefully) Invalid Arrow table slices read from disk no longer trigger a segmentation fault. Instead, the invalid on-disk state is ignored. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1247](https://github.com/tenzir/tenzir/pull/1247). #### Check that disk budget was not specified as non-string [Section titled “Check that disk budget was not specified as non-string”](#check-that-disk-budget-was-not-specified-as-non-string) Disk monitor quota settings not ending in a ‘B’ are no longer silently discarded. By [@lava](https://github.com/lava) in [#1278](https://github.com/tenzir/tenzir/pull/1278). #### Follow up for the CMake refactoring [Section titled “Follow up for the CMake refactoring”](#follow-up-for-the-cmake-refactoring) For relocatable installations, the list of schema loading paths does not include a build-time configured path any more. By [@tobim](https://github.com/tobim) in [#1249](https://github.com/tenzir/tenzir/pull/1249). #### Gracefully deal with JSON to data conversion errors [Section titled “Gracefully deal with JSON to data conversion errors”](#gracefully-deal-with-json-to-data-conversion-errors) Values in JSON fields that can’t be converted to the type that is specified in the schema won’t cause the containing event to be dropped any longer. By [@tobim](https://github.com/tobim) in [#1250](https://github.com/tenzir/tenzir/pull/1250). #### Remove check whether config file is a regular file [Section titled “Remove check whether config file is a regular file”](#remove-check-whether-config-file-is-a-regular-file) Manually specified configuration files may reside in the default location directories. Configuration files can be symlinked. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1248](https://github.com/tenzir/tenzir/pull/1248). #### Fix potential race condition between evaluator and partition [Section titled “Fix potential race condition between evaluator and partition”](#fix-potential-race-condition-between-evaluator-and-partition) A potential race condition that could lead to a hanging export if a partition was persisted just as it was scanned no longer exists. By [@lava](https://github.com/lava) in [#1295](https://github.com/tenzir/tenzir/pull/1295). #### Don’t overwrite line content after a read timeout [Section titled “Don’t overwrite line content after a read timeout”](#dont-overwrite-line-content-after-a-read-timeout) Line based imports correctly handle read timeouts that occur in the middle of a line. By [@tobim](https://github.com/tobim) in [#1276](https://github.com/tenzir/tenzir/pull/1276).

# VAST 2021.02.24

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2021.02.24). ### Features [Section titled “Features”](#features) #### PRs 1330-1376 [Section titled “PRs 1330-1376”](#prs-1330-1376) The meta index now stores partition synopses in separate files. This will decrease restart times for systems with large databases, slow disks and aggressive `readahead` settings. A new config setting `vast.meta-index-dir` allows storing the meta index information in a separate directory. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1330](https://github.com/tenzir/tenzir/pull/1330). #### Enable real-time metrics reporting [Section titled “Enable real-time metrics reporting”](#enable-real-time-metrics-reporting) The new options `vast.metrics.file-sink.real-time` and `vast.metrics.uds-sink.real-time` enable real-time metrics reporting for the file sink and UDS sink respectively. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1368](https://github.com/tenzir/tenzir/pull/1368). #### PRs 1343-1356-ngrodzitski [Section titled “PRs 1343-1356-ngrodzitski”](#prs-1343-1356-ngrodzitski) The JSON import now always relies upon [simdjson](https://simdjson.org). The previously experimental `--simdjson` option to the `vast import json|suricata|zeek-json` commands no longer exist as the feature is considered stable. By [@ngrodzitski](https://github.com/ngrodzitski) in [#1343](https://github.com/tenzir/tenzir/pull/1343). #### PRs 1223-1362 [Section titled “PRs 1223-1362”](#prs-1223-1362) VAST rotates server logs by default. The new config options `vast.disable-log-rotation` and `vast.log-rotation-threshold` can be used to control this behaviour. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1223](https://github.com/tenzir/tenzir/pull/1223). #### Enable type extractors to support user defined types [Section titled “Enable type extractors to support user defined types”](#enable-type-extractors-to-support-user-defined-types) The type extractor in the expression language now works with user defined types. For example the type `port` is defined as `type port = count` in the base schema. This type can now be queried with an expression like `:port == 80`. By [@tobim](https://github.com/tobim) in [#1382](https://github.com/tenzir/tenzir/pull/1382). #### Add native Sigma support [Section titled “Add native Sigma support”](#add-native-sigma-support) [Sigma](https://github.com/Neo23x0/sigma) rules are now a valid format to represent query expression. VAST parses the `detection` attribute of a rule and translates it into a native query expression. To run a query using a Sigma rule, pass it on standard input, e.g., `vast export json < rule.yaml`. By [@mavam](https://github.com/mavam) in [#1379](https://github.com/tenzir/tenzir/pull/1379). ### Changes [Section titled “Changes”](#changes) #### Render help and documentation on stdout [Section titled “Render help and documentation on stdout”](#render-help-and-documentation-on-stdout) The output of `vast help` and `vast documentation` now goes to *stdout* instead of to stderr. Erroneous invocations of `vast` also print the helptext, but in this case the output still goes to stderr to avoid interference with downstream tooling. By [@mavam](https://github.com/mavam) in [#1385](https://github.com/tenzir/tenzir/pull/1385). #### PRs 1343-1356-ngrodzitski [Section titled “PRs 1343-1356-ngrodzitski”](#prs-1343-1356-ngrodzitski-1) The `infer` command has an improved heuristic for the number types `int`, `count`, and `real`. By [@ngrodzitski](https://github.com/ngrodzitski) in [#1343](https://github.com/tenzir/tenzir/pull/1343). #### Enable real-time metrics reporting [Section titled “Enable real-time metrics reporting”](#enable-real-time-metrics-reporting-1) All options in `vast.metrics.*` had underscores in their names replaced with dashes to align with other options. For example, `vast.metrics.file_sink` is now `vast.metrics.file-sink`. The old options no longer work. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1368](https://github.com/tenzir/tenzir/pull/1368). #### PRs 1223-1328-1334-1390-a4z [Section titled “PRs 1223-1328-1334-1390-a4z”](#prs-1223-1328-1334-1390-a4z) VAST switched to [spdlog >= 1.5.0](https://github.com/gabime/spdlog) for logging. For users, this means: The `vast.console-format` and `vast.file-format` now must be specified using the spdlog pattern syntax as described [here](https://github.com/gabime/spdlog/wiki/3.-Custom-formatting#pattern-flags). All settings under `caf.logger.*` are now ignored by VAST, and only the `vast.*` counterparts are used for logger configuration. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1223](https://github.com/tenzir/tenzir/pull/1223). #### Move options from format to the import subcommand [Section titled “Move options from format to the import subcommand”](#move-options-from-format-to-the-import-subcommand) The options `listen`, `read`, `schema`, `schema-file`, `type`, and `uds` can from now on be supplied to the `import` command directly. Similarly, the options `write` and `uds` can be supplied to the `export` command. All options can still be used after the format subcommand, but that usage is deprecated. By [@tobim](https://github.com/tobim) in [#1354](https://github.com/tenzir/tenzir/pull/1354). #### Expand subnet value predicates [Section titled “Expand subnet value predicates”](#expand-subnet-value-predicates) The query normalizer interprets value predicates of type `subnet` more broadly: given a subnet `S`, the parser expands this to the expression `:subnet == S || :addr in S`. This change makes it easier to search for IP addresses belonging to a specific subnet. By [@mavam](https://github.com/mavam) in [#1373](https://github.com/tenzir/tenzir/pull/1373). #### Read user-supplied schema files from config dirs [Section titled “Read user-supplied schema files from config dirs”](#read-user-supplied-schema-files-from-config-dirs) User-supplied schema files are now picked up from `<SYSCONFDIR>/vast/schema` and `<XDG_CONFIG_HOME>/vast/schema` instead of `<XDG_DATA_HOME>/vast/schema`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1372](https://github.com/tenzir/tenzir/pull/1372). #### Remove long-deprecated code [Section titled “Remove long-deprecated code”](#remove-long-deprecated-code) The previously deprecated options `vast.spawn.importer.ids` and `vast.schema-paths` no longer work. Furthermore, queries spread over multiple arguments are now disallowed instead of triggering a deprecation warning. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1374](https://github.com/tenzir/tenzir/pull/1374). #### Require fmt to be installed separately from spdlog [Section titled “Require fmt to be installed separately from spdlog”](#require-fmt-to-be-installed-separately-from-spdlog) VAST now requires [fmt >= 5.2.1](https://fmt.dev) to be installed. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1330](https://github.com/tenzir/tenzir/pull/1330). #### Introduce and make use of the timestamp type [Section titled “Introduce and make use of the timestamp type”](#introduce-and-make-use-of-the-timestamp-type) The special meaning of the `#timestamp` attribute has been removed from the schema language. Timestamps can from now on be marked as such by using the `timestamp` type instead. Queries of the form `#timestamp <op> value` remain operational but are deprecated in favor of `:timestamp`. Note that this change also affects `:time` queries, which aren’t supersets of `#timestamp` queries any longer. By [@tobim](https://github.com/tobim) in [#1388](https://github.com/tenzir/tenzir/pull/1388). #### Make it easier to reference user defined types in the schema language [Section titled “Make it easier to reference user defined types in the schema language”](#make-it-easier-to-reference-user-defined-types-in-the-schema-language) Schema parsing now uses a 2-pass loading phase so that type aliases can reference other types that are later defined in the same directory. Additionally, type definitions from already parsed schema dirs can be referenced from schema types that are parsed later. Types can also be redefined in later directories, but a type can not be defined twice in the same directory. By [@tobim](https://github.com/tobim) in [#1331](https://github.com/tenzir/tenzir/pull/1331). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Revert “Fix potential race condition between evaluator and partition” [Section titled “Revert “Fix potential race condition between evaluator and partition””](#revert-fix-potential-race-condition-between-evaluator-and-partition) An ordering issue introduced in [#1295](https://github.com/tenzir/vast/pull/1295) that could lead to a segfault with long-running queries was reverted. By [@lava](https://github.com/lava) in [#1381](https://github.com/tenzir/tenzir/pull/1381). #### Let the JSON reader recover from unexpected inputs [Section titled “Let the JSON reader recover from unexpected inputs”](#let-the-json-reader-recover-from-unexpected-inputs) A bug in the new simdjson based JSON reader introduced in [#1356](https://github.com/tenzir/vast/pull/1356) could trigger an assertion in the `vast import` process if an input field could not be converted to the field type in the target layout. This is no longer the case. By [@tobim](https://github.com/tobim) in [#1386](https://github.com/tenzir/tenzir/pull/1386).

# VAST 2021.03.25

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2021.03.25). ### Features [Section titled “Features”](#features) #### PRs 1407-1487-1490 [Section titled “PRs 1407-1487-1490”](#prs-1407-1487-1490) The schema language now supports 4 operations on record types: `+` combines the fields of 2 records into a new record. `<+` and `+>` are variations of `+` that give precedence to the left and right operand respectively. `-` creates a record with the field specified as its right operand removed. By [@tobim](https://github.com/tobim) in [#1407](https://github.com/tenzir/tenzir/pull/1407). #### Support nested records in the Arrow Builder [Section titled “Support nested records in the Arrow Builder”](#support-nested-records-in-the-arrow-builder) VAST now supports nested records in Arrow table slices and in the JSON import, e.g., data of type `list<record<name: string, age: count>`. While nested record fields are not yet queryable, ingesting such data will no longer cause VAST to crash. MessagePack table slices don’t support records in lists yet. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1429](https://github.com/tenzir/tenzir/pull/1429). ### Changes [Section titled “Changes”](#changes) #### Move zeek-to-vast from tenzir/vast to tenzir/zeek-vast [Section titled “Move zeek-to-vast from tenzir/vast to tenzir/zeek-vast”](#move-zeek-to-vast-from-tenzirvast-to-tenzirzeek-vast) The zeek-to-vast utility was moved to the [tenzir/zeek-vast](https://github.com/tenzir/zeek-vast) repository. All options related to zeek-to-vast and the bundled Broker submodule were removed. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1435](https://github.com/tenzir/tenzir/pull/1435). #### PRs 1408-satta [Section titled “PRs 1408-satta”](#prs-1408-satta) VAST now ships with schema record types for Suricata’s `mqtt` and `anomaly` event types. By [@satta](https://github.com/satta) in [#1408](https://github.com/tenzir/tenzir/pull/1408). #### Deprecate the vast.no-default-schema option [Section titled “Deprecate the vast.no-default-schema option”](#deprecate-the-vastno-default-schema-option) The option `vast.no-default-schema` is deprecated, as it is no longer needed to override types from bundled schemas. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1409](https://github.com/tenzir/tenzir/pull/1409). #### PRs 1445-1452 [Section titled “PRs 1445-1452”](#prs-1445-1452) Plugins can now be linked statically against VAST. A new `VASTRegisterPlugin` CMake function enables easy setup of the build scaffolding required for plugins. Configure with `--with-static-plugins` or build a static binary to link all plugins built alongside VAST statically. All plugin build scaffoldings must be adapted, older plugins do no longer work. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1445](https://github.com/tenzir/tenzir/pull/1445). #### Rename the attribute\_extractor to meta\_extractor [Section titled “Rename the attribute\_extractor to meta\_extractor”](#rename-the-attribute_extractor-to-meta_extractor) The previously deprecated `#timestamp` extractor has been removed from the query language entirely. Use `:timestamp` instead. By [@tobim](https://github.com/tobim) in [#1399](https://github.com/tenzir/tenzir/pull/1399). #### Establish subtyping relationships for type extractors [Section titled “Establish subtyping relationships for type extractors”](#establish-subtyping-relationships-for-type-extractors) The type extractor in the expression language now works with type aliases. For example, given the type definition for port from the base schema `type port = count`, a search for `:count` will also consider fields of type `port`. By [@tobim](https://github.com/tobim) in [#1446](https://github.com/tenzir/tenzir/pull/1446). #### Change the default batch size to 1024 [Section titled “Change the default batch size to 1024”](#change-the-default-batch-size-to-1024) The default size of table slices (event batches) that is created from `vast import` processes has been changed from 1,000 to 1,024. By [@tobim](https://github.com/tobim) in [#1396](https://github.com/tenzir/tenzir/pull/1396). #### Prune expressions for the meta index lookup [Section titled “Prune expressions for the meta index lookup”](#prune-expressions-for-the-meta-index-lookup) Query latency for expressions that contain concept names has improved substantially. For DB sizes in the TB region, and with a large variety of event types, queries with a high selectivity experience speedups of up to 5x. By [@tobim](https://github.com/tobim) in [#1433](https://github.com/tenzir/tenzir/pull/1433). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Remove erased partitions from the meta index [Section titled “Remove erased partitions from the meta index”](#remove-erased-partitions-from-the-meta-index) The disk monitor now correctly erases partition synopses from the meta index. By [@lava](https://github.com/lava) in [#1450](https://github.com/tenzir/tenzir/pull/1450). #### Fix printing of non-null intrusive pointers [Section titled “Fix printing of non-null intrusive pointers”](#fix-printing-of-non-null-intrusive-pointers) Some non-null pointers were incorrectly rendered as `*nullptr` in log messages. By [@lava](https://github.com/lava) in [#1430](https://github.com/tenzir/tenzir/pull/1430). #### Don’t allow field extractors to match field name suffixes [Section titled “Don’t allow field extractors to match field name suffixes”](#dont-allow-field-extractors-to-match-field-name-suffixes) A query for a field or field name suffix that matches multiple fields of different types would erroneously return no results. By [@lava](https://github.com/lava) in [#1447](https://github.com/tenzir/tenzir/pull/1447). #### Fix possibly unhandled exception in disk monitor [Section titled “Fix possibly unhandled exception in disk monitor”](#fix-possibly-unhandled-exception-in-disk-monitor) VAST no longer crashes when the disk monitor tries to calculate the size of the database while files are being deleted. Instead, it will retry after the configured scan interval. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1458](https://github.com/tenzir/tenzir/pull/1458). #### Make the disk-monitor a singleton component [Section titled “Make the disk-monitor a singleton component”](#make-the-disk-monitor-a-singleton-component) Enabling the disk budget feature no longer prevents the server process from exiting after it was stopped. By [@tobim](https://github.com/tobim) in [#1495](https://github.com/tenzir/tenzir/pull/1495). #### Use non-throwing std::filesystem functions in the type registry [Section titled “Use non-throwing std::filesystem functions in the type registry”](#use-non-throwing-stdfilesystem-functions-in-the-type-registry) Insufficient permissions for one of the paths in the `schema-dirs` option would lead to a crash in `vast start`. By [@tobim](https://github.com/tobim) in [#1472](https://github.com/tenzir/tenzir/pull/1472). #### PRs 1473-1485 [Section titled “PRs 1473-1485”](#prs-1473-1485) A race condition during server shutdown could lead to an invariant violation, resulting in a firing assertion. Streamlining the shutdown logic resolved the issue. By [@mavam](https://github.com/mavam) in [#1473](https://github.com/tenzir/tenzir/pull/1473). #### Report metrics while idle [Section titled “Report metrics while idle”](#report-metrics-while-idle) The archive, index, source, and sink components now report metrics when idle instead of omitting them entirely. This allows for distinguishing between idle and not running components from the metrics. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1451](https://github.com/tenzir/tenzir/pull/1451). #### Fix :timestamp queries for old data [Section titled “Fix :timestamp queries for old data”](#fix-timestamp-queries-for-old-data) Data that was ingested before the deprecation of the `#timestamp` attribute wasn’t exported correctly with newer versions. This is now corrected. By [@tobim](https://github.com/tobim) in [#1432](https://github.com/tenzir/tenzir/pull/1432). #### Accept numbers in place of strings in JSON [Section titled “Accept numbers in place of strings in JSON”](#accept-numbers-in-place-of-strings-in-json) The JSON parser now accepts data with numerical or boolean values in fields that expect strings according to the schema. VAST converts these values into string representations. By [@tobim](https://github.com/tobim) in [#1439](https://github.com/tenzir/tenzir/pull/1439).

# VAST 2021.04.29

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2021.04.29). ### Features [Section titled “Features”](#features) #### Move PCAP import/export into a plugin [Section titled “Move PCAP import/export into a plugin”](#move-pcap-importexport-into-a-plugin) *Reader Plugins* and *Writer Plugins* are a new family of plugins that add import/export formats. The previously optional PCAP format moved into a dedicated plugin. Configure with `--with-pcap-plugin` and add `pcap` to `vast.plugins` to enable the PCAP plugin. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1549](https://github.com/tenzir/tenzir/pull/1549). #### PRs 1532-1541 [Section titled “PRs 1532-1541”](#prs-1532-1541) The `VAST_PLUGIN_DIRS` and `VAST_SCHEMA_DIRS` environment variables allow for setting additional plugin and schema directories separated with `:` with higher precedence than other plugin and schema directories. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1532](https://github.com/tenzir/tenzir/pull/1532). #### Allow for building plugins separately from VAST [Section titled “Allow for building plugins separately from VAST”](#allow-for-building-plugins-separately-from-vast) It is now possible to build plugins against an installed VAST. This requires a slight adaptation to every plugin’s build scaffolding. The example plugin was updated accordingly. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1532](https://github.com/tenzir/tenzir/pull/1532). #### Add ‘—disk-budget-check-binary’ option to disk monitor [Section titled “Add ‘—disk-budget-check-binary’ option to disk monitor”](#add-disk-budget-check-binary-option-to-disk-monitor) The disk monitor gained a new `vast.start.disk-budget-check-binary` option that can be used to specify an external binary to determine the size of the database directory. This can be useful in cases where `stat()` does not give the correct answer, e.g. on compressed filesystems. By [@lava](https://github.com/lava) in [#1453](https://github.com/tenzir/tenzir/pull/1453). #### PRs 1544-1547-1588 [Section titled “PRs 1544-1547-1588”](#prs-1544-1547-1588) *Component Plugins* are a new category of plugins that execute code within the VAST server process. *Analyzer Plugins* are now a specialization of *Component Plugins*, and their API remains unchanged. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1544](https://github.com/tenzir/tenzir/pull/1544). ### Changes [Section titled “Changes”](#changes) #### Make the source a regular class [Section titled “Make the source a regular class”](#make-the-source-a-regular-class) The metrics for Suricata Eve JSON and Zeek Streaming JSON imports are now under the categories `suricata-reader` and `zeek-reader` respectively so they can be distinguished from the regular JSON import, which is still under `json-reader`. By [@tobim](https://github.com/tobim) in [#1498](https://github.com/tenzir/tenzir/pull/1498). #### Small fixes for projections [Section titled “Small fixes for projections”](#small-fixes-for-projections) The Suricata `dns` schema type now defines the `dns.grouped.A` field containing a list of all returned addresses. By [@tobim](https://github.com/tobim) in [#1531](https://github.com/tenzir/tenzir/pull/1531). #### Upstream Debian patches [Section titled “Upstream Debian patches”](#upstream-debian-patches) We upstreamed the Debian patches provided by [@satta](https://github.com/satta). VAST now prefers an installed `tsl-robin-map>=0.6.2` to the bundled one unless configured with `--with-bundled-robin-map`, and we provide a manpage for `lsvast` if `pandoc` is installed. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1515](https://github.com/tenzir/tenzir/pull/1515). #### Remove deprecated no-default-schema option [Section titled “Remove deprecated no-default-schema option”](#remove-deprecated-no-default-schema-option) The previously deprecated ([#1409](https://github.com/tenzir/vast/pull/1409)) option `vast.no-default-schema` no longer exists. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1507](https://github.com/tenzir/tenzir/pull/1507). #### Use individual files for changelog entries [Section titled “Use individual files for changelog entries”](#use-individual-files-for-changelog-entries) Building VAST now requires CMake >= 3.15. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1559](https://github.com/tenzir/tenzir/pull/1559). #### Align plugin and library output names [Section titled “Align plugin and library output names”](#align-plugin-and-library-output-names) Plugins configured via `vast.plugins` in the configuration file can now be specified using either the plugin name or the full path to the shared plugin library. We no longer allow omitting the extension from specified plugin files, and recommend using the plugin name as a more portable solution, e.g., `example` over `libexample` and `/path/to/libexample.so` over `/path/to/libexample`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1527](https://github.com/tenzir/tenzir/pull/1527). #### Prefix plugin library output names with vast-plugin- [Section titled “Prefix plugin library output names with vast-plugin-”](#prefix-plugin-library-output-names-with-vast-plugin) To avoid confusion between the PCAP plugin and libpcap, which both have a library file named `libpcap.so`, we now generally prefix the plugin library output names with `vast-plugin-`. E.g., The PCAP plugin library file is now named `libvast-plugin-pcap.so`. Plugins specified with a full path in the configuration under `vast.plugins` must be adapted accordingly. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1593](https://github.com/tenzir/tenzir/pull/1593). #### Make it possible to run VAST without user configs [Section titled “Make it possible to run VAST without user configs”](#make-it-possible-to-run-vast-without-user-configs) The new option `--disable-default-config-dirs` disables the loading of user and system configuration, schema, and plugin directories. We use this option internally when running integration tests. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1557](https://github.com/tenzir/tenzir/pull/1557). #### Update chat URL in README [Section titled “Update chat URL in README”](#update-chat-url-in-readme) The VAST community chat moved from Element to Gitter. Join us at [gitter.im/tenzir/vast](https://gitter.im/tenzir/vast) or via Matrix at `#tenzir_vast:gitter.im`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1591](https://github.com/tenzir/tenzir/pull/1591). #### PRs 1514-1574 [Section titled “PRs 1514-1574”](#prs-1514-1574) The `exporter.hits` metric has been removed. By [@tobim](https://github.com/tobim) in [#1514](https://github.com/tenzir/tenzir/pull/1514). #### PRs 1499-satta [Section titled “PRs 1499-satta”](#prs-1499-satta) VAST now ships with a schema record type for Suricata’s `rfb` event type. By [@satta](https://github.com/satta) in [#1499](https://github.com/tenzir/tenzir/pull/1499). #### Remove deprecated format-specific options [Section titled “Remove deprecated format-specific options”](#remove-deprecated-format-specific-options) The previously deprecated usage ([#1354](https://github.com/tenzir/vast/pull/1354)) of format-independent options after the format in commands is now no longer possible. This affects the options `listen`, `read`, `schema`, `schema-file`, `type`, and `uds` for import commands and the `write` and `uds` options for export commands. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1529](https://github.com/tenzir/tenzir/pull/1529). #### Factor common functionality in component plugin [Section titled “Factor common functionality in component plugin”](#factor-common-functionality-in-component-plugin) The status output of *Analyzer Plugins* moved from the `importer.analyzers` key into the top-level record. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1544](https://github.com/tenzir/tenzir/pull/1544). #### Move PCAP import/export into a plugin [Section titled “Move PCAP import/export into a plugin”](#move-pcap-importexport-into-a-plugin-1) Plugins must define a separate entrypoint in their build scaffolding using the argument `ENTRYPOINT` to the CMake function `VASTRegisterPlugin`. If only a single value is given to the argument `SOURCES`, it is interpreted as the `ENTRYPOINT` automatically. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1549](https://github.com/tenzir/tenzir/pull/1549). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Handle alias types properly for CSV [Section titled “Handle alias types properly for CSV”](#handle-alias-types-properly-for-csv) The CSV reader no longer crashes when encountering nested type aliases. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1534](https://github.com/tenzir/tenzir/pull/1534). #### Move PCAP import/export into a plugin [Section titled “Move PCAP import/export into a plugin”](#move-pcap-importexport-into-a-plugin-2) Plugin unit tests now correctly load and initialize their respective plugins. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1549](https://github.com/tenzir/tenzir/pull/1549). #### Fix start command detection for spdlog [Section titled “Fix start command detection for spdlog”](#fix-start-command-detection-for-spdlog) Custom commands from plugins ending in `start` no longer try to write to the server instead of the client log file. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1530](https://github.com/tenzir/tenzir/pull/1530). #### Ignore spaces before SI prefixes [Section titled “Ignore spaces before SI prefixes”](#ignore-spaces-before-si-prefixes) Spaces before SI prefixes in command line arguments and configuration options are now generally ignored, e.g., it is now possible to set the disk monitor budgets to `2 GiB` rather than `2GiB`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1590](https://github.com/tenzir/tenzir/pull/1590). #### Multiple node shutdown fixes [Section titled “Multiple node shutdown fixes”](#multiple-node-shutdown-fixes) The shutdown logic contained a bug that would make the node fail to terminate in case a plugin actor is registered at said node. A race condition in the shutdown logic that caused an assertion was fixed. By [@tobim](https://github.com/tobim) in [#1563](https://github.com/tenzir/tenzir/pull/1563). #### Fix exporter.selectivity for idle periods [Section titled “Fix exporter.selectivity for idle periods”](#fix-exporterselectivity-for-idle-periods) The `exporter.selectivity` metric is now 1.0 instead of NaN for idle periods. VAST no longer renders JSON numbers with non-finite numbers as `NaN`, `-NaN`, `inf`, or `-inf`, resulting in invalid JSON output. Instead, such numbers are now rendered as `null`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1574](https://github.com/tenzir/tenzir/pull/1574). #### Deduplicate plugin entrypoint in sources [Section titled “Deduplicate plugin entrypoint in sources”](#deduplicate-plugin-entrypoint-in-sources) We fixed a regression that made it impossible to build static binaries from outside of the repository root directory. The `VASTRegisterPlugin` CMake function now correctly removes the `ENTRYPOINT` from the given `SOURCES`, allowing for plugin developers to easily glob for sources again. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1573](https://github.com/tenzir/tenzir/pull/1573). #### Use proper full install dirs for system config [Section titled “Use proper full install dirs for system config”](#use-proper-full-install-dirs-for-system-config) Specifying relative `CMAKE_INSTALL_*DIR` in the build configuration no longer causes VAST not to pick up system-wide installed configuration files, schemas, and plugins. The configured install prefix is now used correctly. The defunct `VAST_SYSCONFDIR`, `VAST_DATADIR`, and `VAST_LIBDIR` CMake options no longer exist. Use a combination of `CMAKE_INSTALL_PREFIX` and `CMAKE_INSTALL_*DIR` instead. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1580](https://github.com/tenzir/tenzir/pull/1580). #### Fix building VAST within a shallow git tree [Section titled “Fix building VAST within a shallow git tree”](#fix-building-vast-within-a-shallow-git-tree) VAST now correctly builds within shallow clones of the repository. If the build system is unable to determine the correct version from `git-describe`, it now always falls back to the version of the last release. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1570](https://github.com/tenzir/tenzir/pull/1570). #### Avoid shutdown when config dirs are not readable [Section titled “Avoid shutdown when config dirs are not readable”](#avoid-shutdown-when-config-dirs-are-not-readable) VAST no longer refuses to start when any of the configuration file directories is unreadable, e.g., because VAST is running in a sandbox. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1533](https://github.com/tenzir/tenzir/pull/1533). #### Ignore static plugins when specified in config [Section titled “Ignore static plugins when specified in config”](#ignore-static-plugins-when-specified-in-config) VAST no longer erroneously tries to load explicitly specified plugins dynamically that are linked statically. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1528](https://github.com/tenzir/tenzir/pull/1528). #### Fix the timezone shift to UTC for ISO8601 dates [Section titled “Fix the timezone shift to UTC for ISO8601 dates”](#fix-the-timezone-shift-to-utc-for-iso8601-dates) A bug in the parsing of ISO8601 formatted dates that incorrectly adjusted the time to the UTC timezone has been fixed. By [@tobim](https://github.com/tobim) in [#1537](https://github.com/tenzir/tenzir/pull/1537). #### Allow for building plugins separately from VAST [Section titled “Allow for building plugins separately from VAST”](#allow-for-building-plugins-separately-from-vast-1) Linking against an installed VAST via CMake now correctly resolves VAST’s dependencies. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1532](https://github.com/tenzir/tenzir/pull/1532). #### Fix out-of-bounds access in command-line parser [Section titled “Fix out-of-bounds access in command-line parser”](#fix-out-of-bounds-access-in-command-line-parser) The command-line parser no longer crashes when encountering a flag with missing value in the last position of a command invocation. By [@lava](https://github.com/lava) in [#1536](https://github.com/tenzir/tenzir/pull/1536).

# VAST 2021.05.27

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2021.05.27). ### Features [Section titled “Features”](#features) #### Load plugin schemas after built-in schemas [Section titled “Load plugin schemas after built-in schemas”](#load-plugin-schemas-after-built-in-schemas) Plugin schemas are now installed to `<datadir>/vast/plugin/<plugin>/schema`, while VAST’s built-in schemas reside in `<datadir>/vast/schema`. The load order guarantees that plugins are able to reliably override the schemas bundled with VAST. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1608](https://github.com/tenzir/tenzir/pull/1608). #### Support optional numeric duration output for JSON [Section titled “Support optional numeric duration output for JSON”](#support-optional-numeric-duration-output-for-json) To enable easier post-processing, the new option `vast.export.json.numeric-durations` switches JSON output of `duration` types from human-readable strings (e.g., `"4.2m"`) to numeric (e.g., `252.15`) in fractional seconds. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1628](https://github.com/tenzir/tenzir/pull/1628). #### Add a timeout option to the export command [Section titled “Add a timeout option to the export command”](#add-a-timeout-option-to-the-export-command) The new option `vast export --timeout=<duration>` allows for setting a timeout for VAST queries. Cancelled exports result in a non-zero exit code. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1611](https://github.com/tenzir/tenzir/pull/1611). #### PRs 1517-1656 [Section titled “PRs 1517-1656”](#prs-1517-1656) The new *transforms* feature allows VAST to apply transformations to incoming and outgoing data. A transform consists of a sequence of steps that execute sequentially, e.g., to remove, overwrite, hash, encrypt data. A new plugin type makes it easy to write custom transforms. By [@lava](https://github.com/lava) in [#1517](https://github.com/tenzir/tenzir/pull/1517). #### Add step size to disk monitor [Section titled “Add step size to disk monitor”](#add-step-size-to-disk-monitor) The new setting `vast.disk-monitor-step-size` enables the disk monitor to remove *N* partitions at once before re-checking if the new size of the database directory is now small enough. This is useful when checking the size of a directory is an expensive operation itself, e.g., on compressed filesystems. By [@lava](https://github.com/lava) in [#1655](https://github.com/tenzir/tenzir/pull/1655). #### Print the remote-version in the status command [Section titled “Print the remote-version in the status command”](#print-the-remote-version-in-the-status-command) The `status` command now prints the VAST server version information under the `version` key. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1652](https://github.com/tenzir/tenzir/pull/1652). ### Changes [Section titled “Changes”](#changes) #### Don’t send dynamic type information to connecting sources [Section titled “Don’t send dynamic type information to connecting sources”](#dont-send-dynamic-type-information-to-connecting-sources) Schemas are no longer implicitly shared between sources, i.e., an `import` process importing data with a custom schema will no longer affect other sources started at a later point in time. Schemas known to the VAST server process are still available to all `import` processes. We do not expect this change to have a real-world impact, but it could break setups where some sources have been installed on hosts without their own schema files, the VAST server did not have up-to-date schema files, and other sources were (ab)used to provide the latest type information. By [@lava](https://github.com/lava) in [#1656](https://github.com/tenzir/tenzir/pull/1656). #### Deprecate builds without Apache Arrow [Section titled “Deprecate builds without Apache Arrow”](#deprecate-builds-without-apache-arrow) Building VAST without Apache Arrow via `-DVAST_ENABLE_ARROW=OFF` is now deprecated, and support for the option will be removed in a future release. As the Arrow ecosystem and libraries matured, we feel confident in making it a required dependency and plan to build upon it more in the future. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1682](https://github.com/tenzir/tenzir/pull/1682). #### Remove configure script [Section titled “Remove configure script”](#remove-configure-script) The `configure` script was removed. This was a custom script that mimicked the functionality of an autotools-based `configure` script by writing directly to the cmake cache. Instead, users now must use the `cmake` and/or `ccmake` binaries directly to configure VAST. By [@lava](https://github.com/lava) in [#1657](https://github.com/tenzir/tenzir/pull/1657). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Sort loaded plugins by name [Section titled “Sort loaded plugins by name”](#sort-loaded-plugins-by-name) VAST no longer erroneously warns about a version mismatch between client and server when their plugin load order differs. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1679](https://github.com/tenzir/tenzir/pull/1679). #### Print the remote-version in the status command [Section titled “Print the remote-version in the status command”](#print-the-remote-version-in-the-status-command-1) VAST no longer erroneously skips the version mismatch detection between client and server. The check now additionally compares running plugins. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1652](https://github.com/tenzir/tenzir/pull/1652). #### Error when initializing a plugin fails [Section titled “Error when initializing a plugin fails”](#error-when-initializing-a-plugin-fails) VAST now correctly refuses to run when loaded plugins fail their initialization, i.e., are in a state that cannot be reasoned about. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1618](https://github.com/tenzir/tenzir/pull/1618). #### Allow for running unit tests in parallel [Section titled “Allow for running unit tests in parallel”](#allow-for-running-unit-tests-in-parallel) Executing VAST’s unit test suite in parallel no longer fails. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1659](https://github.com/tenzir/tenzir/pull/1659). #### Fix install dirs wrt binary relocatability [Section titled “Fix install dirs wrt binary relocatability”](#fix-install-dirs-wrt-binary-relocatability) Non-relocatable VAST binaries no longer look for configuration, schemas, and plugins in directories relative to the binary location. Vice versa, relocatable VAST binaries no longer look for configuration, schemas, and plugins in their original install directory, and instead always use paths relative to their binary location. On macOS, we now always build relocatable binaries. Relocatable binaries now work correctly on systems where the libary install directory is `lib64` instead of `lib`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1624](https://github.com/tenzir/tenzir/pull/1624). #### Fix the datagram source [Section titled “Fix the datagram source”](#fix-the-datagram-source) A recent change caused imports over UDP not to forward its events to the VAST server process. Running `vast import -l :<port>/udp <format>` now works as expected again. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1622](https://github.com/tenzir/tenzir/pull/1622). #### Fix build without Arrow [Section titled “Fix build without Arrow”](#fix-build-without-arrow) VAST and transform plugins now build without Arrow support again. The `delete` transform step correctly deletes fields from the layout when running VAST with Arrow disabled. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1673](https://github.com/tenzir/tenzir/pull/1673).

# VAST 2021.06.24

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2021.06.24). ### Features [Section titled “Features”](#features) #### Add support for per-plugin configuration files [Section titled “Add support for per-plugin configuration files”](#add-support-for-per-plugin-configuration-files) Plugins load their respective configuration from `<configdir>/vast/plugin/<plugin-name>.yaml` in addition to the regular configuration file at `<configdir>/vast/vast.yaml`. The new plugin-specific file does not require putting configuration under the key `plugins.<plugin-name>`. This allows for deploying plugins without needing to touch the `<configdir>/vast/vast.yaml` configuration file. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1724](https://github.com/tenzir/tenzir/pull/1724). #### Optionally read environment variable for VAST endpoint [Section titled “Optionally read environment variable for VAST endpoint”](#optionally-read-environment-variable-for-vast-endpoint) It’s now possible to configure the VAST endpoint as an environment variable by setting `VAST_ENDPOINT`. This has higher precedence than setting `vast.endpoint` in configuration files, but lower precedence than passing `--endpoint=` on the command-line. By [@rolandpeelen](https://github.com/rolandpeelen) in [#1714](https://github.com/tenzir/tenzir/pull/1714). #### Rework the plugin loading logic [Section titled “Rework the plugin loading logic”](#rework-the-plugin-loading-logic) The options `vast.plugins` and `vast.plugin-dirs` may now be specified on the command line as well as the configuration. Use the options `--plugins` and `--plugin-dirs` respectively. Add the reserved plugin name `bundled` to `vast.plugins` to enable load all bundled plugins, i.e., static or dynamic plugins built alongside VAST, or use `--plugins=bundled` on the command line. The reserved plugin name `all` causes all bundled and external plugins to be loaded, i.e., all shared libraries matching `libvast-plugin-*` from the configured `vast.plugin-dirs`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1703](https://github.com/tenzir/tenzir/pull/1703). #### Add option for configurable post-start hooks [Section titled “Add option for configurable post-start hooks”](#add-option-for-configurable-post-start-hooks) The new option `vast.start.commands` allows for specifying an ordered list of VAST commands that run after successful startup. The effect is the same as first starting a node, and then using another VAST client to issue commands. This is useful for commands that have side effects that cannot be expressed through the config file, e.g., starting a source inside the VAST server that listens on a socket or reads packets from a network interface. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1699](https://github.com/tenzir/tenzir/pull/1699). ### Changes [Section titled “Changes”](#changes) #### Rework the plugin loading logic [Section titled “Rework the plugin loading logic”](#rework-the-plugin-loading-logic-1) VAST no longer loads static plugins by default. Generally, VAST now treats static plugins and bundled dynamic plugins equally, allowing users to enable or disable static plugins as needed for their deployments. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1703](https://github.com/tenzir/tenzir/pull/1703). #### PRs 1721-1734 [Section titled “PRs 1721-1734”](#prs-1721-1734) VAST merges lists from configuration files. E.g., running VAST with `--plugins=some-plugin` and `vast.plugins: [other-plugin]` in the configuration now results in both `some-plugin` and `other-plugin` being loaded (sorted by the usual precedence), instead of just `some-plugin`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1721](https://github.com/tenzir/tenzir/pull/1721). #### Change chat from Gitter to Slack [Section titled “Change chat from Gitter to Slack”](#change-chat-from-gitter-to-slack) The VAST community chat moved from Gitter to Slack. [Join us](http://slack.tenzir.com) in the `#vast` channel for vibrant discussions. By [@mavam](https://github.com/mavam) in [#1696](https://github.com/tenzir/tenzir/pull/1696). #### Remove support for building without Arrow [Section titled “Remove support for building without Arrow”](#remove-support-for-building-without-arrow) Apache Arrow is now a required dependency. The previously deprecated build option `-DVAST_ENABLE_ARROW=OFF` no longer exists. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1683](https://github.com/tenzir/tenzir/pull/1683). #### Fixup repository-internal symlinks in Dockerfile [Section titled “Fixup repository-internal symlinks in Dockerfile”](#fixup-repository-internal-symlinks-in-dockerfile) The [tenzir/vast](https://hub.docker.com/r/tenzir/vast) Docker image bundles the PCAP plugin. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1705](https://github.com/tenzir/tenzir/pull/1705). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix log rotation threshold option [Section titled “Fix log rotation threshold option”](#fix-log-rotation-threshold-option) The `vast.log-rotation-threshold` option was silently ignored, causing VAST to always use the default log rotation threshold of 10 MiB. The option works as expected now. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1709](https://github.com/tenzir/tenzir/pull/1709). #### Fix a bunch of smaller issues [Section titled “Fix a bunch of smaller issues”](#fix-a-bunch-of-smaller-issues) Building plugins against an installed VAST no longer requires manually specifying `-DBUILD_SHARED_LIBS=ON`. The option is now correctly enabled by default for external plugins. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1697](https://github.com/tenzir/tenzir/pull/1697). #### Remove dead condition and fix Docker release tags [Section titled “Remove dead condition and fix Docker release tags”](#remove-dead-condition-and-fix-docker-release-tags) Additional tags for the [tenzir/vast](https://hub.docker.com/r/tenzir/vast) Docker image for the release versions exist, e.g., `tenzir/vast:2021.05.27`. By [@0snap](https://github.com/0snap) in [#1711](https://github.com/tenzir/tenzir/pull/1711). #### Fix shutdown hang in sources on SIGTERM/SIGINT [Section titled “Fix shutdown hang in sources on SIGTERM/SIGINT”](#fix-shutdown-hang-in-sources-on-sigtermsigint) Import processes no longer hang on receiving SIGINT or SIGKILL. Instead, they shut down properly after flushing yet to be processed data. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1718](https://github.com/tenzir/tenzir/pull/1718). #### Make unix dgram metrics sink connectionless [Section titled “Make unix dgram metrics sink connectionless”](#make-unix-dgram-metrics-sink-connectionless) The UDS metrics sink continues to send data when the receiving socket is recreated. By [@tobim](https://github.com/tobim) in [#1702](https://github.com/tenzir/tenzir/pull/1702). #### Handle arbitrary types in bloom filter synopsis [Section titled “Handle arbitrary types in bloom filter synopsis”](#handle-arbitrary-types-in-bloom-filter-synopsis) VAST no longer crashes when querying for string fields with non-string values. Instead, an error message warns the user about an invalid query. By [@lava](https://github.com/lava) in [#1685](https://github.com/tenzir/tenzir/pull/1685). #### Handle quoted strings in CSV parser [Section titled “Handle quoted strings in CSV parser”](#handle-quoted-strings-in-csv-parser) The `import csv` command handles quoted fields correctly. Previously, the quotes were part of the parsed value, and field separators in quoted strings caused the parser to fail. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1712](https://github.com/tenzir/tenzir/pull/1712).

# VAST 2021.07.29

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2021.07.29). ### Features [Section titled “Features”](#features) #### Support import filter expressions [Section titled “Support import filter expressions”](#support-import-filter-expressions) VAST now supports import filter expressions. They act as the dual to export query expressions: `vast import suricata '#type == "suricata.alert"' < eve.json` will import only `suricata.alert` events, discarding all other events. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1742](https://github.com/tenzir/tenzir/pull/1742). #### Use a unique version for plugins [Section titled “Use a unique version for plugins”](#use-a-unique-version-for-plugins) Plugin versions are now unique to facilitate debugging. They consist of three optional parts: (1) the CMake project version of the plugin, (2) the Git revision of the last commit that touched the plugin, and (3) a `dirty` suffix for uncommited changes to the plugin. Plugin developers no longer need to specify the version manually in the plugin entrypoint. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1764](https://github.com/tenzir/tenzir/pull/1764). #### Add per-layout metrics to imports [Section titled “Add per-layout metrics to imports”](#add-per-layout-metrics-to-imports) VAST now exports per-layout import metrics under the key `<reader>.events.<layout-name>` in addition to the regular `<reader>.events`. This makes it easier to understand the event type distribution. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1781](https://github.com/tenzir/tenzir/pull/1781). #### Fix Docker image builds for arm64 [Section titled “Fix Docker image builds for arm64”](#fix-docker-image-builds-for-arm64) VAST now supports the *arm64* architecture. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1773](https://github.com/tenzir/tenzir/pull/1773). #### Enable Broker plugin by default for Nix [Section titled “Enable Broker plugin by default for Nix”](#enable-broker-plugin-by-default-for-nix) The static binary now bundles the Broker plugin. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1789](https://github.com/tenzir/tenzir/pull/1789). #### Publish a tenzir/vast-dev Docker image [Section titled “Publish a tenzir/vast-dev Docker image”](#publish-a-tenzirvast-dev-docker-image) VAST now comes with a [`tenzir/vast-dev`](https://hub.docker.com/r/tenzir/vast-dev) Docker image in addition to the regular [`tenzir/vast`](https://hub.docker.com/r/tenzir/vast). The `vast-dev` image targets development contexts, e.g., when building additional plugins. The image contains all build-time dependencies of VAST and runs as `root` rather than the `vast` user. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1749](https://github.com/tenzir/tenzir/pull/1749). #### Add Zeek Broker reader plugin [Section titled “Add Zeek Broker reader plugin”](#add-zeek-broker-reader-plugin) The new [Broker](https://github.com/zeek/broker) plugin enables seamless log ingestion from [Zeek](https://github.com/zeek/zeek) to VAST via a TCP socket. Broker is Zeek’s messaging library and the plugin turns VAST into a Zeek [logger node](https://docs.zeek.org/en/master/frameworks/cluster.html#logger). Use `vast import broker` to establish a connection to a Zeek node and acquire logs. By [@mavam](https://github.com/mavam) in [#1758](https://github.com/tenzir/tenzir/pull/1758). #### PRs 1720-1762-1802 [Section titled “PRs 1720-1762-1802”](#prs-1720-1762-1802) VAST has new a `store_plugin` type for custom store backends that hold the raw data of a partition. The new setting `vast.store-backend` controls the selection of the store implementation, which has a default value is `segment-store`. This is still an opt-in feature: unless the configuration value is set, VAST defaults to the old implementation. By [@lava](https://github.com/lava) in [#1720](https://github.com/tenzir/tenzir/pull/1720). #### Fix bug in bitmap offset computation [Section titled “Fix bug in bitmap offset computation”](#fix-bug-in-bitmap-offset-computation) `lsvast` now prints extended information for hash indexes. By [@lava](https://github.com/lava) in [#1755](https://github.com/tenzir/tenzir/pull/1755). #### Remove /etc as hardcoded sysconfdir from Nix build [Section titled “Remove /etc as hardcoded sysconfdir from Nix build”](#remove-etc-as-hardcoded-sysconfdir-from-nix-build) Installing VAST now includes a `vast.yaml.example` configuration file listing all available options. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1777](https://github.com/tenzir/tenzir/pull/1777). ### Changes [Section titled “Changes”](#changes) #### Compile with C++20 [Section titled “Compile with C++20”](#compile-with-c20) From now on VAST is compiled with the C++20 language standard. Minimum compiler versions have increased to GCC 10, Clang 11, and AppleClang 12.0.5. By [@tobim](https://github.com/tobim) in [#1768](https://github.com/tenzir/tenzir/pull/1768). #### Bump minimum Debian requirement to Bullseye [Section titled “Bump minimum Debian requirement to Bullseye”](#bump-minimum-debian-requirement-to-bullseye) VAST no longer officially supports Debian Buster with GCC-8. In CI, VAST now runs on Debian Bullseye with GCC-10. The provided Docker images now use `debian:bullseye-slim` as base image. Users that require Debian Buster support should use the provided static builds instead. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1765](https://github.com/tenzir/tenzir/pull/1765). #### Disable auto-vectorization in prebuilt Docker images [Section titled “Disable auto-vectorization in prebuilt Docker images”](#disable-auto-vectorization-in-prebuilt-docker-images) The `vast` binaries in our [prebuilt Docker images](http://hub.docker.com/r/tenzir/vast) no longer contain AVX instructions for increased portability. Building the image locally continues to add supported auto-vectorization flags automatically. The following new build options exist: `VAST_ENABLE_AUTO_VECTORIZATION` enables/disables all auto-vectorization flags, and `VAST_ENABLE_SSE_INSTRUCTIONS` enables `-msse`; similar options exist for SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, and AVX2. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1778](https://github.com/tenzir/tenzir/pull/1778). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Support unique plugin versions for Nix and Docker [Section titled “Support unique plugin versions for Nix and Docker”](#support-unique-plugin-versions-for-nix-and-docker) The official Docker image and static binary distribution of VAST now produce the correct version output for plugins from the `vast version` command. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1799](https://github.com/tenzir/tenzir/pull/1799). #### PRs 1804-1809 [Section titled “PRs 1804-1809”](#prs-1804-1809) The disk budget feature no longer triggers a rare segfault while deleting partitions. By [@tobim](https://github.com/tobim) in [#1804](https://github.com/tenzir/tenzir/pull/1804). #### Fix sorting of plugins by name [Section titled “Fix sorting of plugins by name”](#fix-sorting-of-plugins-by-name) A regression caused VAST’s plugins to be loaded in random order, which printed a warning about mismatching plugins between client and server. The order is now deterministic. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1756](https://github.com/tenzir/tenzir/pull/1756). #### Propagate VAST\_ENABLE\_JOURNALD\_LOGGING setting to config header [Section titled “Propagate VAST\_ENABLE\_JOURNALD\_LOGGING setting to config header”](#propagate-vast_enable_journald_logging-setting-to-config-header) The `VAST_ENABLE_JOURNALD_LOGGING` CMake option is no longer ignored. By [@lava](https://github.com/lava) in [#1780](https://github.com/tenzir/tenzir/pull/1780). #### Print the import transformer status [Section titled “Print the import transformer status”](#print-the-import-transformer-status) The the `status` command now prints information about input and output transformations. By [@tobim](https://github.com/tobim) in [#1748](https://github.com/tenzir/tenzir/pull/1748). #### Fix bug in bitmap offset computation [Section titled “Fix bug in bitmap offset computation”](#fix-bug-in-bitmap-offset-computation-1) Queries against fields using a `#index=hash` attribute could have missed some results. Fixing a bug in the offset calculation during bitmap processing resolved the issue. By [@lava](https://github.com/lava) in [#1755](https://github.com/tenzir/tenzir/pull/1755). #### Fix error message about /dev/null-backend on startup [Section titled “Fix error message about /dev/null-backend on startup”](#fix-error-message-about-devnull-backend-on-startup) A `[*** LOG ERROR #0001 ***]` error message on startup under Linux no longer occurs. By [@lava](https://github.com/lava) in [#1754](https://github.com/tenzir/tenzir/pull/1754). #### Make the source shutdown instantaneous [Section titled “Make the source shutdown instantaneous”](#make-the-source-shutdown-instantaneous) Import processes now respond quicker. Shutdown requests are no longer delayed when the server process has busy imports, and metrics reports are now written in a timely manner. Particularly busy imports caused the shutdown of the server process to hang, if import processes were still running or had not yet flushed all data. The server now shuts down correctly in these cases. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1771](https://github.com/tenzir/tenzir/pull/1771). #### Fix loading of the optional OpenSSL module [Section titled “Fix loading of the optional OpenSSL module”](#fix-loading-of-the-optional-openssl-module) Configuring VAST to use CAF’s built-in OpenSSL module via the `caf.openssl.*` options now works again as expected. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1740](https://github.com/tenzir/tenzir/pull/1740). #### Normalize GNUInstallDirs for external plugins [Section titled “Normalize GNUInstallDirs for external plugins”](#normalize-gnuinstalldirs-for-external-plugins) Plugins built against an external libvast no longer require the `CMAKE_INSTALL_LIBDIR` to be specified as a path relative to the configured `CMAKE_INSTALL_PREFIX`. This fixes an issue with plugins in separate packages for some package managers, e.g., Nix. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1786](https://github.com/tenzir/tenzir/pull/1786). #### Dont abort JSON import when encountering non-objects [Section titled “Dont abort JSON import when encountering non-objects”](#dont-abort-json-import-when-encountering-non-objects) VAST does not abort JSON imports anymore when encountering something other than a JSON object, e.g., a number or a string. Instead, VAST skips the offending line. By [@lava](https://github.com/lava) in [#1759](https://github.com/tenzir/tenzir/pull/1759). #### Remove /etc as hardcoded sysconfdir from Nix build [Section titled “Remove /etc as hardcoded sysconfdir from Nix build”](#remove-etc-as-hardcoded-sysconfdir-from-nix-build-1) The static binary no longer behaves differently than the regular build with regards to its configuration directories: system-wide configuration files now reside in `<prefix>/etc/vast/vast.yaml` rather than `/etc/vast/vast.yaml`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1777](https://github.com/tenzir/tenzir/pull/1777).

# VAST 2021.08.26

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2021.08.26). ### Features [Section titled “Features”](#features) #### Restore unique IDs for partition-local stores [Section titled “Restore unique IDs for partition-local stores”](#restore-unique-ids-for-partition-local-stores) The `segment-store` store backend works correctly with `vast get` and `vast explore`. By [@lava](https://github.com/lava) in [#1805](https://github.com/tenzir/tenzir/pull/1805). #### PRs 1819-1833 [Section titled “PRs 1819-1833”](#prs-1819-1833) VAST can now process Eve JSON events of type `suricata.packet` that Suricata emits when the config option `tagged-packets` is set and a rule tags a packet using, e.g., `tag:session,5,packets;`. By [@satta](https://github.com/satta) in [#1819](https://github.com/tenzir/tenzir/pull/1819). ### Changes [Section titled “Changes”](#changes) #### Support building against fmt 8.x [Section titled “Support building against fmt 8.x”](#support-building-against-fmt-8x) VAST now supports building against fmt 8 and spdlog 1.9.2, and now requires at least fmt 7.1.3. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1846](https://github.com/tenzir/tenzir/pull/1846). #### Keep layer-2 framing when reading PCAP payload [Section titled “Keep layer-2 framing when reading PCAP payload”](#keep-layer-2-framing-when-reading-pcap-payload) VAST no longer strips link-layer framing when ingesting PCAPs. The stored payload is the raw PCAP packet. Similarly, `vast export pcap` now includes a Ethernet link-layer framing, per libpcap’s `DLT_EN10MB` link type. By [@mavam](https://github.com/mavam) in [#1797](https://github.com/tenzir/tenzir/pull/1797). #### Improve rendering of error messages & fix record to map conversion [Section titled “Improve rendering of error messages & fix record to map conversion”](#improve-rendering-of-error-messages--fix-record-to-map-conversion) Strings in error or warning log messages are no longer escaped, greatly improving readability of messages containing nested error contexts. By [@tobim](https://github.com/tobim) in [#1842](https://github.com/tenzir/tenzir/pull/1842). #### Align suricata.dhcp with the latest eve.log schema [Section titled “Align suricata.dhcp with the latest eve.log schema”](#align-suricatadhcp-with-the-latest-evelog-schema) VAST now ships with an updated schema type for the `suricata.dhcp` event, covering all fields of the extended output. By [@tobim](https://github.com/tobim) in [#1854](https://github.com/tenzir/tenzir/pull/1854). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix logging in systemd when built without support [Section titled “Fix logging in systemd when built without support”](#fix-logging-in-systemd-when-built-without-support) VAST now only switches to journald style logging by default when it is actually supported. By [@tobim](https://github.com/tobim) in [#1857](https://github.com/tenzir/tenzir/pull/1857). #### Include in-process sources/sinks in status output [Section titled “Include in-process sources/sinks in status output”](#include-in-process-sourcessinks-in-status-output) The output of VAST status now includes status information for sources and sinks spawned in the VAST node, i.e., via `vast spawn source|sink <format>` rather than `vast import|export <format>`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1852](https://github.com/tenzir/tenzir/pull/1852). #### Print memory counts in bytes instead of kB [Section titled “Print memory counts in bytes instead of kB”](#print-memory-counts-in-bytes-instead-of-kb) The memory counts in the output of `vast status` now represent bytes consistently, as opposed to a mix of bytes and kilobytes. By [@tobim](https://github.com/tobim) in [#1862](https://github.com/tenzir/tenzir/pull/1862). #### Fix plugin versions in prebuilt Docker images [Section titled “Fix plugin versions in prebuilt Docker images”](#fix-plugin-versions-in-prebuilt-docker-images) Plugins in the prebuilt Docker images no longer show `unspecified` as their version. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1828](https://github.com/tenzir/tenzir/pull/1828). #### Use /etc as sysconfdir for install prefix /usr [Section titled “Use /etc as sysconfdir for install prefix /usr”](#use-etc-as-sysconfdir-for-install-prefix-usr) In order to align with the [GNU Coding Standards](https://www.gnu.org/prep/standards/html_node/Directory-Variables.html), the static binary (and other relocatable binaries) now uses `/etc` as sysconfdir for installations to `/usr/bin/vast`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1856](https://github.com/tenzir/tenzir/pull/1856). #### Add missing concepts for Suricata events [Section titled “Add missing concepts for Suricata events”](#add-missing-concepts-for-suricata-events) Previously missing fields of suricata event types are now part of the concept definitions of `net.src.ip`, `net.src.port`, `net.dst.ip`, `net.dst.port`, `net.app`, `net.proto`, `net.community_id`, `net.vlan`, and `net.packets`. By [@tobim](https://github.com/tobim) in [#1798](https://github.com/tenzir/tenzir/pull/1798). #### Support quoted non-string fields in the CSV parser [Section titled “Support quoted non-string fields in the CSV parser”](#support-quoted-non-string-fields-in-the-csv-parser) The CSV parser now correctly parses quoted fields in non-string types. E.g., `"127.0.0.1"` in CSV now successfully parsers when a matching schema contains an `address` type field. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1858](https://github.com/tenzir/tenzir/pull/1858). #### Gracefully handle malformed segments at startup [Section titled “Gracefully handle malformed segments at startup”](#gracefully-handle-malformed-segments-at-startup) Invalid segment files will no longer crash VAST at startup. By [@tobim](https://github.com/tobim) in [#1820](https://github.com/tenzir/tenzir/pull/1820). #### Support native plugins in the static binary [Section titled “Support native plugins in the static binary”](#support-native-plugins-in-the-static-binary) The `segment-store` store backend and built-in transform steps (`hash`, `replace`, and `delete`) now function correctly in static VAST binaries. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1850](https://github.com/tenzir/tenzir/pull/1850). #### Interpret metrics paths relative to the db root [Section titled “Interpret metrics paths relative to the db root”](#interpret-metrics-paths-relative-to-the-db-root) The configuration options `vast.metrics.{file,uds}-sink.path` now correctly specify paths relative to the database directory of VAST, rather than the current working directory of the VAST server. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1848](https://github.com/tenzir/tenzir/pull/1848).

# VAST 2021.09.30

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2021.09.30). ### Features [Section titled “Features”](#features) #### Let empty queries export everything [Section titled “Let empty queries export everything”](#let-empty-queries-export-everything) The query argument to the export and count commands may now be omitted, which causes the commands to operate on all data. Note that this may be a very expensive operation, so use with caution. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1879](https://github.com/tenzir/tenzir/pull/1879). #### Add Zeek writer plugin [Section titled “Add Zeek writer plugin”](#add-zeek-writer-plugin) The `broker` plugin is now a also *writer* plugin on top of being already a *reader* plugin. The new plugin enables exporting query results directly into a a Zeek process, e.g., to write Zeek scripts that incorporate context from the past. Run `vast export broker <expr>` to ship events via Broker that Zeek dispatches under the event `VAST::data(layout: string, data: any)`. By [@mavam](https://github.com/mavam) in [#1863](https://github.com/tenzir/tenzir/pull/1863). #### Add the streaming and query info to the index status [Section titled “Add the streaming and query info to the index status”](#add-the-streaming-and-query-info-to-the-index-status) The output of `vast status --detailed` now contains information about queries that are currently processed in the index. By [@tobim](https://github.com/tobim) in [#1881](https://github.com/tenzir/tenzir/pull/1881). #### Add tool to regenerate .mdx files [Section titled “Add tool to regenerate .mdx files”](#add-tool-to-regenerate-mdx-files) The new tool `mdx-regenerate` allows operators to re-create all `.mdx` files in a database directory to the latest file format version while VAST is running. This is useful for advanced users in preparation for version upgrades that bump the format version. By [@lava](https://github.com/lava) in [#1866](https://github.com/tenzir/tenzir/pull/1866). #### Bundle an example configuration file with plugins [Section titled “Bundle an example configuration file with plugins”](#bundle-an-example-configuration-file-with-plugins) If present in the plugin source directory, the build scaffolding now automatically installs `<plugin>.yaml.example` files, commenting out every line so the file has no effect. This serves as documentation for operators that can modify the installed file in-place. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1860](https://github.com/tenzir/tenzir/pull/1860). #### Show loaded config files in status output [Section titled “Show loaded config files in status output”](#show-loaded-config-files-in-status-output) Running `vat status --detailed` now lists all loaded configuration files under `system.config-files`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1871](https://github.com/tenzir/tenzir/pull/1871). ### Changes [Section titled “Changes”](#changes) #### Make partition-local stores the default [Section titled “Make partition-local stores the default”](#make-partition-local-stores-the-default) The default store backend now is `segment-store` in order to enable the use of partition transforms in the future. To continue using the (now deprecated) legacy store backend, set `vast.store-backend` to archive. By [@lava](https://github.com/lava) in [#1876](https://github.com/tenzir/tenzir/pull/1876). #### Install example configuration files to datarootdir [Section titled “Install example configuration files to datarootdir”](#install-example-configuration-files-to-datarootdir) Example configuration files are now installed to the datarootdir as opposed to the sysconfdir in order to avoid overriding previously installed configuration files. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1880](https://github.com/tenzir/tenzir/pull/1880). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix possible garbage in status command output [Section titled “Fix possible garbage in status command output”](#fix-possible-garbage-in-status-command-output) The status command no longer occasionally contains garbage keys when the VAST server is under high load. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1872](https://github.com/tenzir/tenzir/pull/1872). #### Fix response promises for disk monitor deletion [Section titled “Fix response promises for disk monitor deletion”](#fix-response-promises-for-disk-monitor-deletion) The disk monitor no longer fails to delete segments of particularly busy partitions with the `segment-store` store backend. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1892](https://github.com/tenzir/tenzir/pull/1892). #### Tailor expressions in filter operation [Section titled “Tailor expressions in filter operation”](#tailor-expressions-in-filter-operation) Import filter expressions now work correctly with queries using field extractors, e.g., `vast import suricata 'event_type == "alert"' < path/to/eve.json`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1885](https://github.com/tenzir/tenzir/pull/1885). #### Disallow unsupported field meta extractor predicates [Section titled “Disallow unsupported field meta extractor predicates”](#disallow-unsupported-field-meta-extractor-predicates) Expression predicates of the `#field` type now produce error messages instead of empty result sets for operations that are not supported. By [@tobim](https://github.com/tobim) in [#1886](https://github.com/tenzir/tenzir/pull/1886). #### Fix possible desync in pending queries map [Section titled “Fix possible desync in pending queries map”](#fix-possible-desync-in-pending-queries-map) The index now correctly cancels pending queries when the requester dies. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1884](https://github.com/tenzir/tenzir/pull/1884). #### Fix ignoring of remote sources and sinks for status [Section titled “Fix ignoring of remote sources and sinks for status”](#fix-ignoring-of-remote-sources-and-sinks-for-status) Remote sources and sinks are no longer erroneously included in the output of VAST status. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1873](https://github.com/tenzir/tenzir/pull/1873).

# VAST 2021.11.18

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2021.11.18). ### Features [Section titled “Features”](#features) #### PRs 1929-1947 [Section titled “PRs 1929-1947”](#prs-1929-1947) The export command now has a `--low-priority` option to reduce the priority of the request while query backlogs are being worked down. By [@tobim](https://github.com/tobim) in [#1929](https://github.com/tenzir/tenzir/pull/1929). #### Partition transforms [Section titled “Partition transforms”](#partition-transforms) A new ‘apply’ handler in the index gives plugin authors the ability to apply transforms over entire partitions. Previously, transforms were limited to streams of table slice during import or export. By [@lava](https://github.com/lava) in [#1887](https://github.com/tenzir/tenzir/pull/1887). #### Add metrics to the index [Section titled “Add metrics to the index”](#add-metrics-to-the-index) The keys `query.backlog.normal` and `query.backlog.low` have been added to the metrics output. The values indicate the number of quries that are currently in the backlog. By [@tobim](https://github.com/tobim) in [#1942](https://github.com/tenzir/tenzir/pull/1942). ### Changes [Section titled “Changes”](#changes) #### Introduce a query backlog in the index [Section titled “Introduce a query backlog in the index”](#introduce-a-query-backlog-in-the-index) The `max-queries` configuration option now works at a coarser granularity. It used to limit the number of queries that could simultaneously retrieve data, but it now sets the number of queries that can be processed at the same time. By [@tobim](https://github.com/tobim) in [#1896](https://github.com/tenzir/tenzir/pull/1896). #### Update xxHash and hashing APIs [Section titled “Update xxHash and hashing APIs”](#update-xxhash-and-hashing-apis) VAST no longer vendors [xxHash](https://github.com/Cyan4973/xxHash), which is now a regular required dependency. Internally, VAST switched its default hash function to XXH3, providing a speedup of up to 3x. By [@mavam](https://github.com/mavam) in [#1905](https://github.com/tenzir/tenzir/pull/1905). #### Bump minimum required CMake version to 3.18 [Section titled “Bump minimum required CMake version to 3.18”](#bump-minimum-required-cmake-version-to-318) Building VAST from source now requires CMake 3.18+. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1914](https://github.com/tenzir/tenzir/pull/1914). #### Prefer reading query from stdin if available [Section titled “Prefer reading query from stdin if available”](#prefer-reading-query-from-stdin-if-available) A recently added features allows for exporting everything when no query is provided. We’ve restricted this to prefer reading a query from stdin if available. Additionally, conflicting ways to read the query now trigger errors. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1917](https://github.com/tenzir/tenzir/pull/1917). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Automatically add the skip attribute to records in lists [Section titled “Automatically add the skip attribute to records in lists”](#automatically-add-the-skip-attribute-to-records-in-lists) VAST no longer tries to create indexes for fields of type `list<record{...}>` as that wasn’t supported in the first place. By [@tobim](https://github.com/tobim) in [#1933](https://github.com/tenzir/tenzir/pull/1933). #### Increase the partition erase timeout to 1 minute [Section titled “Increase the partition erase timeout to 1 minute”](#increase-the-partition-erase-timeout-to-1-minute) The timeout duration to delete partitions has been increased to one minute, reducing the frequency of warnings for hitting this timeout significantly. By [@tobim](https://github.com/tobim) in [#1897](https://github.com/tenzir/tenzir/pull/1897). #### Change `suricata.dns` schema to match current DNS structure [Section titled “Change suricata.dns schema to match current DNS structure”](#change-suricatadns-schema-to-match-current-dns-structure) The `suricata.dns` schema has been updated to match the currently used EVE-JSON structure output by recent Suricata versions. By [@satta](https://github.com/satta) in [#1919](https://github.com/tenzir/tenzir/pull/1919). #### Load static plugins only when enabled [Section titled “Load static plugins only when enabled”](#load-static-plugins-only-when-enabled) Static plugins are no longer always loaded, but rather need to be explicitly enabled as documented. To restore the behavior from before this bug fix, set `vast.plugins: [bundled]` in your configuration file. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1959](https://github.com/tenzir/tenzir/pull/1959). #### Update xxHash and hashing APIs [Section titled “Update xxHash and hashing APIs”](#update-xxhash-and-hashing-apis-1) When reading IPv6 addresses from PCAP data, only the first 4 bytes have been considered. VAST now stores all 16 bytes. By [@mavam](https://github.com/mavam) in [#1905](https://github.com/tenzir/tenzir/pull/1905). #### Fix deletion of segments if CWD != dbdir [Section titled “Fix deletion of segments if CWD != dbdir”](#fix-deletion-of-segments-if-cwd--dbdir) Store files now get deleted correctly if the database directory differs from the working directory. By [@tobim](https://github.com/tobim) in [#1912](https://github.com/tenzir/tenzir/pull/1912). #### Avoid references to record fields in fill\_status\_map [Section titled “Avoid references to record fields in fill\_status\_map”](#avoid-references-to-record-fields-in-fill_status_map) Debug builds of VAST no longer segfault on a status request with the `--debug` option. By [@tobim](https://github.com/tobim) in [#1915](https://github.com/tenzir/tenzir/pull/1915).

# VAST 2021.12.16

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/2021.12.16). ### Features [Section titled “Features”](#features) #### PRs 1987-1992 [Section titled “PRs 1987-1992”](#prs-1987-1992) Metrics events now optionally contain a metadata field that is a key-value mapping of string to string, allowing for finer-grained introspection. For now this enables correlation of metrics events and individual queries. A set of new metrics for query lookup use this feature to include the query ID. By [@tobim](https://github.com/tobim) in [#1987](https://github.com/tenzir/tenzir/pull/1987). #### Make JSON field selectors configurable [Section titled “Make JSON field selectors configurable”](#make-json-field-selectors-configurable) JSON field selectors are now configurable instead of being hard-coded for Suricata Eve JSON and Zeek Streaming JSON. E.g., `vast import json --selector=event_type:suricata` is now equivalent to `vast import suricata`. This allows for easier integration of JSONL data containing a field that indicates its type. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1974](https://github.com/tenzir/tenzir/pull/1974). #### Emit version column along with metrics [Section titled “Emit version column along with metrics”](#emit-version-column-along-with-metrics) All metrics events now contain the version of VAST. Additionally, VAST now emits startup and shutdown metrics at the start and stop of the VAST server. By [@6yozo](https://github.com/6yozo) in [#1973](https://github.com/tenzir/tenzir/pull/1973). ### Changes [Section titled “Changes”](#changes) #### Type FlatBuffers [Section titled “Type FlatBuffers”](#type-flatbuffers) VAST’s internal type system has a new on-disk data representation. While we still support reading older databases, reverting to an older version of VAST will not be possible after this change. Alongside this change, we’ve implemented numerous fixes and streamlined handling of field name lookups, which now more consistently handles the dot-separator. E.g., the query `#field == "ip"` still matches the field `source.ip`, but no longer the field `source_ip`. The change is also performance-relevant in the long-term: For data persisted from previous versions of VAST we convert to the new type system on the fly, and for newly ingested data we now have near zero-cost deserialization for types, which should result in an overall speedup once the old data is rotated out by the disk monitor. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1888](https://github.com/tenzir/tenzir/pull/1888). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix JSON default selector for nested records [Section titled “Fix JSON default selector for nested records”](#fix-json-default-selector-for-nested-records) The field-based default selector of the JSON import now correctly matches types with nested record types. By [@dominiklohmann](https://github.com/dominiklohmann) in [#1988](https://github.com/tenzir/tenzir/pull/1988).

# Next

Unreleased changes.

# VAST v1.0.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v1.0.0). ### Features [Section titled “Features”](#features) #### Introduce the `#import_time` meta extractor [Section titled “Introduce the #import\_time meta extractor”](#introduce-the-import_time-meta-extractor) The `#import_time` meta extractor allows for querying events based on the time they arrived at the VAST server process. It may only be used for comparisons with [time value literals](https://vast.io/docs/understand/query-language/expressions#values), e.g., `vast export json '#import_time > 1 hour ago'` exports all events that were imported within the last hour as NDJSON. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2019](https://github.com/tenzir/tenzir/pull/2019). #### Add a `--omit-nulls` option to the JSON export [Section titled “Add a --omit-nulls option to the JSON export”](#add-a---omit-nulls-option-to-the-json-export) The new `--omit-nulls` option to the `vast export json` command causes VAST to skip over fields in JSON objects whose value is `null` when rendering them. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2004](https://github.com/tenzir/tenzir/pull/2004). #### Create projection plugin [Section titled “Create projection plugin”](#create-projection-plugin) VAST has a new transform step: `project`, which keeps the fields with configured key suffixes and removes the rest from the input. At the same time, the `delete` transform step can remove not only one but multiple fields from the input based on the configured key suffixes. By [@6yozo](https://github.com/6yozo) in [#2000](https://github.com/tenzir/tenzir/pull/2000). #### Implement a selection transform plugin [Section titled “Implement a selection transform plugin”](#implement-a-selection-transform-plugin) VAST has a new transform step: `select`, which keeps rows matching the configured expression and removes the rest from the input. By [@6yozo](https://github.com/6yozo) in [#2014](https://github.com/tenzir/tenzir/pull/2014). ### Changes [Section titled “Changes”](#changes) #### Upgrade the minimum Arrow dependency to 6.0 [Section titled “Upgrade the minimum Arrow dependency to 6.0”](#upgrade-the-minimum-arrow-dependency-to-60) Building VAST now requires Arrow >= 6.0. By [@dispanser](https://github.com/dispanser) in [#2033](https://github.com/tenzir/tenzir/pull/2033). #### Prepare repository for VAST v1.0.0-rc1 [Section titled “Prepare repository for VAST v1.0.0-rc1”](#prepare-repository-for-vast-v100-rc1) VAST no longer uses calendar-based versioning. Instead, it uses a semantic versioning scheme. A new VERSIONING.md document installed alongside VAST explores the semantics in-depth. Plugins now have a separate version. The build scaffolding installs README.md and CHANGELOG.md files in the plugin source tree root automatically. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2035](https://github.com/tenzir/tenzir/pull/2035). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Create intermediate dirs for db-directory and respect schema-dirs in bare mode [Section titled “Create intermediate dirs for db-directory and respect schema-dirs in bare mode”](#create-intermediate-dirs-for-db-directory-and-respect-schema-dirs-in-bare-mode) VAST no longer ignores the `--schema-dirs` option when using `--bare-mode`. Starting VAST no longer fails if creating the database directory requires creating intermediate directories. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2046](https://github.com/tenzir/tenzir/pull/2046). #### Start the telemetry loop of the index correctly [Section titled “Start the telemetry loop of the index correctly”](#start-the-telemetry-loop-of-the-index-correctly) The index now emits the metrics `query.backlog.{low,normal}` and `query.workers.{idle,busy}` reliably. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2032](https://github.com/tenzir/tenzir/pull/2032).

# VAST v1.1.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v1.1.0). ### Features [Section titled “Features”](#features) #### PRs 2064-2082 [Section titled “PRs 2064-2082”](#prs-2064-2082) The built-in `select` and `project` transform steps now correctly handle dropping all rows and columns respectively, effectively deleting the input data. By [@lava](https://github.com/lava) in [#2064](https://github.com/tenzir/tenzir/pull/2064). #### Add new query language plugin [Section titled “Add new query language plugin”](#add-new-query-language-plugin) VAST has a new *query language* plugin type that allows for adding additional query language frontends. The plugin performs one function: compile user input into a VAST expression. The new `sigma` plugin demonstrates usage of this plugin type. By [@mavam](https://github.com/mavam) in [#2074](https://github.com/tenzir/tenzir/pull/2074). #### Implement a generic aggregation transform step [Section titled “Implement a generic aggregation transform step”](#implement-a-generic-aggregation-transform-step) The new built-in `rename` transform step allows for renaming event types during a transformation. This is useful when you want to ensure that a repeatedly triggered transformation does not affect already transformed events. The new `aggregate` transform plugin allows for flexibly grouping and aggregating events. We recommend using it alongside the [`compaction` plugin](https://vast.io/docs/about/use-cases/data-aging), e.g., for rolling up events into a more space-efficient representation after a certain amount of time. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2076](https://github.com/tenzir/tenzir/pull/2076). ### Changes [Section titled “Changes”](#changes) #### Correctly handle partition transforms without output [Section titled “Correctly handle partition transforms without output”](#correctly-handle-partition-transforms-without-output) We fixed an issue where partition transforms that erase complete partitions trigger an internal assertion failure. By [@lava](https://github.com/lava) in [#2123](https://github.com/tenzir/tenzir/pull/2123). #### Log actor names together with the unique actor ID [Section titled “Log actor names together with the unique actor ID”](#log-actor-names-together-with-the-unique-actor-id) Actor names in log messages now have an `-ID` suffix to make it easier to tell multiple instances of the same actor apart, e.g., `exporter-42`. By [@tobim](https://github.com/tobim) in [#2119](https://github.com/tenzir/tenzir/pull/2119). #### Deprecate the msgpack table slice [Section titled “Deprecate the msgpack table slice”](#deprecate-the-msgpack-table-slice) The `msgpack` encoding option is now deprecated. VAST issues a warning on startup and automatically uses the `arrow` encoding instead. A future version of VAST will remove this option entirely. The experimental aging feature is now deprecated. The [compaction plugin](https://vast.io/docs/about/use-cases/data-aging) offers a superset of the aging functionality. By [@tobim](https://github.com/tobim) in [#2087](https://github.com/tenzir/tenzir/pull/2087). #### Add new query language plugin [Section titled “Add new query language plugin”](#add-new-query-language-plugin-1) VAST no longer attempts to intepret query expressions as Sigma rules automatically. Instead, this functionality moved to a dedicated `sigma` query language plugin that must explicitly be enabled at build time. By [@mavam](https://github.com/mavam) in [#2074](https://github.com/tenzir/tenzir/pull/2074). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Improve name lookup in meta index to reduce FPs [Section titled “Improve name lookup in meta index to reduce FPs”](#improve-name-lookup-in-meta-index-to-reduce-fps) A performance bug in the first stage of query evaluation caused VAST to return too many candidate partitions when querying for a field suffix. For example, a query for the `ts` field commonly used in Zeek logs also included partitions for `netflow.pkts` from `suricata.netflow` events. This bug no longer exists, resulting in a considerable speedup of affected queries. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2086](https://github.com/tenzir/tenzir/pull/2086). #### Send initial db state to new partition creation listeners [Section titled “Send initial db state to new partition creation listeners”](#send-initial-db-state-to-new-partition-creation-listeners) We fixed a bug that potentially resulted in the wrong subset of partitions to be considered during query evaluation. By [@lava](https://github.com/lava) in [#2103](https://github.com/tenzir/tenzir/pull/2103). #### Fix hanging queries [Section titled “Fix hanging queries”](#fix-hanging-queries) VAST does not lose query capacity when backlogged queries are cancelled any more. By [@tobim](https://github.com/tobim) in [#2092](https://github.com/tenzir/tenzir/pull/2092). #### Adjust index statistics for partition transforms [Section titled “Adjust index statistics for partition transforms”](#adjust-index-statistics-for-partition-transforms) VAST now correctly adjusts the index statistics when applying partition transforms. By [@lava](https://github.com/lava) in [#2097](https://github.com/tenzir/tenzir/pull/2097).

# VAST v1.1.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v1.1.1). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Backport bug fixes for a v1.1.1 release [Section titled “Backport bug fixes for a v1.1.1 release”](#backport-bug-fixes-for-a-v111-release) The disk monitor now correctly continues deleting until below the low water mark after a partition failed to delete. We fixed a rarely occurring race condition caused query workers to become stuck after delivering all results until the corresponding client process terminated. Queries that timed out or were externally terminated while in the query backlog and with more than five unhandled candidate partitions no longer permanently get stuck. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2160](https://github.com/tenzir/tenzir/pull/2160).

# VAST v1.1.2

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v1.1.2). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix race condition with exporter timeouts [Section titled “Fix race condition with exporter timeouts”](#fix-race-condition-with-exporter-timeouts) Terminating or timing out exports during the catalog lookup no longer causes query workers to become stuck indefinitely. By [@lava](https://github.com/lava) in [#2165](https://github.com/tenzir/tenzir/pull/2165).

# VAST v2.0.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v2.0.0). ### Features [Section titled “Features”](#features) #### Clean up transform steps (and native plugins generally) [Section titled “Clean up transform steps (and native plugins generally)”](#clean-up-transform-steps-and-native-plugins-generally) The `replace` transform step now allows for setting values of complex types, e.g., lists or records. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2228](https://github.com/tenzir/tenzir/pull/2228). #### Print segment contents with lsvast [Section titled “Print segment contents with lsvast”](#print-segment-contents-with-lsvast) The `lsvast` tool now prints the whole store contents when given a store file as an argument. By [@lava](https://github.com/lava) in [#2247](https://github.com/tenzir/tenzir/pull/2247). #### Use dedicated partitions for each layout [Section titled “Use dedicated partitions for each layout”](#use-dedicated-partitions-for-each-layout) VAST now creates one active partition per layout, rather than having a single active partition for all layouts. The new option `vast.active-partition-timeout` controls the time after which an active partition is flushed to disk. The timeout may hit before the partition size reaches `vast.max-partition-size`, allowing for an additional temporal control for data freshness. The active partition timeout defaults to 1 hour. By [@tobim](https://github.com/tobim) in [#2096](https://github.com/tenzir/tenzir/pull/2096). #### Allow fine-grained meta index configuration [Section titled “Allow fine-grained meta index configuration”](#allow-fine-grained-meta-index-configuration) The new `vast.index` section in the configuration supports adjusting the false-positive rate of first-stage lookups for individual fields, allowing users to optimize the time/space trade-off for expensive queries. By [@lava](https://github.com/lava) in [#2065](https://github.com/tenzir/tenzir/pull/2065). #### Add a grand total event counter to the status output [Section titled “Add a grand total event counter to the status output”](#add-a-grand-total-event-counter-to-the-status-output) The output of `vast status` now displays the total number of events stored under the key `index.statistics.events.total`. By [@6yozo](https://github.com/6yozo) in [#2133](https://github.com/tenzir/tenzir/pull/2133). #### Backport bug fixes for a v1.1.1 release [Section titled “Backport bug fixes for a v1.1.1 release”](#backport-bug-fixes-for-a-v111-release) The disk monitor has new status entries `blacklist` and \`blacklist * size\` containing information about partitions failed to be erased. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2160](https://github.com/tenzir/tenzir/pull/2160). #### Support environment variables as alternate config mechanism [Section titled “Support environment variables as alternate config mechanism”](#support-environment-variables-as-alternate-config-mechanism) VAST has now complete support for passing environment variables as alternate path to configuration files. Environment variables have *lower* precedence than CLI arguments and *higher* precedence than config files. Variable names of the form `VAST_FOO__BAR_BAZ` map to `vast.foo.bar-baz`, i.e., `__` is a record separator and `_` translates to `-`. This does not apply to the prefix `VAST_`, which is considered the application identifier. Only variables with non-empty values are considered. By [@mavam](https://github.com/mavam) in [#2162](https://github.com/tenzir/tenzir/pull/2162). #### Implement support for transforms that apply to every type and use compaction for aging [Section titled “Implement support for transforms that apply to every type and use compaction for aging”](#implement-support-for-transforms-that-apply-to-every-type-and-use-compaction-for-aging) VAST v1.0 deprecated the experimental aging feature. Given popular demand we’ve decided to un-deprecate it, and to actually implement it on top of the same building blocks the compaction mechanism uses. This means that it is now fully working and no longer considered experimental. By [@lava](https://github.com/lava) in [#2186](https://github.com/tenzir/tenzir/pull/2186). ### Changes [Section titled “Changes”](#changes) #### Remove the get subcommand [Section titled “Remove the get subcommand”](#remove-the-get-subcommand) We removed the experimental `vast get` command. It relied on an internal unique event ID that was only exposed to the user in debug messages. This removal is a preparatory step towards a simplification of some of the internal workings of VAST. By [@tobim](https://github.com/tobim) in [#2121](https://github.com/tenzir/tenzir/pull/2121). #### Mark `experimental` encoding as `arrow.v2` [Section titled “Mark experimental encoding as arrow.v2”](#mark-experimental-encoding-as-arrowv2) VAST’s internal data model now completely preserves the nesting of the stored data when using the `arrow` encoding, and maps the pattern, address, subnet, and enumeration types onto Arrow extension types rather than using the underlying representation directly. This change enables use of the `export arrow` command without needing information about VAST’s type system. Transform steps that add or modify columns now transform the columns in-place rather than at the end, preserving the nesting structure of the original data. The deprecated `msgpack` encoding no longer exists. Data imported using the `msgpack` encoding can still be accessed, but new data will always use the `arrow` encoding. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2159](https://github.com/tenzir/tenzir/pull/2159). #### Minimize the threadpool for client commands [Section titled “Minimize the threadpool for client commands”](#minimize-the-threadpool-for-client-commands) Client commands such as `vast export` or `vast status` now create less threads at runtime, reducing the risk of hitting system resource limits. By [@tobim](https://github.com/tobim) in [#2193](https://github.com/tenzir/tenzir/pull/2193). #### Deploy VAST to AWS Lambda [Section titled “Deploy VAST to AWS Lambda”](#deploy-vast-to-aws-lambda) VAST ships experimental Terraform scripts to deploy on AWS Lambda and Fargate. By [@rdettai](https://github.com/rdettai) in [#2108](https://github.com/tenzir/tenzir/pull/2108). #### Fix CLI verbosity shorthands [Section titled “Fix CLI verbosity shorthands”](#fix-cli-verbosity-shorthands) The command line option `--verbosity` has the new name `--console-verbosity`. This synchronizes the CLI interface with the configuration file that solely understands the option `vast.console-verbosity`. By [@mavam](https://github.com/mavam) in [#2178](https://github.com/tenzir/tenzir/pull/2178). #### Remove the “catalog” and “catalog-bytes” keys from the index status [Section titled “Remove the “catalog” and “catalog-bytes” keys from the index status”](#remove-the-catalog-and-catalog-bytes-keys-from-the-index-status) The `index` section in the status output no longer contains the `catalog` and `catalog-bytes` keys. The information is already present in the top-level `catalog` section. By [@tobim](https://github.com/tobim) in [#2233](https://github.com/tenzir/tenzir/pull/2233). #### Rename `meta-index` to `catalog` [Section titled “Rename meta-index to catalog”](#rename-meta-index-to-catalog) The `meta-index` is now called the `catalog`. This affects multiple metrics and entries in the output of `vast status`, and the configuration option `vast.meta-index-fp-rate`, which is now called `vast.catalog-fp-rate`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2128](https://github.com/tenzir/tenzir/pull/2128). #### Eploit synergies when evaluating many queries at the same time [Section titled “Eploit synergies when evaluating many queries at the same time”](#eploit-synergies-when-evaluating-many-queries-at-the-same-time) We revised the query scheduling logic to exploit synergies when multiple queries run at the same time. In that vein, we updated the related metrics with more accurate names to reflect the new mechanism. The new keys `scheduler.partition.materializations`, `scheduler.partition.scheduled`, and `scheduler.partition.lookups` provide periodic counts of partitions loaded from disk and scheduled for lookup, and the overall number of queries issued to partitions, respectively. The keys `query.workers.idle`, and `query.workers.busy` were renamed to `scheduler.partition.remaining-capacity`, and `scheduler.partition.current-lookups`. Finally, the key `scheduler.partition.pending` counts the number of currently pending partitions. It is still possible to opt-out of the new scheduling algorithm with the (deprecated) option `--use-legacy-query-scheduler`. By [@tobim](https://github.com/tobim) in [#2117](https://github.com/tenzir/tenzir/pull/2117). #### Bump the minimum version of Apache Arrow to 7.0 [Section titled “Bump the minimum version of Apache Arrow to 7.0”](#bump-the-minimum-version-of-apache-arrow-to-70) VAST now requires Apache Arrow >= v7.0.0. By [@tobim](https://github.com/tobim) in [#2122](https://github.com/tenzir/tenzir/pull/2122). #### Clean up transform steps (and native plugins generally) [Section titled “Clean up transform steps (and native plugins generally)”](#clean-up-transform-steps-and-native-plugins-generally-1) Multiple transform steps now have new names: `select` is now called `where`, `delete` is now called `drop`, `project` is now called `put`, and `aggregate` is now called `summarize`. This breaking change is in preparation for an upcoming feature that improves the capability of VAST’s query language. The `layout-names` option of the `rename` transform step was renamed `schemas`. The step now additonally supports renaming `fields`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2228](https://github.com/tenzir/tenzir/pull/2228). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Make man-page creation more robust [Section titled “Make man-page creation more robust”](#make-man-page-creation-more-robust) The `vast(1)` man-page is no longer empty for VAST distributions with static binaries. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2190](https://github.com/tenzir/tenzir/pull/2190). #### Treat list options in env variables consistently [Section titled “Treat list options in env variables consistently”](#treat-list-options-in-env-variables-consistently) Environment variables for options that specify lists now consistently use comma-separators and respect escaping with backslashes. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2236](https://github.com/tenzir/tenzir/pull/2236). #### Reduce the default log queue size for client commands [Section titled “Reduce the default log queue size for client commands”](#reduce-the-default-log-queue-size-for-client-commands) We optimized the queue size of the logger for commands other than `vast start`. Client commands now show a significant reduction in memory usage and startup time. By [@tobim](https://github.com/tobim) in [#2176](https://github.com/tenzir/tenzir/pull/2176). #### Lift selector field requirements for JSON import [Section titled “Lift selector field requirements for JSON import”](#lift-selector-field-requirements-for-json-import) The JSON import no longer rejects non-string selector fields. Instead, it always uses the textual JSON representation as a selector. E.g., the JSON object `{id:1,...}` imported via `vast import json --selector=id:mymodule` now matches the schema named `mymodule.1` rather than erroring because the `id` field is not a string. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2255](https://github.com/tenzir/tenzir/pull/2255). #### Correctly terminate the explore command [Section titled “Correctly terminate the explore command”](#correctly-terminate-the-explore-command) The `explore` command now properly terminates after the requested number of results are delivered. By [@tobim](https://github.com/tobim) in [#2120](https://github.com/tenzir/tenzir/pull/2120). #### Load stores lazily [Section titled “Load stores lazily”](#load-stores-lazily) The `count --estimate` erroneously materialized store files from disk, resulting in an unneeded performance penalty. VAST now answers approximate count queries by solely consulting the relevant index files. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2146](https://github.com/tenzir/tenzir/pull/2146). #### Add support for reals in CSV without dot [Section titled “Add support for reals in CSV without dot”](#add-support-for-reals-in-csv-without-dot) The CSV parser no longer fails when encountering integers when floating point values were expected. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2184](https://github.com/tenzir/tenzir/pull/2184). #### Fix query pruning in the catalog [Section titled “Fix query pruning in the catalog”](#fix-query-pruning-in-the-catalog) The query optimizer incorrectly transformed queries with conjunctions or disjunctions with several operands testing against the same string value, leading to missing result. This was rarely an issue in practice before the introduction of homogenous partitions with the v2.0 release. By [@lava](https://github.com/lava) in [#2264](https://github.com/tenzir/tenzir/pull/2264). #### Don’t send null pointers when erasing whole partitions [Section titled “Don’t send null pointers when erasing whole partitions”](#dont-send-null-pointers-when-erasing-whole-partitions) VAST no longer sometimes crashes when aging or compaction erase whole partitions. By [@lava](https://github.com/lava) in [#2227](https://github.com/tenzir/tenzir/pull/2227). #### Ignore types unrelated to the configuration in the summarize plugin [Section titled “Ignore types unrelated to the configuration in the summarize plugin”](#ignore-types-unrelated-to-the-configuration-in-the-summarize-plugin) Transform steps removing all nested fields from a record leaving only empty nested records no longer cause VAST to crash. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2258](https://github.com/tenzir/tenzir/pull/2258). #### Fix race condition with exporter timeouts [Section titled “Fix race condition with exporter timeouts”](#fix-race-condition-with-exporter-timeouts) Some queries could get stuck when an importer would time out during the meta index lookup. This race condition no longer exists. By [@lava](https://github.com/lava) in [#2167](https://github.com/tenzir/tenzir/pull/2167). #### Stop accepting new queries after initiating shutdown [Section titled “Stop accepting new queries after initiating shutdown”](#stop-accepting-new-queries-after-initiating-shutdown) VAST servers no longer accept queries after initiating shutdown. This fixes a potential infinite hang if new queries were coming in faster than VAST was able to process them. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2215](https://github.com/tenzir/tenzir/pull/2215). #### Use the timestamp type for inferred event timestamp fields in the Zeek reader [Section titled “Use the timestamp type for inferred event timestamp fields in the Zeek reader”](#use-the-timestamp-type-for-inferred-event-timestamp-fields-in-the-zeek-reader) The `import zeek` command now correctly marks the event timestamp using the `timestamp` type alias for all inferred schemas. By [@tobim](https://github.com/tobim) in [#2155](https://github.com/tenzir/tenzir/pull/2155).

# VAST v2.1.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v2.1.0). ### Features [Section titled “Features”](#features) #### Parquet store plugin [Section titled “Parquet store plugin”](#parquet-store-plugin) A new parquet store plugin allows VAST to store its data as parquet files, increasing storage efficiency at the expense of higher deserialization costs. Storage requirements for the VAST database is reduced by another 15-20% compared to the existing segment store with Zstd compression enabled. CPU usage for suricata import is up \~ 10%, mostly related to the more expensive serialization. Deserialization (reading) of a partition is significantly more expensive, increasing CPU utilization by about 100%, and should be carefully considered and compared to the potential reduction in storage cost and I/O operations. By [@dispanser](https://github.com/dispanser) in [#2284](https://github.com/tenzir/tenzir/pull/2284). #### Report by schema metrics from the importer [Section titled “Report by schema metrics from the importer”](#report-by-schema-metrics-from-the-importer) VAST now produces additional metrics under the keys `ingest.events`, `ingest.duration` and `ingest.rate`. Each of those gets issued once for every schema that VAST ingested during the measurement period. Use the `metadata_schema` key to disambiguate the metrics. By [@tobim](https://github.com/tobim) in [#2274](https://github.com/tenzir/tenzir/pull/2274). #### Compress in-memory slices with Zstd [Section titled “Compress in-memory slices with Zstd”](#compress-in-memory-slices-with-zstd) VAST now compresses data with Zstd. When persisting data to the segment store, the default configuration achieves over 2x space savings. When transferring data between client and server processes, compression reduces the amount of transferred data by up to 5x. This allowed us to increase the default partition size from 1,048,576 to 4,194,304 events, and the default number of events in a single batch from 1,024 to 65,536. The performance increase comes at the cost of a \~20% memory footprint increase at peak load. Use the option `vast.max-partition-size` to tune this space-time tradeoff. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2268](https://github.com/tenzir/tenzir/pull/2268). #### Add percentage of total number of events to index status [Section titled “Add percentage of total number of events to index status”](#add-percentage-of-total-number-of-events-to-index-status) The index statistics in `vast status --detailed` now show the event distribution per schema as a percentage of the total number of events in addition to the per-schema number, e.g., for `suricata.flow` events under the key `index.statistics.layouts.suricata.flow.percentage`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2351](https://github.com/tenzir/tenzir/pull/2351). #### PRs 2360-2363 [Section titled “PRs 2360-2363”](#prs-2360-2363) The output `vast status --detailed` now shows metadata from all partitions under the key `.catalog.partitions`. Additionally, the catalog emits metrics under the key `catalog.num-events` and `catalog.num-partitions` containing the number of events and partitions respectively. The metrics contain the schema name in the field `metadata_schema` and the (internal) partition version in the field `metadata_partition-version`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2360](https://github.com/tenzir/tenzir/pull/2360). #### Base image with Closed Source plugins [Section titled “Base image with Closed Source plugins”](#base-image-with-closed-source-plugins) The VAST Cloud CLI can now authenticate to the Tenzir private registry and download the vast-pro image (including plugins such as Matcher). The deployment script can now be configured to use a specific image and can thus be set to use vast-pro. By [@rdettai](https://github.com/rdettai) in [#2415](https://github.com/tenzir/tenzir/pull/2415). #### Add new debugging features to VAST tools [Section titled “Add new debugging features to VAST tools”](#add-new-debugging-features-to-vast-tools) The `lsvast` tool can now print contents of individual `.mdx` files. It now has an option to print raw Bloom filter contents of string and IP address synopses. The `mdx-regenerate` tool was renamed to `vast-regenerate` and can now also regenerate an index file from a list of partition UUIDs. By [@lava](https://github.com/lava) in [#2260](https://github.com/tenzir/tenzir/pull/2260). #### PRs 2334-KaanSK [Section titled “PRs 2334-KaanSK”](#prs-2334-kaansk) PyVAST now supports running client commands for VAST servers running in a container environment, if no local VAST binary is available. Specify the `container` keyword to customize this behavior. It defaults to `{"runtime": "docker", "name": "vast"}`. By [@KaanSK](https://github.com/KaanSK) in [#2334](https://github.com/tenzir/tenzir/pull/2334). #### Add index metric for created active partitions [Section titled “Add index metric for created active partitions”](#add-index-metric-for-created-active-partitions) VAST emits the new metric `partition.events-written` when writing a partition to disk. The metric’s value is the number of events written, and the `metadata_schema` field contains the name of the partition’s schema. By [@lava](https://github.com/lava) in [#2302](https://github.com/tenzir/tenzir/pull/2302). #### Improve usability of CSV format [Section titled “Improve usability of CSV format”](#improve-usability-of-csv-format) The `csv` import gained a new `--seperator='x'` option that defaults to `','`. Set it to `'\t'` to import tab-separated values, or `' '` to import space-separated values. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2336](https://github.com/tenzir/tenzir/pull/2336). #### Add a `rebuild` command plugin [Section titled “Add a rebuild command plugin”](#add-a-rebuild-command-plugin) The new `rebuild` command rebuilds old partitions to take advantage of improvements in newer VAST versions. Rebuilding takes place in the VAST server in the background. This process merges partitions up to the configured `max-partition-size`, turns VAST v1.x’s heterogeneous into VAST v2.x’s homogenous partitions, migrates all data to the currently configured `store-backend`, and upgrades to the most recent internal batch encoding and indexes. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2321](https://github.com/tenzir/tenzir/pull/2321). #### Compress serialized indexers [Section titled “Compress serialized indexers”](#compress-serialized-indexers) VAST now compresses on-disk indexes with Zstd, resulting in a 50-80% size reduction depending on the type of indexes used, and reducing the overall index size to below the raw data size. This improves retention spans significantly. For example, using the default configuration, the indexes for `suricata.ftp` events now use 75% less disk space, and `suricata.flow` 30% less. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2346](https://github.com/tenzir/tenzir/pull/2346). #### Add optional status command filters [Section titled “Add optional status command filters”](#add-optional-status-command-filters) The `status` command now supports filtering by component name. E.g., `vast status importer index` only shows the status of the importer and index components. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2288](https://github.com/tenzir/tenzir/pull/2288). ### Changes [Section titled “Changes”](#changes) #### Parquet store plugin [Section titled “Parquet store plugin”](#parquet-store-plugin-1) VAST now requires Arrow >= v8.0.0. By [@dispanser](https://github.com/dispanser) in [#2284](https://github.com/tenzir/tenzir/pull/2284). #### Always format time values with microsecond precision [Section titled “Always format time values with microsecond precision”](#always-format-time-values-with-microsecond-precision) VAST will from now on always format `time` and `timestamp` values with six decimal places (microsecond precision). The old behavior used a precision that depended on the actual value. This may require action for downstream tooling like metrics collectors that expect nanosecond granularity. By [@tobim](https://github.com/tobim) in [#2380](https://github.com/tenzir/tenzir/pull/2380). #### Remove legacy index from VAST [Section titled “Remove legacy index from VAST”](#remove-legacy-index-from-vast) The `vast.use-legacy-query-scheduler` option is now ignored because the legacy query scheduler has been removed. By [@lava](https://github.com/lava) in [#2312](https://github.com/tenzir/tenzir/pull/2312). #### Deprecate the archive store-backend [Section titled “Deprecate the archive store-backend”](#deprecate-the-archive-store-backend) The `vast.store-backend` configuration option no longer supports `archive`, and instead always uses the superior `segment-store` instead. Events stored in the archive will continue to be available in queries. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2290](https://github.com/tenzir/tenzir/pull/2290). #### Write homogenous partitions from the partition transformer [Section titled “Write homogenous partitions from the partition transformer”](#write-homogenous-partitions-from-the-partition-transformer) Partition transforms now always emit homogenous partitions, i.e., one schema per partition. This makes compaction and aging more efficient. By [@lava](https://github.com/lava) in [#2277](https://github.com/tenzir/tenzir/pull/2277). #### Add new debugging features to VAST tools [Section titled “Add new debugging features to VAST tools”](#add-new-debugging-features-to-vast-tools-1) The `mdx-regenerate` tool is no longer part of VAST binary releases. By [@lava](https://github.com/lava) in [#2260](https://github.com/tenzir/tenzir/pull/2260). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Improve index crash recovery [Section titled “Improve index crash recovery”](#improve-index-crash-recovery) We improved the mechanism to recover the database state after an unclean shutdown. By [@tobim](https://github.com/tobim) in [#2394](https://github.com/tenzir/tenzir/pull/2394). #### Use fast\_float to parse reals [Section titled “Use fast\_float to parse reals”](#use-fast_float-to-parse-reals) The parser for `real` values now understands scientific notation, e.g., `1.23e+42`. By [@tobim](https://github.com/tobim) in [#2332](https://github.com/tenzir/tenzir/pull/2332). #### Prefer CLI over config file for vast.plugins [Section titled “Prefer CLI over config file for vast.plugins”](#prefer-cli-over-config-file-for-vastplugins) The command-line options `--plugins`, `--plugin-dirs`, and `--schema-dirs` now correctly overwrite their corresponding configuration options. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2289](https://github.com/tenzir/tenzir/pull/2289). #### Fix crash in query evaluation for new partitions [Section titled “Fix crash in query evaluation for new partitions”](#fix-crash-in-query-evaluation-for-new-partitions) VAST no longer crashes when a query arrives at a newly created active partition in the time window between the partition creation and the first event arriving at the partition. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2295](https://github.com/tenzir/tenzir/pull/2295). #### Respect the default fp-rate setting [Section titled “Respect the default fp-rate setting”](#respect-the-default-fp-rate-setting) VAST now reads the default false-positive rate for sketches correctly. This broke accidentally with the v2.0 release. The option moved from `vast.catalog-fp-rate` to `vast.index.default-fp-rate`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2325](https://github.com/tenzir/tenzir/pull/2325). #### Parse time from JSON strings containing numbers [Section titled “Parse time from JSON strings containing numbers”](#parse-time-from-json-strings-containing-numbers) The JSON import now treats `time` and `duration` fields correctly for JSON strings containing a number, i.e., the JSON string `"1654735756"` now behaves just like the JSON number `1654735756` and for a `time` field results in the value `2022-06-09T00:49:16.000Z`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2340](https://github.com/tenzir/tenzir/pull/2340). #### The index shall not quit on write errors [Section titled “The index shall not quit on write errors”](#the-index-shall-not-quit-on-write-errors) VAST will no longer terminate when it can’t write any more data to disk. Incoming data will still be accepted but discarded. We encourage all users to enable the disk-monitor or compaction features as a proper solution to this problem. By [@tobim](https://github.com/tobim) in [#2376](https://github.com/tenzir/tenzir/pull/2376). #### Fall back to string when parsing config options from environment [Section titled “Fall back to string when parsing config options from environment”](#fall-back-to-string-when-parsing-config-options-from-environment) Setting the environment variable `VAST_ENDPOINT` to `host:port` pair no longer fails on startup with a parse error. By [@dispanser](https://github.com/dispanser) in [#2305](https://github.com/tenzir/tenzir/pull/2305). #### Improve usability of CSV format [Section titled “Improve usability of CSV format”](#improve-usability-of-csv-format-1) The `csv` import no longer crashes when the CSV file contains columns not present in the selected schema. Instead, it imports these columns as strings. `vast export csv` now renders enum columns in their string representation instead of their internal numerical representation. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2336](https://github.com/tenzir/tenzir/pull/2336). #### Allow missing value indices in partition flatbuffer [Section titled “Allow missing value indices in partition flatbuffer”](#allow-missing-value-indices-in-partition-flatbuffer) VAST no longer crashes when importing `map` or `pattern` data annotated with the `#skip` attribute. By [@lava](https://github.com/lava) in [#2286](https://github.com/tenzir/tenzir/pull/2286). #### Fix occasional shutdown hangs [Section titled “Fix occasional shutdown hangs”](#fix-occasional-shutdown-hangs) VAST no longer hangs when it is shut down while still importing events. By [@tobim](https://github.com/tobim) in [#2324](https://github.com/tenzir/tenzir/pull/2324). #### Support environment variables for plugin options [Section titled “Support environment variables for plugin options”](#support-environment-variables-for-plugin-options) VAST no longer ignores environment variables for plugin-specific options. E.g., the environment variable `VAST_PLUGINS__FOO__BAR` now correctly refers to the `bar` option of the `foo` plugin, i.e., `plugins.foo.bar`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2390](https://github.com/tenzir/tenzir/pull/2390).

# VAST v2.2.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v2.2.0). ### Features [Section titled “Features”](#features) #### Summarize operator with pluggable aggregation functions [Section titled “Summarize operator with pluggable aggregation functions”](#summarize-operator-with-pluggable-aggregation-functions) The `summarize` operator supports three new aggregation functions: `sample` takes the first value in every group, `distinct` filters out duplicate values, and `count` yields the number of values. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2417](https://github.com/tenzir/tenzir/pull/2417). #### Implement a `flush` command [Section titled “Implement a flush command”](#implement-a-flush-command) The new `flush` command causes VAST to decommission all currently active partitions, i.e., write all active partitions to disk immediately regardless of their size or the active partition timeout. This is particularly useful for testing, or when needing to guarantee in automated scripts that input is available for operations that only work on persisted passive partitions. The `flush` command returns only after all active partitions were flushed to disk. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2396](https://github.com/tenzir/tenzir/pull/2396). #### Introduce `select` / `replace` / `extend` operators [Section titled “Introduce select / replace / extend operators”](#introduce-select--replace--extend-operators) The new `extend` pipeline operator allows for adding new fields with fixed values to data. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2423](https://github.com/tenzir/tenzir/pull/2423). #### Run commands from scripts [Section titled “Run commands from scripts”](#run-commands-from-scripts) The cloud execution commands (`run-lambda` and `execute-command`) now accept scripts from file-like handles. To improve the usability of this feature, the whole host file system is now mounted into the CLI container. By [@rdettai](https://github.com/rdettai) in [#2446](https://github.com/tenzir/tenzir/pull/2446). #### Support dropping entire schemas in `drop` operator [Section titled “Support dropping entire schemas in drop operator”](#support-dropping-entire-schemas-in-drop-operator) The `drop` pipeline operator now drops entire schemas spcefied by name in the `schemas` configuration key in addition to dropping fields by extractors in the `fields` configuration key. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2419](https://github.com/tenzir/tenzir/pull/2419). ### Changes [Section titled “Changes”](#changes) #### Add clean command [Section titled “Add clean command”](#add-clean-command) An `init` command was added to `vast-cloud` to help getting out of inconsistent Terraform states. By [@rdettai](https://github.com/rdettai) in [#2435](https://github.com/tenzir/tenzir/pull/2435). #### Implement Apache Parquet & Apache Feather V2 stores [Section titled “Implement Apache Parquet & Apache Feather V2 stores”](#implement-apache-parquet--apache-feather-v2-stores) Metrics for VAST’s store lookups now use the keys `{active,passive}-store.lookup.{runtime,hits}`. The store type metadata field now distinguishes between the various supported store types, e.g., `parquet`, `feather`, or `segment-store`, rather than containing `active` or `passive`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2413](https://github.com/tenzir/tenzir/pull/2413). #### Rename transform to pipeline [Section titled “Rename transform to pipeline”](#rename-transform-to-pipeline) Transforms are now called pipelines. In your configuration, replace `transform` with `pipeline` in all keys. By [@dispanser](https://github.com/dispanser) in [#2429](https://github.com/tenzir/tenzir/pull/2429). #### Introduce `select` / `replace` / `extend` operators [Section titled “Introduce select / replace / extend operators”](#introduce-select--replace--extend-operators-1) The `put` pipeline operator is now called `select`, as we’ve abandoned plans to integrate the functionality of `replace` into it. The `replace` pipeline operator now supports multiple replacements in one configuration, which aligns the behavior with other operators. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2423](https://github.com/tenzir/tenzir/pull/2423). #### Summarize operator with pluggable aggregation functions [Section titled “Summarize operator with pluggable aggregation functions”](#summarize-operator-with-pluggable-aggregation-functions-1) The `summarize` pipeline operator is now a builtin; the previously bundled `summarize` plugin no longer exists. Aggregation functions in the `summarize` operator are now plugins, which makes them easily extensible. The syntax of `summarize` now supports specification of output field names, similar to SQL’s `AS` in `SELECT f(x) AS name`. The undocumented `count` pipeline operator no longer exists. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2417](https://github.com/tenzir/tenzir/pull/2417). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Make partition deletion resilient against oversize [Section titled “Make partition deletion resilient against oversize”](#make-partition-deletion-resilient-against-oversize) VAST is now able to detect corrupt index files and will attempt to repair them on startup. By [@tobim](https://github.com/tobim) in [#2431](https://github.com/tenzir/tenzir/pull/2431). #### Make transform application transactional [Section titled “Make transform application transactional”](#make-transform-application-transactional) We fixed a race condition when VAST crashed while applying a partition transform, leading to data duplication. By [@lava](https://github.com/lava) in [#2465](https://github.com/tenzir/tenzir/pull/2465). #### Properly indicate failure in the rebuild command [Section titled “Properly indicate failure in the rebuild command”](#properly-indicate-failure-in-the-rebuild-command) The rebuild command no longer crashes on failure, and displays the encountered error instead. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2466](https://github.com/tenzir/tenzir/pull/2466). #### Fix missing options sometimes not causing an error [Section titled “Fix missing options sometimes not causing an error”](#fix-missing-options-sometimes-not-causing-an-error) Missing arguments for the `--plugins`, `--plugin-dirs`, and `--schema-dirs` command line options no longer cause VAST to crash occasionally. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2470](https://github.com/tenzir/tenzir/pull/2470). #### Fix `vast.export.json.omit-nulls` for nested records [Section titled “Fix vast.export.json.omit-nulls for nested records”](#fix-vastexportjsonomit-nulls-for-nested-records) The JSON export with `--omit-nulls` now correctly handles nested records whose first field is `null` instead of dropping them entirely. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2447](https://github.com/tenzir/tenzir/pull/2447). #### Render reals with at least one decimal place [Section titled “Render reals with at least one decimal place”](#render-reals-with-at-least-one-decimal-place) VAST will export `real` values in JSON consistently with at least one decimal place. By [@patszt](https://github.com/patszt) in [#2393](https://github.com/tenzir/tenzir/pull/2393).

# VAST v2.3.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v2.3.0). ### Features [Section titled “Features”](#features) #### Cloud matchers [Section titled “Cloud matchers”](#cloud-matchers) We can now use matchers in AWS using the vast-cloud CLI matcher plugin. By [@rdettai](https://github.com/rdettai) in [#2473](https://github.com/tenzir/tenzir/pull/2473). #### Make the connection timeout configurable [Section titled “Make the connection timeout configurable”](#make-the-connection-timeout-configurable) The new `vast.connection-timeout` option allows for configuring the timeout VAST clients use when connecting to a VAST server. The value defaults to 10s; setting it to a zero duration causes produces an infinite timeout. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2499](https://github.com/tenzir/tenzir/pull/2499). #### Make the `rebuild` command more reliable [Section titled “Make the rebuild command more reliable”](#make-the-rebuild-command-more-reliable) VAST now continuously rebuilds outdated and merges undersized partitions in the background. The new option `vast.automatic-rebuild` controls how many resources to spend on this. To disable this behavior, set the option to 0; the default is 1. Rebuilding now emits metrics under the keys `rebuilder.partitions.{remaining,rebuilding,completed}`. The `vast status rebuild` command additionally shows information about the ongoing rebuild. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2493](https://github.com/tenzir/tenzir/pull/2493). #### Implement optional dense indexes [Section titled “Implement optional dense indexes”](#implement-optional-dense-indexes) VAST’s partition indexes are now optional, allowing operators to control the trade-off between disk-usage and query performance for every field. By [@patszt](https://github.com/patszt) in [#2430](https://github.com/tenzir/tenzir/pull/2430). ### Changes [Section titled “Changes”](#changes) #### Lower the impact of low-priority queries [Section titled “Lower the impact of low-priority queries”](#lower-the-impact-of-low-priority-queries) We improved the operability of VAST servers under high load from automated low-priority queries. VAST now considers queries issued with `--low-priority`, such as automated retro-match queries, with even less priority compared to regular queries (down from 33.3% to 4%) and internal high-priority queries used for rebuilding and compaction (down from 12.5% to 1%). By [@dominiklohmann](https://github.com/dominiklohmann) in [#2484](https://github.com/tenzir/tenzir/pull/2484). #### Make the `rebuild` command more reliable [Section titled “Make the rebuild command more reliable”](#make-the-rebuild-command-more-reliable-1) The default value for `vast.active-partition-timeout` is now 5 minutes (down from 1 hour), causing VAST to persist underful partitions earlier. We split the `vast rebuild` command into two: `vast rebuild start` and `vast rebuild stop`. Rebuild orchestration now runs server-side, and only a single rebuild may run at a given time. We also made it more intuitive to use: `--undersized` now implies `--all`, and a new `--detached` option allows for running rebuilds in the background. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2493](https://github.com/tenzir/tenzir/pull/2493). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Respect `--connection-timeout` in more places [Section titled “Respect --connection-timeout in more places”](#respect---connection-timeout-in-more-places) Configuration options representing durations with an associated command-line option like `vast.connection-timeout` and `--connection-timeout` were not picked up from configuration files or environment variables. This now works as expected. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2503](https://github.com/tenzir/tenzir/pull/2503). #### Add active partition actor to unpersisted partitions on decomission [Section titled “Add active partition actor to unpersisted partitions on decomission”](#add-active-partition-actor-to-unpersisted-partitions-on-decomission) VAST no longer occasionally prints warnings about no longer available partitions when queries run concurrently to imports. By [@patszt](https://github.com/patszt) in [#2500](https://github.com/tenzir/tenzir/pull/2500). #### Implement a flatbuffer container class to hold excess table slices in segments [Section titled “Implement a flatbuffer container class to hold excess table slices in segments”](#implement-a-flatbuffer-container-class-to-hold-excess-table-slices-in-segments) VAST can now store data in segments bigger than 2GiB in size each. VAST can now store column indexes that are bigger than 2GiB. By [@lava](https://github.com/lava) in [#2449](https://github.com/tenzir/tenzir/pull/2449). #### Implement optional dense indexes [Section titled “Implement optional dense indexes”](#implement-optional-dense-indexes-1) VAST properly processes queries for fields with `skip` attribute. By [@patszt](https://github.com/patszt) in [#2430](https://github.com/tenzir/tenzir/pull/2430). #### Wait until all stores have exited before finishing a partition transform [Section titled “Wait until all stores have exited before finishing a partition transform”](#wait-until-all-stores-have-exited-before-finishing-a-partition-transform) Fixed a race condition where the output of a partition transform could be reused before it was fully written to disk, for example when running `vast rebuild`. By [@lava](https://github.com/lava) in [#2543](https://github.com/tenzir/tenzir/pull/2543). #### Display store load failures to the user [Section titled “Display store load failures to the user”](#display-store-load-failures-to-the-user) Partitions now fail early when their stores fail to load from disk, detailing what went wrong in an error message. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2507](https://github.com/tenzir/tenzir/pull/2507). #### Activate cloud plugins explicitely [Section titled “Activate cloud plugins explicitely”](#activate-cloud-plugins-explicitely) We changed the way `vast-cloud` is loading its cloud plugins to make it more explicit. This avoids inconsitent defaults assigned to variables when using core commands on specific plugins. By [@rdettai](https://github.com/rdettai) in [#2510](https://github.com/tenzir/tenzir/pull/2510). #### Don’t abort startup if individual partitions fail to load [Section titled “Don’t abort startup if individual partitions fail to load”](#dont-abort-startup-if-individual-partitions-fail-to-load) The `rebuild` command, automatic rebuilds, and compaction are now much faster, and match the performance of the `import` command for building indexes. By [@tobim](https://github.com/tobim) in [#2515](https://github.com/tenzir/tenzir/pull/2515).

# VAST v2.3.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v2.3.1). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Properly recover corrupted partition data on startup [Section titled “Properly recover corrupted partition data on startup”](#properly-recover-corrupted-partition-data-on-startup) VAST now properly regenerates any corrupted, oversized partitions it encounters during startup, provided that the corresponding store files are available. These files could be produced by versions up to and including VAST v2.2, when using configurations with an increased maximum partition size. By [@lava](https://github.com/lava) in [#2631](https://github.com/tenzir/tenzir/pull/2631). #### Abort the response promise if running into oversized partitions [Section titled “Abort the response promise if running into oversized partitions”](#abort-the-response-promise-if-running-into-oversized-partitions) We fixed an indefinite hang that occurred when attempting to apply a pipeline to a partition that is not a valid flatbuffer. By [@lava](https://github.com/lava) in [#2624](https://github.com/tenzir/tenzir/pull/2624).

# VAST v2.4.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v2.4.0). ### Features [Section titled “Features”](#features) #### Cloud MISP [Section titled “Cloud MISP”](#cloud-misp) VAST Cloud has now a MISP plugin that enables to add a MISP instance to the cloud stack. By [@rdettai](https://github.com/rdettai) in [#2548](https://github.com/tenzir/tenzir/pull/2548). #### Make data predicate evaluation column-major [Section titled “Make data predicate evaluation column-major”](#make-data-predicate-evaluation-column-major) Queries without acceleration from a dense index run significantly faster, e.g., initial tests show a 2x performance improvement for substring queries. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2730](https://github.com/tenzir/tenzir/pull/2730). #### PRs 2567-2614-2638-3681 [Section titled “PRs 2567-2614-2638-3681”](#prs-2567-2614-2638-3681) The new experimental web plugin offers a RESTful API to VAST and a bundled web user interface in Svelte. By [@lava](https://github.com/lava) in [#2567](https://github.com/tenzir/tenzir/pull/2567). #### Rebatch undersized batches when rebuilding partitions [Section titled “Rebatch undersized batches when rebuilding partitions”](#rebatch-undersized-batches-when-rebuilding-partitions) Rebuilding partitions now additionally rebatches the contained events to `vast.import.batch-size` events per batch, which accelerates queries against partitions that previously had undersized batches. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2583](https://github.com/tenzir/tenzir/pull/2583). #### PRs 2513-2738 [Section titled “PRs 2513-2738”](#prs-2513-2738) We now distribute VAST also as Debian Package with every new release. The Debian package automatically installs a systemd service and creates a `vast` user for the VAST process. By [@tobim](https://github.com/tobim) in [#2513](https://github.com/tenzir/tenzir/pull/2513). #### Add “-total” metric keys for schema-dependent metrics [Section titled “Add “-total” metric keys for schema-dependent metrics”](#add--total-metric-keys-for-schema-dependent-metrics) VAST has three new metrics: `catalog.num-partitions-total`, `catalog.num-events-total`, and `ingest-total` that sum up all schema-based metrics by their respective schema-based metric counterparts. By [@Dakostu](https://github.com/Dakostu) in [#2682](https://github.com/tenzir/tenzir/pull/2682). #### Disable building unit tests in Dockerfile [Section titled “Disable building unit tests in Dockerfile”](#disable-building-unit-tests-in-dockerfile) VAST Cloud can now expose HTTP services using Cloudflare Access. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2578](https://github.com/tenzir/tenzir/pull/2578). #### Emit metrics from the filesystem actor [Section titled “Emit metrics from the filesystem actor”](#emit-metrics-from-the-filesystem-actor) VAST now emits metrics for filesystem access under the keys `posix-filesystem.{checks,writes,reads,mmaps,erases,moves}.{successful,failed,bytes}`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2572](https://github.com/tenzir/tenzir/pull/2572). #### Enable configuration of the zstd compression level for feather store [Section titled “Enable configuration of the zstd compression level for feather store”](#enable-configuration-of-the-zstd-compression-level-for-feather-store) VAST has a new configuration setting, `vast.zstd-compression-level`, to control the compression level of the Zstd algorithm used in both the Feather and Parquet store backends. The default level is set by the Apache Arrow library, and for Parquet is no longer explicitly defaulted to `9`. By [@dispanser](https://github.com/dispanser) in [#2623](https://github.com/tenzir/tenzir/pull/2623). #### PRs 2574-2652 [Section titled “PRs 2574-2652”](#prs-2574-2652) VAST now ships a Docker Compose file. In particular, the Docker Compose stack now has a TheHive integration that can run VAST queries as a Cortex Analyzer. By [@KaanSK](https://github.com/KaanSK) in [#2574](https://github.com/tenzir/tenzir/pull/2574). ### Changes [Section titled “Changes”](#changes) #### Move the version string into a central JSON file [Section titled “Move the version string into a central JSON file”](#move-the-version-string-into-a-central-json-file) Building VAST from source now requires CMake 3.19 or greater. By [@tobim](https://github.com/tobim) in [#2582](https://github.com/tenzir/tenzir/pull/2582). #### Make `feather` the default store-backend [Section titled “Make feather the default store-backend”](#make-feather-the-default-store-backend) The default store backend of VAST is now `feather`. Reading from VAST’s custom `segment-store` backend is still transparently supported, but new partitions automatically write to the Apache Feather V2 backend instead. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2587](https://github.com/tenzir/tenzir/pull/2587). #### Change default endpoint to 127.0.0.1 [Section titled “Change default endpoint to 127.0.0.1”](#change-default-endpoint-to-127001) We changed the default VAST endpoint from `localhost` to `127.0.0.1`. This ensures the listening address is deterministic and not dependent on the host-specific IPv4 and IPv6 resolution. For example, resolving `localhost` yields a list of addresses, and if VAST fails to bind on the first (e.g., to due to a lingering socket) it would silently go to the next. Taking name resolution out of the equation fixes such issues. Set the option `vast.endpoint` to override the default endpoint. By [@lava](https://github.com/lava) in [#2512](https://github.com/tenzir/tenzir/pull/2512). #### Load “all” plugins by default & allow “empty” values [Section titled “Load “all” plugins by default & allow “empty” values”](#load-all-plugins-by-default--allow-empty-values) VAST now loads all plugins by default. To revert to the old behavior, explicitly set the `vast.plugins` option to have no value. By [@Dakostu](https://github.com/Dakostu) in [#2689](https://github.com/tenzir/tenzir/pull/2689). #### Add memory-usage to index and catalog telemetry reports [Section titled “Add memory-usage to index and catalog telemetry reports”](#add-memory-usage-to-index-and-catalog-telemetry-reports) VAST now emits per-component memory usage metrics under the keys `index.memory-usage` and `catalog.memory-usage`. By [@patszt](https://github.com/patszt) in [#2471](https://github.com/tenzir/tenzir/pull/2471). #### Remove PyVAST in favor of new Python bindings [Section titled “Remove PyVAST in favor of new Python bindings”](#remove-pyvast-in-favor-of-new-python-bindings) We removed PyVAST from the code base in favor of the new Python bindings. PyVAST continues to work as a thin wrapper around the VAST binary, but will no longer be released alongside VAST. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2674](https://github.com/tenzir/tenzir/pull/2674). #### Rename `vast dump` to `vast show` [Section titled “Rename vast dump to vast show”](#rename-vast-dump-to-vast-show) The `vast dump` command is now called `vast show`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2686](https://github.com/tenzir/tenzir/pull/2686). #### Arrow 10.0.0 support [Section titled “Arrow 10.0.0 support”](#arrow-1000-support) Building VAST from source now requires [Apache Arrow 10.0](https://arrow.apache.org/blog/2022/10/31/10.0.0-release/) or newer. By [@Dakostu](https://github.com/Dakostu) in [#2685](https://github.com/tenzir/tenzir/pull/2685). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Add a timeout to the UDS metric sink [Section titled “Add a timeout to the UDS metric sink”](#add-a-timeout-to-the-uds-metric-sink) The UDS metrics sink no longer deadlocks due to suspended listeners. By [@tobim](https://github.com/tobim) in [#2635](https://github.com/tenzir/tenzir/pull/2635). #### Remove caf::skip usages [Section titled “Remove caf::skip usages”](#remove-cafskip-usages) Rebuilding of heterogeneous partition no longer freezes the entire rebuilder on pipeline failures. By [@patszt](https://github.com/patszt) in [#2530](https://github.com/tenzir/tenzir/pull/2530). #### Fix a connection error message [Section titled “Fix a connection error message”](#fix-a-connection-error-message) The error message on connection failure now contains a correctly formatted target endpoint. By [@tobim](https://github.com/tobim) in [#2609](https://github.com/tenzir/tenzir/pull/2609). #### Remove the shutdown grace period [Section titled “Remove the shutdown grace period”](#remove-the-shutdown-grace-period) VAST no longer attempts to hard-kill itself if the shutdown did not finish within the configured grace period. The option `vast.shutdown-grace-period` no longer exists. We recommend setting `TimeoutStopSec=180` in the VAST systemd service definition to restore the previous behavior. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2568](https://github.com/tenzir/tenzir/pull/2568). #### Don’t abort startup if individual partitions fail to load [Section titled “Don’t abort startup if individual partitions fail to load”](#dont-abort-startup-if-individual-partitions-fail-to-load) VAST now skips unreadable partitions while starting up, instead of aborting the initialization routine. By [@tobim](https://github.com/tobim) in [#2515](https://github.com/tenzir/tenzir/pull/2515). #### Allow read access to user home dir in the systemd unit [Section titled “Allow read access to user home dir in the systemd unit”](#allow-read-access-to-user-home-dir-in-the-systemd-unit) The systemd service no longer fails if the home directory of the vast user is not in `/var/lib/vast`. By [@tobim](https://github.com/tobim) in [#2734](https://github.com/tenzir/tenzir/pull/2734). #### Clear failed partitions from the cache [Section titled “Clear failed partitions from the cache”](#clear-failed-partitions-from-the-cache) VAST now ejects partitions from the LRU cache if they fail to load with an I/O error. By [@lava](https://github.com/lava) in [#2642](https://github.com/tenzir/tenzir/pull/2642).

# VAST v2.4.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v2.4.1). ### Features [Section titled “Features”](#features) #### Make feather stores read incrementally [Section titled “Make feather stores read incrementally”](#make-feather-stores-read-incrementally) VAST’s Feather store now yields initial results much faster and performs better when running queries affecting a large number of partitions by doing smaller incremental disk reads as needed rather than one large disk read upfront. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2805](https://github.com/tenzir/tenzir/pull/2805).

# VAST v2.4.2

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v2.4.2). ### Changes [Section titled “Changes”](#changes) #### Reduce conflict potential between rebuilding and queries [Section titled “Reduce conflict potential between rebuilding and queries”](#reduce-conflict-potential-between-rebuilding-and-queries) VAST’s rebuilding and compaction features now interfere less with queries. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3047](https://github.com/tenzir/tenzir/pull/3047).

# VAST v3.0.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v3.0.0). ### Features [Section titled “Features”](#features) #### Add `vast import arrow` enabling ingestion of arrow IPC format [Section titled “Add vast import arrow enabling ingestion of arrow IPC format”](#add-vast-import-arrow-enabling-ingestion-of-arrow-ipc-format) VAST now imports Arrow IPC data, which is the same format it already supports for export. By [@dispanser](https://github.com/dispanser) in [#2707](https://github.com/tenzir/tenzir/pull/2707). #### Add CORS preflight request handling [Section titled “Add CORS preflight request handling”](#add-cors-preflight-request-handling) The experimental web frontend now correctly responds to CORS preflight requests. To configure CORS behavior, the new `vast.web.cors-allowed-origin` config option can be used. By [@lava](https://github.com/lava) in [#2944](https://github.com/tenzir/tenzir/pull/2944). #### Support pattern case insensitivity in Sigma plugin [Section titled “Support pattern case insensitivity in Sigma plugin”](#support-pattern-case-insensitivity-in-sigma-plugin) The `sigma` plugin now treats Sigma strings as case-insensitive patterns during the transpilation process. By [@Dakostu](https://github.com/Dakostu) in [#2974](https://github.com/tenzir/tenzir/pull/2974). #### Make it easy to create docker images with Nix [Section titled “Make it easy to create docker images with Nix”](#make-it-easy-to-create-docker-images-with-nix) We now offer a `tenzir/vast-slim` image as an alternative to the `tenzir/vast` image. The image is minimal in size and supports the same features as the regular image, but does not support building additional plugins against it and mounting in additional plugins. By [@tobim](https://github.com/tobim) in [#2742](https://github.com/tenzir/tenzir/pull/2742). #### Add ‘pseudonymize’ pipeline operator [Section titled “Add ‘pseudonymize’ pipeline operator”](#add-pseudonymize-pipeline-operator) The new `pseudonymize` pipeline operator pseudonymizes IP addresses in user-specified fields. By [@Dakostu](https://github.com/Dakostu) in [#2719](https://github.com/tenzir/tenzir/pull/2719). #### Implement support for `:string == /pattern/` queries [Section titled “Implement support for :string == /pattern/ queries”](#implement-support-for-string--pattern-queries) Queries of the forms `:string == /pattern/`, `field == /pattern/`, `#type == /pattern/`, and their respective negations now work as expected. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2769](https://github.com/tenzir/tenzir/pull/2769). #### Add options to omit empty values when exporting as JSON [Section titled “Add options to omit empty values when exporting as JSON”](#add-options-to-omit-empty-values-when-exporting-as-json) The JSON export format gained the options `--omit-empty-records`, `--omit-empty-lists`, and `--omit-empty-maps`, which cause empty records, lists, and maps not to be rendered respectively. The options may be combined together with the existing `--omit-nulls` option. Use `--omit-empty` to set all four flags at once. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2856](https://github.com/tenzir/tenzir/pull/2856). #### Add ‘pipeline’ parameter and schematized format to export endpoint [Section titled “Add ‘pipeline’ parameter and schematized format to export endpoint”](#add-pipeline-parameter-and-schematized-format-to-export-endpoint) The `/export` family of endpoints now accepts an optional `pipeline` parameter to specify an ad-hoc pipeline that should be applied to the exported data. By [@lava](https://github.com/lava) in [#2773](https://github.com/tenzir/tenzir/pull/2773). #### Support case insensitivity in patterns [Section titled “Support case insensitivity in patterns”](#support-case-insensitivity-in-patterns) Patterns now support case insensitivity by adding `i` to the pattern string, e.g. `/^\w{3}$/i`. By [@Dakostu](https://github.com/Dakostu) in [#2951](https://github.com/tenzir/tenzir/pull/2951). #### Add a new /openapi.json endpoint to the web plugin [Section titled “Add a new /openapi.json endpoint to the web plugin”](#add-a-new-openapijson-endpoint-to-the-web-plugin) The experimental web plugin now serves its own API specification at the new ‘/openapi.json’ endpoint. By [@lava](https://github.com/lava) in [#2981](https://github.com/tenzir/tenzir/pull/2981). #### Eliminate shutdown lag from the signal monitor [Section titled “Eliminate shutdown lag from the signal monitor”](#eliminate-shutdown-lag-from-the-signal-monitor) The new `/query` endpoint for the experimental REST API allows users to receive query data in multiple steps, as opposed to a oneshot export. By [@tobim](https://github.com/tobim) in [#2766](https://github.com/tenzir/tenzir/pull/2766). #### Implement `head` and `taste` operators [Section titled “Implement head and taste operators”](#implement-head-and-taste-operators) The new `head` and `taste` operators limit results to the specified number of events. The `head` operator applies this limit for all events, and the `taste` operator applies it per schema. Both operators take the limit as an optional argument, with the default value being 10. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2891](https://github.com/tenzir/tenzir/pull/2891). #### PRs 2877-2904-2907 [Section titled “PRs 2877-2904-2907”](#prs-2877-2904-2907) The `export` and `import` commands now support an optional pipeline string that allows for chaining pipeline operators together and executing such a pipeline on outgoing and incoming data. This feature is experimental and the syntax is subject to change without notice. New operators are only available in the new pipeline syntax, and the old YAML syntax is deprecated. By [@Dakostu](https://github.com/Dakostu) in [#2877](https://github.com/tenzir/tenzir/pull/2877). #### Add extractor predicates [Section titled “Add extractor predicates”](#add-extractor-predicates) Extractors such as `x` and `:T` can now expand to the predicates `x != null` and `:T != null`, respectively. By [@jachris](https://github.com/jachris) in [#2984](https://github.com/tenzir/tenzir/pull/2984). #### Implement a retry mechanism for VAST clients failing to connect to the server [Section titled “Implement a retry mechanism for VAST clients failing to connect to the server”](#implement-a-retry-mechanism-for-vast-clients-failing-to-connect-to-the-server) We changed VAST client processes to attempt connecting to a VAST server multiple times until the configured connection timeout (`vast.connection-timeout`, defaults to 5 minutes) runs out. A fixed delay between connection attempts (`vast.connection-retry-delay`, defaults to 3 seconds) ensures that clients to not stress the server too much. Set the connection timeout to zero to let VAST client attempt connecting indefinitely, and the delay to zero to disable the retry mechanism. By [@patszt](https://github.com/patszt) in [#2835](https://github.com/tenzir/tenzir/pull/2835). #### Install Python bindings along with VAST [Section titled “Install Python bindings along with VAST”](#install-python-bindings-along-with-vast) VAST installations and packages now include Python bindings in a site-package under `<install-prefix>/lib/python*/site-packages/vast`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2636](https://github.com/tenzir/tenzir/pull/2636). #### Add CEF reader plugin [Section titled “Add CEF reader plugin”](#add-cef-reader-plugin) The `cef` import format allows for reading events in the Common Event Format (CEF) via `vast import cef < cef.log`. By [@mavam](https://github.com/mavam) in [#2216](https://github.com/tenzir/tenzir/pull/2216). ### Changes [Section titled “Changes”](#changes) #### Add ‘pseudonymize’ pipeline operator [Section titled “Add ‘pseudonymize’ pipeline operator”](#add-pseudonymize-pipeline-operator-1) OpenSSL is now a required dependency. By [@Dakostu](https://github.com/Dakostu) in [#2719](https://github.com/tenzir/tenzir/pull/2719). #### Remove broker plugin [Section titled “Remove broker plugin”](#remove-broker-plugin) We removed the broker plugin that enabled direct Zeek 3.x log transfer to VAST. The plugin will return in the future rewritten for Zeek 5+. By [@patszt](https://github.com/patszt) in [#2796](https://github.com/tenzir/tenzir/pull/2796). #### PRs 2769-2873 [Section titled “PRs 2769-2873”](#prs-2769-2873) The match operator `~`, its negation `!~`, and the `pattern` type no longer exist. Use queries of the forms `lhs == /rhs/` and `lhs != /rhs/` instead for queries using regular expressions. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2769](https://github.com/tenzir/tenzir/pull/2769). #### Replace ‘nil’ with ‘null’ [Section titled “Replace ‘nil’ with ‘null’”](#replace-nil-with-null) The non-value literal in expressions has a new syntax: `null` replaces its old representation `nil`. For example, the query `x != nil` is no longer valid; use `x != null` instead. By [@Dakostu](https://github.com/Dakostu) in [#2999](https://github.com/tenzir/tenzir/pull/2999). #### Deprecate `vast.pipeline-triggers` [Section titled “Deprecate vast.pipeline-triggers”](#deprecate-vastpipeline-triggers) The `vast.pipeline-triggers` option is deprecated; while it continues to work as-is, support for it will be removed in the next release. Use the new inline import and export pipelines instead. They will return as more generally applicable node ingress and egress pipelines in the future. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3008](https://github.com/tenzir/tenzir/pull/3008). #### Remove the `#field` meta extractor [Section titled “Remove the #field meta extractor”](#remove-the-field-meta-extractor) The `#field` meta extractor no longer exists. Use `X != null` over `#field == "X"` to check for existence for the field `X`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2776](https://github.com/tenzir/tenzir/pull/2776). #### Rename count, int, real, and addr to uint64, int64, double, and ip respectively [Section titled “Rename count, int, real, and addr to uint64, int64, double, and ip respectively”](#rename-count-int-real-and-addr-to-uint64-int64-double-and-ip-respectively) The builtin types `count`, `int`, `real`, and `addr` were renamed to `uint64`, `int64`, `double`, and `ip` respectively. For backwards-compatibility, VAST still supports parsing the old type tokens in schema files. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2864](https://github.com/tenzir/tenzir/pull/2864). #### Use CAF streaming in export command [Section titled “Use CAF streaming in export command”](#use-caf-streaming-in-export-command) The `explore` and `pivot` commands are now unavailable. They will be reintroduced as pipeline operators in the future. By [@patszt](https://github.com/patszt) in [#2898](https://github.com/tenzir/tenzir/pull/2898). #### Introduce a potpourri of smaller improvements [Section titled “Introduce a potpourri of smaller improvements”](#introduce-a-potpourri-of-smaller-improvements) Plugin names are now case-insensitive. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2832](https://github.com/tenzir/tenzir/pull/2832). #### Introduce a potpourri of smaller improvements [Section titled “Introduce a potpourri of smaller improvements”](#introduce-a-potpourri-of-smaller-improvements-1) VAST now ignores the previously deprecated options `vast.meta-index-fp-rate`, `vast.catalog-fp-rate`, `vast.transforms` and `vast.transform-triggers`. Similarly, setting `vast.store-backend` to `segment-store` now results in an error rather than a graceful fallback to the default store. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2832](https://github.com/tenzir/tenzir/pull/2832). #### Provide an Ansible role for VAST [Section titled “Provide an Ansible role for VAST”](#provide-an-ansible-role-for-vast) VAST now comes with a role definition for Ansible. You can find it directly in the `ansible` subdirectory. By [@tobim](https://github.com/tobim) in [#2604](https://github.com/tenzir/tenzir/pull/2604). #### Rename `identity` operator to `pass` [Section titled “Rename identity operator to pass”](#rename-identity-operator-to-pass) We renamed the `identity` operator to `pass`. By [@jachris](https://github.com/jachris) in [#2980](https://github.com/tenzir/tenzir/pull/2980). #### PRs 2922-2927 [Section titled “PRs 2922-2927”](#prs-2922-2927) We removed the frontend prototype bundled with the web plugin Some parts of the frontend that we have in development are designed to be closed-source, and it is easier to develop at the current development stage in a single repository that is not bound to the release process of VAST itself. An open-source version of the frontend may return in the future. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2922](https://github.com/tenzir/tenzir/pull/2922). #### Update response format of the /export endpoint [Section titled “Update response format of the /export endpoint”](#update-response-format-of-the-export-endpoint) For the experimental REST API, the result format of the `/export` endpoint was modified: The `num_events` key was renamed to `num-events`, and the `version` key was removed. By [@lava](https://github.com/lava) in [#2899](https://github.com/tenzir/tenzir/pull/2899). #### Change boolean literals to `true` and `false` [Section titled “Change boolean literals to true and false”](#change-boolean-literals-to-true-and-false) Boolean literals in expressions have a new syntax: `true` and `false` replace the old representations `T` and `F`. For example, the query `suricata.alert.alerted == T` is no longer valid; use `suricata.alert.alerted == true` instead. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2844](https://github.com/tenzir/tenzir/pull/2844). #### Make the map type inaccessible to users [Section titled “Make the map type inaccessible to users”](#make-the-map-type-inaccessible-to-users) The `map` type no longer exists: instead of `map<T, U>`, use the equivalent `list<record{ key: T, value: U }>`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2976](https://github.com/tenzir/tenzir/pull/2976). #### Switch default TCP port to 5158 [Section titled “Switch default TCP port to 5158”](#switch-default-tcp-port-to-5158) From now on VAST will use TCP port 5158 for its native inter process communication. This change avoids collisions from dynamic port allocation on Linux systems. By [@tobim](https://github.com/tobim) in [#2998](https://github.com/tenzir/tenzir/pull/2998). #### PRs 2807-2848 [Section titled “PRs 2807-2848”](#prs-2807-2848) Blocking imports now imply that ingested data gets persisted to disk before the the `vast import` process exits. By [@tobim](https://github.com/tobim) in [#2807](https://github.com/tenzir/tenzir/pull/2807). #### Remove the /export endpoint [Section titled “Remove the /export endpoint”](#remove-the-export-endpoint) The REST API does not contain the `/export` and `/export/with-schemas` endpoints anymore. Any previous queries using those endpoints have to be sent to the `/query` endpoint now. By [@Dakostu](https://github.com/Dakostu) in [#2990](https://github.com/tenzir/tenzir/pull/2990). #### Merge the type-registry into the catalog [Section titled “Merge the type-registry into the catalog”](#merge-the-type-registry-into-the-catalog) `vast status` no longer shows type registry-related information. Instead, refer to `vast show` for detailed type metadata information. By [@Dakostu](https://github.com/Dakostu) in [#2745](https://github.com/tenzir/tenzir/pull/2745). #### PRs 2693-2923 [Section titled “PRs 2693-2923”](#prs-2693-2923) Building VAST now requires CAF 0.18.7. VAST supports setting advanced options for CAF directly in its configuration file under the `caf` section. If you were using any of these, compare them against the bundled `vast.yaml.example` file to see if you need to make any changes. The change has (mostly positive) [performance and stability implications](https://www.actor-framework.org/blog/2021-01/benchmarking-0.18/) throughout VAST, especially in high-load scenarios. By [@patszt](https://github.com/patszt) in [#2693](https://github.com/tenzir/tenzir/pull/2693). #### Align output of the Zeek TSV reader with schemas [Section titled “Align output of the Zeek TSV reader with schemas”](#align-output-of-the-zeek-tsv-reader-with-schemas) The bundled Zeek schema no longer includes the `_path` field included in Zeek JSON. Use `#type == "zeek.foo"` over `_path == "foo"` for querying data ingested using `vast import zeek-json`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2887](https://github.com/tenzir/tenzir/pull/2887). #### PRs 2778-2797-2798 [Section titled “PRs 2778-2797-2798”](#prs-2778-2797-2798) VAST no longer supports reading partitions created with VAST versions older than VAST v2.2. Since VAST v2.2, VAST continuously upgrades old partitions to the most recent internal format while running. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2778](https://github.com/tenzir/tenzir/pull/2778). #### Move event distribution statistics to the catalog [Section titled “Move event distribution statistics to the catalog”](#move-event-distribution-statistics-to-the-catalog) The per-schema event distribution moved from `index.statistics.layouts` to `catalog.schemas`, and additionally includes information about the import time range and the number of partitions VAST knows for the schema. The number of events per schema no longer includes events that are yet unpersisted. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2852](https://github.com/tenzir/tenzir/pull/2852). #### Move taxonomy resolution to the catalog [Section titled “Move taxonomy resolution to the catalog”](#move-taxonomy-resolution-to-the-catalog) `vast status` does not work anymore with an embedded node (i.e., spawned with the `-N` parameter). By [@Dakostu](https://github.com/Dakostu) in [#2771](https://github.com/tenzir/tenzir/pull/2771). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix rounding issue when printing duration types [Section titled “Fix rounding issue when printing duration types”](#fix-rounding-issue-when-printing-duration-types) We fixed incorrect printing of human-readable durations in some edge cases. E.g., the value 1.999s was rendered as 1.1s instead of the expected 2.0s. This bug affected the JSON and CSV export formats, and all durations printed in log messages or the status command. By [@patszt](https://github.com/patszt) in [#2906](https://github.com/tenzir/tenzir/pull/2906). #### Fix linux PID file check on startup [Section titled “Fix linux PID file check on startup”](#fix-linux-pid-file-check-on-startup) VAST no longer ignores existing PID lock files on Linux. By [@lava](https://github.com/lava) in [#2861](https://github.com/tenzir/tenzir/pull/2861). #### Add a workaround to fix CAF OpenSSL options [Section titled “Add a workaround to fix CAF OpenSSL options”](#add-a-workaround-to-fix-caf-openssl-options) Options passed in the `caf.openssl` section in the configuration file or as `VAST_CAF__OPENSSL__*` environment variables are no longer ignored. By [@tobim](https://github.com/tobim) in [#2908](https://github.com/tenzir/tenzir/pull/2908). #### Align output of the Zeek TSV reader with schemas [Section titled “Align output of the Zeek TSV reader with schemas”](#align-output-of-the-zeek-tsv-reader-with-schemas-1) The Zeek TSV reader now respects the schema files in the bundled `zeek.schema` file, and produces data of the same schema as the Zeek JSON reader. E.g., instead of producing a top-level ip field `id.orig_h`, the reader now produces a top-level record field `id` that contains the ip field `orig_h`, effectively unflattening the data. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2887](https://github.com/tenzir/tenzir/pull/2887). #### Prevent query\_processor from hanging when there are no candidate partitions [Section titled “Prevent query\_processor from hanging when there are no candidate partitions”](#prevent-query_processor-from-hanging-when-there-are-no-candidate-partitions) The VAST client will now terminate properly when using the `count` command with a query which delivers zero results. By [@Dakostu](https://github.com/Dakostu) in [#2924](https://github.com/tenzir/tenzir/pull/2924). #### Run start commands asynchronously [Section titled “Run start commands asynchronously”](#run-start-commands-asynchronously) The start commands specified with the `vast.start.commands` option are now run aynchronously. This means that commands that block indefinitely will no longer prevent execution of subsequent commands, and allow for correct signal handling. By [@lava](https://github.com/lava) in [#2868](https://github.com/tenzir/tenzir/pull/2868). #### Bump CAF to version 0.18.6 [Section titled “Bump CAF to version 0.18.6”](#bump-caf-to-version-0186) Attempting to connect with thousands of clients around the same time sometimes crashed the VAST server. This no longer occurs. By [@patszt](https://github.com/patszt) in [#2693](https://github.com/tenzir/tenzir/pull/2693). #### Remove the transformer actor [Section titled “Remove the transformer actor”](#remove-the-transformer-actor) Pipelines that reduce the number of events do not prevent `vast export` processes that have a `max-events` limit from terminating any more. By [@Dakostu](https://github.com/Dakostu) in [#2896](https://github.com/tenzir/tenzir/pull/2896). #### Infer non-config types in extend and replace operators [Section titled “Infer non-config types in extend and replace operators”](#infer-non-config-types-in-extend-and-replace-operators) The `replace` and `extend` pipeline operators wrongly inferred IP address, subnet, pattern, and map values as strings. They are now inferred correctly. To force a value to be inferred as a string, wrap it inside double quotes. By [@dominiklohmann](https://github.com/dominiklohmann) in [#2768](https://github.com/tenzir/tenzir/pull/2768). #### Trigger new compaction runs immediately on error [Section titled “Trigger new compaction runs immediately on error”](#trigger-new-compaction-runs-immediately-on-error) Compaction now retries immediately on failure instead of waiting for the configured scan interval to expire again. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3006](https://github.com/tenzir/tenzir/pull/3006). #### Fix some shutdown issues in the web plugin [Section titled “Fix some shutdown issues in the web plugin”](#fix-some-shutdown-issues-in-the-web-plugin) The web plugin now reacts correctly to CTRL-C by stopping itself. By [@lava](https://github.com/lava) in [#2860](https://github.com/tenzir/tenzir/pull/2860). #### Fix infinite recursion in the record algebra parser [Section titled “Fix infinite recursion in the record algebra parser”](#fix-infinite-recursion-in-the-record-algebra-parser) VAST no longer crashes when it encounters an invalid type expression in a schema. By [@tobim](https://github.com/tobim) in [#2977](https://github.com/tenzir/tenzir/pull/2977). #### Introduce a potpourri of smaller improvements [Section titled “Introduce a potpourri of smaller improvements”](#introduce-a-potpourri-of-smaller-improvements-2) VAST now shuts down instantly when metrics are enabled instead of being held alive for up to the duration of the telemetry interval (10 seconds). By [@dominiklohmann](https://github.com/dominiklohmann) in [#2832](https://github.com/tenzir/tenzir/pull/2832).

# VAST v3.0.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v3.0.1). ### Features [Section titled “Features”](#features) #### Allow `/* ... */` comments in the VAST language [Section titled “Allow /\* ... \*/ comments in the VAST language”](#allow----comments-in-the-vast-language) The VAST language now supports comments using the familiar `/* comment */` notation. This makes it easy to document multi-line pipelines inline. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3011](https://github.com/tenzir/tenzir/pull/3011). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Include outdated but not undersized partitions in automatic rebuilds [Section titled “Include outdated but not undersized partitions in automatic rebuilds”](#include-outdated-but-not-undersized-partitions-in-automatic-rebuilds) Automatic partition rebuilding both updates partitions with an outdated storage format and merges undersized partitions continuously in the background. This now also works as expected for outdated but not undersized partitions. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3020](https://github.com/tenzir/tenzir/pull/3020). #### Avoid crashing when reading a pre-2.0 partition [Section titled “Avoid crashing when reading a pre-2.0 partition”](#avoid-crashing-when-reading-a-pre-20-partition) VAST no longer crashes when reading an unsupported partition from VAST v1.x. Instead, the partition is ignored correctly. Since v2.2 VAST automatically rebuilds partitions in the background to ensure compatibility. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3018](https://github.com/tenzir/tenzir/pull/3018).

# VAST v3.0.2

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v3.0.2). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix usage of moved from variable in rebuild metrics [Section titled “Fix usage of moved from variable in rebuild metrics”](#fix-usage-of-moved-from-variable-in-rebuild-metrics) VAST no longer miscalculates the `rebuild` metrics. By [@patszt](https://github.com/patszt) in [#3026](https://github.com/tenzir/tenzir/pull/3026).

# VAST v3.0.3

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v3.0.3). ### Features [Section titled “Features”](#features) #### PRs 3004-3010 [Section titled “PRs 3004-3010”](#prs-3004-3010) The new `vast exec` command executes a pipeline locally. It takes a single argument representing a closed pipeline, and immediately executes it. This is the foundation for a new, pipeline-first VAST, in which most operations are expressed as pipelines. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3004](https://github.com/tenzir/tenzir/pull/3004). ### Changes [Section titled “Changes”](#changes) #### Reduce conflict potential between rebuilding and queries [Section titled “Reduce conflict potential between rebuilding and queries”](#reduce-conflict-potential-between-rebuilding-and-queries) VAST’s rebuilding and compaction features now interfere less with queries. This patch was also backported as [VAST v2.4.2](https://vast.io/changelog#v242) to enable a smoother upgrade from to VAST v3.x. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3047](https://github.com/tenzir/tenzir/pull/3047). #### Add Boost as a dependency [Section titled “Add Boost as a dependency”](#add-boost-as-a-dependency) VAST now depends on the Boost C++ libraries. By [@tobim](https://github.com/tobim) in [#3043](https://github.com/tenzir/tenzir/pull/3043).

# VAST v3.0.4

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v3.0.4). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix partition selection for the `rebuild` command [Section titled “Fix partition selection for the rebuild command”](#fix-partition-selection-for-the-rebuild-command) Automatic rebuilds now correctly consider only outdated or undersized partitions. The `--all` flag for the `rebuild` command now consistently causes all partitions to be rebuilt, aligning its functionality with its documentation. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3083](https://github.com/tenzir/tenzir/pull/3083).

# VAST v3.1.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v3.1.0). ### Features [Section titled “Features”](#features) #### Introduce a `version` source operator [Section titled “Introduce a version source operator”](#introduce-a-version-source-operator) The `vast exec` command now supports implicit sinks for pipelines that end in events or bytes: `write json --pretty` and `save file -`, respectively. The `--pretty` option for the JSON printer enables multi-line output. The new `version` source operator yields a single event containing VAST’s version and a list of enabled plugins. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3123](https://github.com/tenzir/tenzir/pull/3123). #### Implement the `measure` operator [Section titled “Implement the measure operator”](#implement-the-measure-operator) The `inspect` operator replaces the events or bytes it receives with incremental metrics describing the input. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3093](https://github.com/tenzir/tenzir/pull/3093). #### PRs 3036-3039-3089 [Section titled “PRs 3036-3039-3089”](#prs-3036-3039-3089) The `put` operator is the new companion to the existing `extend` and `replace` operators. It specifies the output fields exactly, referring either to input fields with an extractor, metadata with a selector, or a fixed value. The `extend` and `replace` operators now support assigning extractors and selectors in addition to just fixed values. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3036](https://github.com/tenzir/tenzir/pull/3036). #### Add `directory` saver [Section titled “Add directory saver”](#add-directory-saver) The new `directory` sink creates a directory with a file for each schema in the specified format. By [@Dakostu](https://github.com/Dakostu) in [#3098](https://github.com/tenzir/tenzir/pull/3098). #### Introduce the `count_distinct` aggregation function [Section titled “Introduce the count\_distinct aggregation function”](#introduce-the-count_distinct-aggregation-function) The `count_distinct` aggregation function returns the number of distinct, non-null values. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3068](https://github.com/tenzir/tenzir/pull/3068). #### Expose the lower-level `load`, `parse`, `print`, and `save` operators [Section titled “Expose the lower-level load, parse, print, and save operators”](#expose-the-lower-level-load-parse-print-and-save-operators) The new `from <connector> [read <format>]`, `read <format> [from <connector>]`, `write <format> [to <connector>]`, and `to <connector> [write <format>]` operators bring together a connector and a format to prduce and consume events, respectively. Their lower-level building blocks `load <connector>`, `parse <format>`, `print <format>`, and `save <connector>` enable expert users to operate on raw byte streams directly. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3079](https://github.com/tenzir/tenzir/pull/3079). #### Add `unique` operator [Section titled “Add unique operator”](#add-unique-operator) The newly-added `unique` operator removes adjacent duplicates. By [@jachris](https://github.com/jachris) in [#3051](https://github.com/tenzir/tenzir/pull/3051). #### Add Feather and Parquet parsers and printers [Section titled “Add Feather and Parquet parsers and printers”](#add-feather-and-parquet-parsers-and-printers) The `feather` and `parquet` formats allow for reading and writing events from and to the Apache Feather V2 and Apache Parquet files, respectively. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3103](https://github.com/tenzir/tenzir/pull/3103). #### Implement `xsv` parser & printer [Section titled “Implement xsv parser & printer”](#implement-xsv-parser--printer) The `xsv` format enables the user to parse and print character-separated values, with the additional `csv`, `tsv` and `ssv` formats as sane defaults. By [@Dakostu](https://github.com/Dakostu) in [#3104](https://github.com/tenzir/tenzir/pull/3104). #### Implement a distributed pipeline executor [Section titled “Implement a distributed pipeline executor”](#implement-a-distributed-pipeline-executor) Pipelines may now span across multiple processes. This will enable upcoming operators that do not just run locally in the `vast exec` process, but rather connect to a VAST node and partially run in that node. The new operator modifiers `remote` and `local` allow expert users to control where parts of their pipeline run explicitly, e.g., to offload compute to a more powerful node. Potentially unsafe use of these modifiers requires setting `vast.allow-unsafe-pipelines` to `true` in the configuration file. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3119](https://github.com/tenzir/tenzir/pull/3119). #### Add new CEF parser plugin [Section titled “Add new CEF parser plugin”](#add-new-cef-parser-plugin) The `cef` parser allows for using the CEF format with the new pipelines. By [@jachris](https://github.com/jachris) in [#3110](https://github.com/tenzir/tenzir/pull/3110). #### Upgrade exporter to use new pipelines [Section titled “Upgrade exporter to use new pipelines”](#upgrade-exporter-to-use-new-pipelines) The `vast export` command now accepts the new pipelines as input. Furthermore, `vast export <expr>` is now deprecated in favor of `vast export 'where <expr>'`. By [@jachris](https://github.com/jachris) in [#3076](https://github.com/tenzir/tenzir/pull/3076). #### Implement a `zeek-tsv` format [Section titled “Implement a zeek-tsv format”](#implement-a-zeek-tsv-format) The `zeek-tsv` format parses and prints Zeek’s native tab-separated value (TSV) representation of logs. By [@Dakostu](https://github.com/Dakostu) in [#3114](https://github.com/tenzir/tenzir/pull/3114). #### Upgrade partition transformer to new pipelines [Section titled “Upgrade partition transformer to new pipelines”](#upgrade-partition-transformer-to-new-pipelines) User-defined operator aliases make pipelines easier to use by enabling users to encapsulate a pipelinea into a new operator. To define a user-defined operator alias, add an entry to the `vast.operators` section of your configuration. Compaction now makes use of the new pipeline operators, and allows pipelines to be defined inline instead in addition to the now deprecated `vast.pipelines` configuration section. By [@jachris](https://github.com/jachris) in [#3064](https://github.com/tenzir/tenzir/pull/3064). #### Add `tail` operator [Section titled “Add tail operator”](#add-tail-operator) The new `tail` pipeline operator limits all latest events to a specified number. The operator takes the limit as an optional argument, with the default value being 10. By [@Dakostu](https://github.com/Dakostu) in [#3050](https://github.com/tenzir/tenzir/pull/3050). #### PRs 3085-3088-3097 [Section titled “PRs 3085-3088-3097”](#prs-3085-3088-3097) The new `file` connector enables the user to process file input/output as data in a pipeline. This includes regular files, UDS files as well as `stdin/stdout`. By [@jachris](https://github.com/jachris) in [#3085](https://github.com/tenzir/tenzir/pull/3085). ### Changes [Section titled “Changes”](#changes) #### Restart the systemd service on failure [Section titled “Restart the systemd service on failure”](#restart-the-systemd-service-on-failure) The bundled systemd service is now configured to restart VAST in case of a failure. By [@tobim](https://github.com/tobim) in [#3058](https://github.com/tenzir/tenzir/pull/3058). #### Add support for user-defined operator aliases [Section titled “Add support for user-defined operator aliases”](#add-support-for-user-defined-operator-aliases) The `vast.operators` section in the configuration file supersedes the now deprecated `vast.pipelines` section and more generally enables user-defined operators. Defined operators now must use the new, textual format introduced with VAST v3.0, and are available for use in all places where pipelines are supported. By [@jachris](https://github.com/jachris) in [#3067](https://github.com/tenzir/tenzir/pull/3067). #### Upgrade exporter to use new pipelines [Section titled “Upgrade exporter to use new pipelines”](#upgrade-exporter-to-use-new-pipelines-1) The `exporter.*` metrics no longer exist, and will return in a future release as a more generic instrumentation mechanism for all pipelines. By [@jachris](https://github.com/jachris) in [#3076](https://github.com/tenzir/tenzir/pull/3076). #### Update query endpoint to use new pipeline executor [Section titled “Update query endpoint to use new pipeline executor”](#update-query-endpoint-to-use-new-pipeline-executor) The `/query` REST endpoint no longer accepts an expression at the start of the query. Instead, use `where <expr> | ...`. By [@jachris](https://github.com/jachris) in [#3015](https://github.com/tenzir/tenzir/pull/3015). #### Remove configuration-defined import/export pipelines [Section titled “Remove configuration-defined import/export pipelines”](#remove-configuration-defined-importexport-pipelines) As already announced with the VAST v3.0 release, the `vast.pipeline-triggers` option now no longer functions. The feature will be replaced with node ingress/egress pipelines that fit better into a multi-node model than the previous feature that was built under the assumption of a client/server model with a single server. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3052](https://github.com/tenzir/tenzir/pull/3052). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Introduce the `count_distinct` aggregation function [Section titled “Introduce the count\_distinct aggregation function”](#introduce-the-count_distinct-aggregation-function-1) The `distinct` function silently performed a different operation on lists, returning the distinct non-null elements in the list rather than operating on the list itself. This special-casing no longer exists, and instead the function now operates on the lists itself. This feature will return in the future as unnesting on the extractor level via `distinct(field[])`, but for now it has to go to make the `distinct` aggregation function work consistently. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3068](https://github.com/tenzir/tenzir/pull/3068). #### Mark some CAF types as nodiscard [Section titled “Mark some CAF types as nodiscard”](#mark-some-caf-types-as-nodiscard) Tokens created with `vast web generate-token` now persist correctly, and work across restarts of VAST. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3086](https://github.com/tenzir/tenzir/pull/3086). #### Fix subnet queries for some subnets [Section titled “Fix subnet queries for some subnets”](#fix-subnet-queries-for-some-subnets) VAST incorrectly handled subnets using IPv6 addresses for which an equivalent IPv4 address existed. This is now done correctly. For example, the query `where :ip !in ::ffff:0:0/96` now returns all events containing an IP address that cannot be represented as an IPv4 address. As an additional safeguard, the VAST language no longer allows for constructing subnets for IPv4 addresses with lengths greater than 32. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3060](https://github.com/tenzir/tenzir/pull/3060). #### Set minimum timestamp of partitions properly [Section titled “Set minimum timestamp of partitions properly”](#set-minimum-timestamp-of-partitions-properly) Some pipelines in compaction caused transformed partitions to be treated as if they were older than they were supposed to be, causing them to be picked up again for deletion too early. This bug no longer exists, and compacted partitions are now considered at most as old as the oldest event before compaction. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3141](https://github.com/tenzir/tenzir/pull/3141). #### Align endpoints between regular and slim Docker images [Section titled “Align endpoints between regular and slim Docker images”](#align-endpoints-between-regular-and-slim-docker-images) The `tenzir/vast` image now listens on `0.0.0.0:5158` instead of `127.0.0.1:5158` by default, which aligns the behavior with the `tenzir/vast-slim` image. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3137](https://github.com/tenzir/tenzir/pull/3137). #### Fix remaining partitions counter in the rebuilder [Section titled “Fix remaining partitions counter in the rebuilder”](#fix-remaining-partitions-counter-in-the-rebuilder) The `rebuilder.partitions.remaining` metric sometimes reported wrong values when partitions for at least one schema did not need to be rebuilt. We aligned the metrics with the actual functionality. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3147](https://github.com/tenzir/tenzir/pull/3147). #### Bump vast-plugins to a95e420 [Section titled “Bump vast-plugins to a95e420”](#bump-vast-plugins-to-a95e420) The matcher plugin no longer causes deadlocks through detached matcher clients. By [@tobim](https://github.com/tobim) in [#3115](https://github.com/tenzir/tenzir/pull/3115).

# Tenzir Node v4.0.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.0.0). ### Features [Section titled “Features”](#features) #### Add the enumerate operator [Section titled “Add the enumerate operator”](#add-the-enumerate-operator) The new `enumerate` operator prepends a column with the row number of the input records. By [@mavam](https://github.com/mavam) in [#3142](https://github.com/tenzir/tenzir/pull/3142). #### Add colors to JSON printer [Section titled “Add colors to JSON printer”](#add-colors-to-json-printer) The `json` printer can now colorize its output by providing the `-C|--color-output` option, and explicitly disable coloring via `-M|--monochrome-output`. By [@mavam](https://github.com/mavam) in [#3343](https://github.com/tenzir/tenzir/pull/3343). #### Add `show` operator [Section titled “Add show operator”](#add-show-operator) The new `show` source operator makes it possible to gather meta information about Tenzir. For example, the provided introspection capabilities allow for emitting existing formats, connectors, and operators. By [@mavam](https://github.com/mavam) in [#3414](https://github.com/tenzir/tenzir/pull/3414). #### Rename `#type` to `#schema` and introduce `#schema_id` [Section titled “Rename #type to #schema and introduce #schema\_id”](#rename-type-to-schema-and-introduce-schema_id) The new `#schema_id` meta extractor returns a unique fingerprint for the schema. By [@jachris](https://github.com/jachris) in [#3183](https://github.com/tenzir/tenzir/pull/3183). #### Expose the `batch` operator underlying rebuild [Section titled “Expose the batch operator underlying rebuild”](#expose-the-batch-operator-underlying-rebuild) The `batch <limit>` operator allows expert users to control batch sizes in pipelines explicitly. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3391](https://github.com/tenzir/tenzir/pull/3391). #### Revamp packet acquisition and parsing [Section titled “Revamp packet acquisition and parsing”](#revamp-packet-acquisition-and-parsing) The new `nic` plugin provides a loader that acquires packets from a network interface card using libpcap. It emits chunks of data in the PCAP file format so that the `pcap` parser can process them as if packets come from a trace file. The new `decapsulate` operator processes events of type `pcap.packet` and emits new events of type `tenzir.packet` that contain the decapsulated PCAP packet with packet header fields from the link, network, and transport layer. The operator also computes a Community ID. By [@mavam](https://github.com/mavam) in [#3263](https://github.com/tenzir/tenzir/pull/3263). #### Add —append and —real-time to directory saver [Section titled “Add —append and —real-time to directory saver”](#add-append-and-real-time-to-directory-saver) The `directory` saver now supports the two arguments `-a|--append` and `-r|--realtime` that have the same semantics as they have for the `file` saver: open files in the directory in append mode (instead of overwriting) and flush the output buffers on every update. By [@mavam](https://github.com/mavam) in [#3379](https://github.com/tenzir/tenzir/pull/3379). #### Use `load -` and `read json` as implicit sources [Section titled “Use load - and read json as implicit sources”](#use-load---and-read-json-as-implicit-sources) Pipelines executed locally with `tenzir` now use `load -` and `read json` as implicit sources. This complements `save -` and `write json --pretty` as implicit sinks. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3329](https://github.com/tenzir/tenzir/pull/3329). #### Fix sporadic stalling of pipelines [Section titled “Fix sporadic stalling of pipelines”](#fix-sporadic-stalling-of-pipelines) The pipeline manager now accepts empty strings for the optional `name`. The `/create` endpoint returns a list of diagnostics if pipeline creation fails, and if `start_when_created` is set, the endpoint now returns only after the pipeline execution has been fully started. The `/list` endpoint now returns the diagnostics collected for every pipeline so far. The `/delete` endpoint now returns an empty object if the request is successful. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3264](https://github.com/tenzir/tenzir/pull/3264). #### Add a `--schema` option to the JSON parser [Section titled “Add a --schema option to the JSON parser”](#add-a---schema-option-to-the-json-parser) The `--schema` option for the JSON parser allows for setting the target schema explicitly by name. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3295](https://github.com/tenzir/tenzir/pull/3295). #### Expose pipeline operator metrics in execution node and pipeline executor [Section titled “Expose pipeline operator metrics in execution node and pipeline executor”](#expose-pipeline-operator-metrics-in-execution-node-and-pipeline-executor) Pipeline metrics (total ingress/egress amount and average rate per second) are now visible in the `pipeline-manager`, via the `metrics` field in the `/pipeline/list` endpoint result. By [@Dakostu](https://github.com/Dakostu) in [#3376](https://github.com/tenzir/tenzir/pull/3376). #### Implement `top` and `rare` [Section titled “Implement top and rare”](#implement-top-and-rare) The `top <field>` operator makes it easy to find the most common values for the given field. Likewise, `rare <field>` returns the least common values for the given field. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3176](https://github.com/tenzir/tenzir/pull/3176). #### Implement the `unflatten` operator [Section titled “Implement the unflatten operator”](#implement-the-unflatten-operator) The `unflatten [<separator>]` operator unflattens data structures by creating nested records out of fields whose names contain a `<separator>`. By [@Dakostu](https://github.com/Dakostu) in [#3304](https://github.com/tenzir/tenzir/pull/3304). #### Implement a `sort` operator [Section titled “Implement a sort operator”](#implement-a-sort-operator) The new `sort` operator allows for arranging events by field, in ascending and descending order. The current version is still “beta” and has known limitations. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3155](https://github.com/tenzir/tenzir/pull/3155). #### Add a `--cumulative` option to the `measure` operator [Section titled “Add a --cumulative option to the measure operator”](#add-a---cumulative-option-to-the-measure-operator) The `measure` operator now returns running totals with the `--cumulative` option. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3156](https://github.com/tenzir/tenzir/pull/3156). #### Change `summarize` to operate across schemas [Section titled “Change summarize to operate across schemas”](#change-summarize-to-operate-across-schemas) The `summarize` operator now works across multiple schemas and can combine events of different schemas into one group. It now also treats missing columns as having `null` values. The `by` clause of `summarize` is now optional. If it is omitted, all events are assigned to the same group. By [@jachris](https://github.com/jachris) in [#3250](https://github.com/tenzir/tenzir/pull/3250). #### Add diagnostics (and some other improvements) [Section titled “Add diagnostics (and some other improvements)”](#add-diagnostics-and-some-other-improvements) In addition to `tenzir "<pipeline>"`, there now is `tenzir -f <file>`, which loads and executes the pipeline defined in the given file. The pipeline parser now emits helpful and visually pleasing diagnostics. By [@jachris](https://github.com/jachris) in [#3223](https://github.com/tenzir/tenzir/pull/3223). #### Implement the `serve` operator and `/serve` endpoint [Section titled “Implement the serve operator and /serve endpoint”](#implement-the-serve-operator-and-serve-endpoint) The `serve` operator and `/serve` endpoint supersede the experimental `/query` endpoint. The operator is a sink for events, and bridges a pipeline into a RESTful interface from which events can be pulled incrementally. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3180](https://github.com/tenzir/tenzir/pull/3180). #### Apply the changes from the new `pipeline_manager` plugin [Section titled “Apply the changes from the new pipeline\_manager plugin”](#apply-the-changes-from-the-new-pipeline_manager-plugin) The new *pipeline-manager* is a proprietary plugin that allows for creating, updating and persisting pipelines. The included RESTful interface allows for easy access and modification of these pipelines. By [@Dakostu](https://github.com/Dakostu) in [#3164](https://github.com/tenzir/tenzir/pull/3164). #### Implement a fallback parser mechanism for extensions that don’t have … [Section titled “Implement a fallback parser mechanism for extensions that don’t have …”](#implement-a-fallback-parser-mechanism-for-extensions-that-dont-have) The `json` parser now servers as a fallback parser for all files whose extension do not have any default parser in Tenzir. By [@Dakostu](https://github.com/Dakostu) in [#3422](https://github.com/tenzir/tenzir/pull/3422). #### Avoid crashing when reading a pre-2.0 partition [Section titled “Avoid crashing when reading a pre-2.0 partition”](#avoid-crashing-when-reading-a-pre-20-partition) The `flatten [<separator>]` operator flattens nested data structures by joining nested records with the specified separator (defaults to `.`) and merging lists. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3018](https://github.com/tenzir/tenzir/pull/3018). #### PRs 3128-3173-3193 [Section titled “PRs 3128-3173-3193”](#prs-3128-3173-3193) The sink operator `import` persists events in a VAST node. The source operator `export` retrieves events from a VAST node. The `repeat` operator repeats its input a given number of times. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3128](https://github.com/tenzir/tenzir/pull/3128). #### Improve metrics (and some other things) [Section titled “Improve metrics (and some other things)”](#improve-metrics-and-some-other-things) The `sort` operator now also works for `ip` and `enum` fields. `tenzir --dump-metrics '<pipeline>'` prints a performance overview of the executed pipeline on stderr at the end. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3390](https://github.com/tenzir/tenzir/pull/3390). #### A collection of minor UX improvements [Section titled “A collection of minor UX improvements”](#a-collection-of-minor-ux-improvements) The `--timeout` option for the `vast status` command allows for defining how long VAST waits for components to report their status. The option defaults to 10 seconds. By [@tobim](https://github.com/tobim) in [#3162](https://github.com/tenzir/tenzir/pull/3162). #### Unroll the Zeek TSV header parsing loop [Section titled “Unroll the Zeek TSV header parsing loop”](#unroll-the-zeek-tsv-header-parsing-loop) The `zeek-tsv` parser sometimes failed to parse Zeek TSV logs, wrongly reporting that the header ended too early. This bug no longer exists. By [@Dakostu](https://github.com/Dakostu) in [#3291](https://github.com/tenzir/tenzir/pull/3291). ### Changes [Section titled “Changes”](#changes) #### Rename package artifacts from vast to tenzir [Section titled “Rename package artifacts from vast to tenzir”](#rename-package-artifacts-from-vast-to-tenzir) The Debian package for Tenzir replaces previous VAST installations and attempts to migrate existing data from VAST to Tenzir in the process. You can opt-out of this migration by creating the file `/var/lib/vast/disable-migration`. By [@tobim](https://github.com/tobim) in [#3203](https://github.com/tenzir/tenzir/pull/3203). #### Change Arrow extension type and metadata prefixes [Section titled “Change Arrow extension type and metadata prefixes”](#change-arrow-extension-type-and-metadata-prefixes) We now register extension types as `tenzir.ip`, `tenzir.subnet`, and `tenzir.enumeration` instead of `vast.address`, `vast.subnet`, and `vast.enumeration`, respectively. Arrow schema metadata now has a `TENZIR:` prefix instead of a `VAST:` prefix. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3208](https://github.com/tenzir/tenzir/pull/3208). #### Introduce the `tenzir` and `tenzird` binaries [Section titled “Introduce the tenzir and tenzird binaries”](#introduce-the-tenzir-and-tenzird-binaries) VAST is now called Tenzir. The `tenzir` binary replaces `vast exec` to execute a pipeline. The `tenzird` binary replaces `vast start` to start a node. The `tenzirctl` binary continues to offer all functionality that `vast` previously offered until all commands have been migrated to pipeline operators. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3187](https://github.com/tenzir/tenzir/pull/3187). #### Delete `delete_when_stopped` from the pipeline manager [Section titled “Delete delete\_when\_stopped from the pipeline manager”](#delete-delete_when_stopped-from-the-pipeline-manager) The `delete_when_stopped` flag was removed from the pipeline manager REST API. By [@jachris](https://github.com/jachris) in [#3292](https://github.com/tenzir/tenzir/pull/3292). #### Transform `read` and `write` into `parse` and `print` [Section titled “Transform read and write into parse and print”](#transform-read-and-write-into-parse-and-print) The `parse` and `print` operators have been renamed to `read` and `write`, respectively. The `read ... [from ...]` and `write ... [to ...]` operators are not available anymore. If you did not specify a connector, you can continue using `read ...` and `write ...` in many cases. Otherwise, use `from ... [read ...]` and `to ... [write ...]` instead. By [@jachris](https://github.com/jachris) in [#3365](https://github.com/tenzir/tenzir/pull/3365). #### Rename `#type` to `#schema` and introduce `#schema_id` [Section titled “Rename #type to #schema and introduce #schema\_id”](#rename-type-to-schema-and-introduce-schema_id-1) The `#type` meta extractor was renamed to `#schema`. By [@jachris](https://github.com/jachris) in [#3183](https://github.com/tenzir/tenzir/pull/3183). #### Tune defaults and demo-node experience [Section titled “Tune defaults and demo-node experience”](#tune-defaults-and-demo-node-experience) We reduced the default `batch-timeout` from ten seconds to one second in to improve the user experience of interactive pipelines with data aquisition. We reduced the default `active-partition-timeout` from 5 minutes to 30 seconds to reduce the time until data is persisted. By [@tobim](https://github.com/tobim) in [#3320](https://github.com/tenzir/tenzir/pull/3320). #### Remove old commands [Section titled “Remove old commands”](#remove-old-commands) The `stop` command no longer exists. Shut down VAST nodes using CTRL-C instead. The `version` command no longer exists. Use the more powerful `version` pipeline operator instead. The `spawn source` and `spawn sink` commands no longer exist. To import data remotely, run a pipeline in the form of `remote from … | … | import`, and to export data remotely, run a pipeline in the form of `export | … | remote to …`. The lower-level `peer`, `kill`, and `send` commands no longer exist. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3166](https://github.com/tenzir/tenzir/pull/3166). #### Remove `lsvast` [Section titled “Remove lsvast”](#remove-lsvast) The debugging utility `lsvast` no longer exists. Pipelines replace most of its functionality. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3211](https://github.com/tenzir/tenzir/pull/3211). #### Revamp packet acquisition and parsing [Section titled “Revamp packet acquisition and parsing”](#revamp-packet-acquisition-and-parsing-1) We reimplemented the old `pcap` plugin as a format. The command `tenzir-ctl import pcap` no longer works. Instead, the new `pcap` plugin provides a parser that emits `pcap.packet` events, as well as a printer that generates a PCAP file when provided with these events. By [@mavam](https://github.com/mavam) in [#3263](https://github.com/tenzir/tenzir/pull/3263). #### Add colors to JSON printer [Section titled “Add colors to JSON printer”](#add-colors-to-json-printer-1) We removed the `--pretty` option from the `json` printer. This option is now the default. To switch to NDJSON, use `-c|--compact-output`. By [@mavam](https://github.com/mavam) in [#3343](https://github.com/tenzir/tenzir/pull/3343). #### Change `summarize` to operate across schemas [Section titled “Change summarize to operate across schemas”](#change-summarize-to-operate-across-schemas-1) The aggregation functions in a `summarize` operator can now receive only a single extractor instead of multiple ones. The behavior for absent columns and aggregations across multiple schemas was changed. By [@jachris](https://github.com/jachris) in [#3250](https://github.com/tenzir/tenzir/pull/3250). #### Remove the `prefix()` function from the REST endpoint plugin API [Section titled “Remove the prefix() function from the REST endpoint plugin API”](#remove-the-prefix-function-from-the-rest-endpoint-plugin-api) We removed the `rest_endpoint_plugin::prefix()` function from the public API of the `rest_endpoint_plugin` class. For a migration, existing users should prepend the prefix manually to all endpoints defined by their plugin. By [@lava](https://github.com/lava) in [#3221](https://github.com/tenzir/tenzir/pull/3221). #### Implement the `serve` operator and `/serve` endpoint [Section titled “Implement the serve operator and /serve endpoint”](#implement-the-serve-operator-and-serve-endpoint-1) The default port of the web plugin changed from 42001 to 5160. This change avoids collisions from dynamic port allocation on Linux systems. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3180](https://github.com/tenzir/tenzir/pull/3180). #### Switch /status to POST [Section titled “Switch /status to POST”](#switch-status-to-post) The HTTP method of the status endpoint in the experimental REST API is now `POST`. By [@tobim](https://github.com/tobim) in [#3194](https://github.com/tenzir/tenzir/pull/3194). #### Add diagnostics (and some other improvements) [Section titled “Add diagnostics (and some other improvements)”](#add-diagnostics-and-some-other-improvements-1) We changed the default connector of `read <format>` and `write <format>` for all formats to `stdin` and `stdout`, respectively. We removed language plugins in favor of operator-based integrations. The interface of the operator, loader, parser, printer and saver plugins was changed. By [@jachris](https://github.com/jachris) in [#3223](https://github.com/tenzir/tenzir/pull/3223). #### Improve low-load memory consumption [Section titled “Improve low-load memory consumption”](#improve-low-load-memory-consumption) The default interval between two automatic rebuilds is now set to 2 hours and can be configured with the `rebuild-interval` option. By [@tobim](https://github.com/tobim) in [#3377](https://github.com/tenzir/tenzir/pull/3377). #### Remove previously deprecated options [Section titled “Remove previously deprecated options”](#remove-previously-deprecated-options) The previously deprecated options `tenzir.pipelines` (replaced with `tenzir.operators`) and `tenzir.pipeline-triggers` (no replacement) no longer exist. The previously deprecated deprecated types `addr`, `count`, `int`, and `real` (replaced with `ip`, `uint64`, `int64`, and `double`, respectively) no longer exist. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3358](https://github.com/tenzir/tenzir/pull/3358). #### Rename default database directory to `tenzir.db` [Section titled “Rename default database directory to tenzir.db”](#rename-default-database-directory-to-tenzirdb) The default database directory moved from `vast.db` to `tenzir.db`. Use the option `tenzir.db-directory` to manually set the database directory path. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3212](https://github.com/tenzir/tenzir/pull/3212). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix shutdown of sources and importer [Section titled “Fix shutdown of sources and importer”](#fix-shutdown-of-sources-and-importer) Import processes sometimes failed to shut down automatically when the node exited. They now shut down reliably. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3207](https://github.com/tenzir/tenzir/pull/3207). #### Fix rare crash when transforming sliced nested arrays [Section titled “Fix rare crash when transforming sliced nested arrays”](#fix-rare-crash-when-transforming-sliced-nested-arrays) Using transformation operators like `summarize`, `sort`, `put`, `extend`, or `replace` no longer sometimes crashes after a preceding `head` or `tail` operator when referencing a nested field. The `tail` operator sometimes returned more events than specified. This no longer happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3171](https://github.com/tenzir/tenzir/pull/3171). #### Add a changelog entry for the compaction fix [Section titled “Add a changelog entry for the compaction fix”](#add-a-changelog-entry-for-the-compaction-fix) We fixed a bug in the compation plugin that prevented it from applying the configured weights when it was used for the first time on a database. By [@tobim](https://github.com/tobim) in [#3185](https://github.com/tenzir/tenzir/pull/3185). #### Fix reconnect attempts for remote pipelines [Section titled “Fix reconnect attempts for remote pipelines”](#fix-reconnect-attempts-for-remote-pipelines) Starting a remote pipeline with `vast exec` failed when the node was not reachable yet. Like other commands, executing a pipeline now waits until the node is reachable before starting. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3188](https://github.com/tenzir/tenzir/pull/3188).

# Tenzir Node v4.0.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.0.1). ### Features [Section titled “Features”](#features) #### Implement \`replace [Section titled “Implement \`replace”](#implement-replace) It is now possible to replace the schema name with `replace #schema="new_name"`. By [@jachris](https://github.com/jachris) in [#3451](https://github.com/tenzir/tenzir/pull/3451).

# Tenzir Node v4.1.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.1.0). ### Features [Section titled “Features”](#features) #### Make `show pipelines` a thing [Section titled “Make show pipelines a thing”](#make-show-pipelines-a-thing) The new `show pipelines` aspect displays a list of all managed pipelines. By [@mavam](https://github.com/mavam) in [#3457](https://github.com/tenzir/tenzir/pull/3457). #### Bump the tenzir-plugins submodule pointer to include the pipeline manager’s failure and rendered diagnostics functionality [Section titled “Bump the tenzir-plugins submodule pointer to include the pipeline manager’s failure and rendered diagnostics functionality”](#bump-the-tenzir-plugins-submodule-pointer-to-include-the-pipeline-managers-failure-and-rendered-diagnostics-functionality) The `rendered` field in the pipeline manager diagnostics delivers a displayable version of the diagnostic’s error message. Pipelines that encounter an error during execution are now in a new `failed` rather than `stopped` state. By [@Dakostu](https://github.com/Dakostu) in [#3479](https://github.com/tenzir/tenzir/pull/3479). #### Introduce an experimental `sigma` operator [Section titled “Introduce an experimental sigma operator”](#introduce-an-experimental-sigma-operator) The new `sigma` operator filters its input with Sigma rules and outputs matching events alongside the matched rule. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3138](https://github.com/tenzir/tenzir/pull/3138). #### Implement `compress` and `decompress` operators [Section titled “Implement compress and decompress operators”](#implement-compress-and-decompress-operators) The `compress [--level <level>] <codec>` and `decompress <codec>` operators enable streaming compression and decompression in pipelines for `brotli`, `bz2`, `gzip`, `lz4`, and `zstd`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3443](https://github.com/tenzir/tenzir/pull/3443). #### Bump the tenzir-plugins submodule pointer to include the pipeline manager’s resuming and pausing functionality [Section titled “Bump the tenzir-plugins submodule pointer to include the pipeline manager’s resuming and pausing functionality”](#bump-the-tenzir-plugins-submodule-pointer-to-include-the-pipeline-managers-resuming-and-pausing-functionality) The `pause` action in the `/pipeline/update` endpoint suspends a pipeline and sets its state to `paused`. Resume it with the `start` action. Newly created pipelines are now in a new `created` rather than `stopped` state. By [@Dakostu](https://github.com/Dakostu) in [#3471](https://github.com/tenzir/tenzir/pull/3471). #### Implement `show config` [Section titled “Implement show config”](#implement-show-config) The `show config` aspect returns the configuration currently in use, combining options set in the configuration file, the command-line, environment options. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3455](https://github.com/tenzir/tenzir/pull/3455). ### Changes [Section titled “Changes”](#changes) #### Refactor `show` aspects and rewrite `version` [Section titled “Refactor show aspects and rewrite version”](#refactor-show-aspects-and-rewrite-version) The `version` operator no longer exists. Use `show version` to get the Tenzir version instead. The additional information that `version` produced is now available as `show build`, `show dependencies`, and `show plugins`. By [@mavam](https://github.com/mavam) in [#3442](https://github.com/tenzir/tenzir/pull/3442). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Tweak the execution node behavior [Section titled “Tweak the execution node behavior”](#tweak-the-execution-node-behavior) Pipeline operators that create output independent of their input now emit their output instantly instead of waiting for receiving further input. This makes the `shell` operator more reliable. The `show <aspect>` operator wrongfully required unsafe pipelines to be allowed for some aspects. This is now fixed. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3470](https://github.com/tenzir/tenzir/pull/3470).

# Tenzir Node v4.10.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.10.0). ### Features [Section titled “Features”](#features) #### Fix partial specialization of S3 configuration in URL [Section titled “Fix partial specialization of S3 configuration in URL”](#fix-partial-specialization-of-s3-configuration-in-url) S3 access and secret keys can now be specified in the S3 plugin’s configuration file. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4001](https://github.com/tenzir/tenzir/pull/4001). #### Add configurable pipelines [Section titled “Add configurable pipelines”](#add-configurable-pipelines) We made it possible to set pipelines declaratively in the `tenzir.yaml` configuration file. By [@tobim](https://github.com/tobim) in [#4006](https://github.com/tenzir/tenzir/pull/4006). #### Allow using `and`, `or`, and `not` in expressions [Section titled “Allow using and, or, and not in expressions”](#allow-using-and-or-and-not-in-expressions) The `where` operator now supports using `and`, `or`, and `not` as alternatives to `&&`, `||`, and `!` in expressions. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3993](https://github.com/tenzir/tenzir/pull/3993). #### Introduce multi-arch Docker images [Section titled “Introduce multi-arch Docker images”](#introduce-multi-arch-docker-images) The `tenzir/tenzir` and `tenzir/tenzir-node` Docker images now run natively on arm64 in addition to amd64. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3989](https://github.com/tenzir/tenzir/pull/3989). #### Implement multi-field lookups for context implementations [Section titled “Implement multi-field lookups for context implementations”](#implement-multi-field-lookups-for-context-implementations) The `enrich` and `lookup` operators now support type extractors, concepts, and comma-separated lists of fields as arguments to `--field`. By [@Dakostu](https://github.com/Dakostu) in [#3968](https://github.com/tenzir/tenzir/pull/3968). ### Changes [Section titled “Changes”](#changes) #### Improve metrics collection [Section titled “Improve metrics collection”](#improve-metrics-collection) Nodes now collect CPU, disk, memory, and process metrics every second instead of every ten seconds, improving the usability of metrics with the `chart` operator. Memory metrics now work as expected on macOS. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3982](https://github.com/tenzir/tenzir/pull/3982). #### Introduce the `no-location-overrides` option [Section titled “Introduce the no-location-overrides option”](#introduce-the-no-location-overrides-option) We’ve replaced the `tenzir.allow-unsafe-pipelines` option with the `tenzir.no-location-overrides` option with an inverted default. The new option is a less confusing default for new users and more accurately describes what the option does, namely preventing operator locations to be overriden. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3978](https://github.com/tenzir/tenzir/pull/3978). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Count nulls and absent values in `top` and `rare` [Section titled “Count nulls and absent values in top and rare”](#count-nulls-and-absent-values-in-top-and-rare) The `top` and `rare` operators now correctly count null and absent values. Previously, they emitted a single event with a count of zero when any null or absent values were included in the input. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3990](https://github.com/tenzir/tenzir/pull/3990). #### Fix a TOCTOU bug that caused the index to fail [Section titled “Fix a TOCTOU bug that caused the index to fail”](#fix-a-toctou-bug-that-caused-the-index-to-fail) Tenzir nodes sometimes failed when trying to canonicalize file system paths before opening them when the disk-monitor or compaction rotated them out. This is now handled gracefully. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3994](https://github.com/tenzir/tenzir/pull/3994). #### Fix partial specialization of S3 configuration in URL [Section titled “Fix partial specialization of S3 configuration in URL”](#fix-partial-specialization-of-s3-configuration-in-url-1) The S3 connector no longer ignores the default credentials provider for the current user when any arguments are specified in the URI explicitly. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4001](https://github.com/tenzir/tenzir/pull/4001). #### Fix panic on parsing invalid syslog messages [Section titled “Fix panic on parsing invalid syslog messages”](#fix-panic-on-parsing-invalid-syslog-messages) Parsing an invalid syslog message (using the schema `syslog.unknown`) no longer causes a crash. By [@eliaskosunen](https://github.com/eliaskosunen) in [#4012](https://github.com/tenzir/tenzir/pull/4012). #### Make `remote python` work [Section titled “Make remote python work”](#make-remote-python-work) The `python` operator now works with when using the `remote` location override. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3999](https://github.com/tenzir/tenzir/pull/3999). #### Prevent tcp socket inheritance to child processes [Section titled “Prevent tcp socket inheritance to child processes”](#prevent-tcp-socket-inheritance-to-child-processes) We fixed a problem with the TCP connector that caused pipeline restarts on the same port to fail if running `shell` or `python` operators were present. By [@tobim](https://github.com/tobim) in [#3998](https://github.com/tenzir/tenzir/pull/3998). #### Fix crash in `sigma` operator for non-existent file [Section titled “Fix crash in sigma operator for non-existent file”](#fix-crash-in-sigma-operator-for-non-existent-file) The `sigma` operator sometimes crashed when pointed to a non-existent file or directory. This no longer happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4010](https://github.com/tenzir/tenzir/pull/4010).

# Tenzir Node v4.10.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.10.1). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix crash when using configured pipelines for the first time [Section titled “Fix crash when using configured pipelines for the first time”](#fix-crash-when-using-configured-pipelines-for-the-first-time) When upgrading from a previous version to Tenzir v4.10 and using configured pipelines for the first time, the node sometimes crashed on startup. This no longer happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4020](https://github.com/tenzir/tenzir/pull/4020).

# Tenzir Node v4.10.3

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.10.3). ### Changes [Section titled “Changes”](#changes) #### Update the submodule pointers to include periodic platform reconnects [Section titled “Update the submodule pointers to include periodic platform reconnects”](#update-the-submodule-pointers-to-include-periodic-platform-reconnects) Tenzir nodes no longer attempt reconnecting to app.tenzir.com immediately upon failure, but rather wait before reconnecting. By [@Dakostu](https://github.com/Dakostu) in [#3997](https://github.com/tenzir/tenzir/pull/3997). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Ignore events in `lookup` that did not bind [Section titled “Ignore events in lookup that did not bind”](#ignore-events-in-lookup-that-did-not-bind) The `lookup` operator no longer tries to match internal metrics and diagnostics events. The `lookup` operator no longer returns events for which none of the provided fields exist. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4028](https://github.com/tenzir/tenzir/pull/4028).

# Tenzir Node v4.10.4

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.10.4). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix loading of large contexts [Section titled “Fix loading of large contexts”](#fix-loading-of-large-contexts) Using `context load` with large context files no longer causes a crash. By [@eliaskosunen](https://github.com/eliaskosunen) in [#4033](https://github.com/tenzir/tenzir/pull/4033). #### Isolate environment in python operator [Section titled “Isolate environment in python operator”](#isolate-environment-in-python-operator) The code passed to the `python` operator no longer fails to resolve names when the local and global scope are both used. By [@jachris](https://github.com/jachris) in [#4036](https://github.com/tenzir/tenzir/pull/4036). #### Fix a crash in the Sigma operator [Section titled “Fix a crash in the Sigma operator”](#fix-a-crash-in-the-sigma-operator) The `sigma` operator crashed for some rules when trying to attach the rule to the matched event. This no longer happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4034](https://github.com/tenzir/tenzir/pull/4034). #### Improve HTTP transfer abstraction [Section titled “Improve HTTP transfer abstraction”](#improve-http-transfer-abstraction) The `http` saver now correctly sets the `Content-Length` header when issuing HTTP requests. By [@mavam](https://github.com/mavam) in [#4031](https://github.com/tenzir/tenzir/pull/4031).

# Tenzir Node v4.11.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.11.0). ### Features [Section titled “Features”](#features) #### Add a `files` source [Section titled “Add a files source”](#add-a-files-source) The new `files` source lists file information for a given directory. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4035](https://github.com/tenzir/tenzir/pull/4035). #### Add the `set` operator for upserting fields [Section titled “Add the set operator for upserting fields”](#add-the-set-operator-for-upserting-fields) The new `set` operator upserts fields, i.e., acts like `replace` for existing fields and like `extend` for new fields. It also supports setting the schema name explicitly via `set #schema="new-name"`. The `put` operator now supports setting the schema name explicitly via `put #schema="new-name"`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4057](https://github.com/tenzir/tenzir/pull/4057). #### Introduce `--replace`, `--separate`, and `--yield` for contexts [Section titled “Introduce --replace, --separate, and --yield for contexts”](#introduce---replace---separate-and---yield-for-contexts) The `--replace` option for the `enrich` operator causes the input values to be replaced with their context instead of extending the event with the context, resulting in a leaner output. The `--separate` option makes the `enrich` and `lookup` operators handle each field individually, duplicating the event for each relevant field, and returning at most one context per output event. The `--yield <field>` option allows for adding only a part of a context with the `enrich` and `lookup` operators. For example, with a `geoip` context with a MaxMind country database, `--yield registered_country.iso_code` will cause the enrichment to only consist of the country’s ISO code. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4040](https://github.com/tenzir/tenzir/pull/4040). #### Introduce the `every` operator modifier [Section titled “Introduce the every operator modifier”](#introduce-the-every-operator-modifier) The `every <interval>` operator modifier executes a source operator repeatedly. For example, `every 1h from http://foo.com/bar` polls an endpoint every hour. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4050](https://github.com/tenzir/tenzir/pull/4050). #### Add SQS Connector [Section titled “Add SQS Connector”](#add-sqs-connector) The new `sqs` connector makes it possible to read from and write to Amazon SQS queues. By [@mavam](https://github.com/mavam) in [#3819](https://github.com/tenzir/tenzir/pull/3819). #### Add an email saver [Section titled “Add an email saver”](#add-an-email-saver) The new `email` saver allows for sending pipeline data via email by connecting to a mail server via SMTP or SMTPS. By [@mavam](https://github.com/mavam) in [#4041](https://github.com/tenzir/tenzir/pull/4041). ### Changes [Section titled “Changes”](#changes) #### Introduce `--replace`, `--separate`, and `--yield` for contexts [Section titled “Introduce --replace, --separate, and --yield for contexts”](#introduce---replace---separate-and---yield-for-contexts-1) The `enrich` and `lookup` operators now include the metadata in every context object to accomodate the new `--replace` and `--separate` options. Previously, the metadata was available once in the output field. The `mode` field in the enrichments returned from the `lookup` operator is now `lookup.retro`, `lookup.live`, or `lookup.snapshot` depending on the mode. The `bloom-filter` context now always returns `true` or `null` for the context instead of embedding the result in a record with a single `data` field. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4040](https://github.com/tenzir/tenzir/pull/4040). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Introduce `--replace`, `--separate`, and `--yield` for contexts [Section titled “Introduce --replace, --separate, and --yield for contexts”](#introduce---replace---separate-and---yield-for-contexts-2) `drop` and `select` silently ignored all but the first match of the specified type extractors and concepts. This no longer happens. For example, `drop :time` drops all fields with type `time` from events. Enriching a field in adjacent events in `lookup` and `enrich` with a `lookup-table` context sometimes crashed when the lookup-table referred to values of different types. The `geoip` context sometimes returned incorrect values. This no longer happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4040](https://github.com/tenzir/tenzir/pull/4040). #### Add SQS Connector [Section titled “Add SQS Connector”](#add-sqs-connector-1) Source operators that do not quit on their own only freed their resources after they had emitted an additional output, even after the pipeline had already exited. This sometimes caused errors when restarting pipelines, and in rare cases caused Tenzir nodes to hang on shutdown. This no longer happens, and the entire pipeline shuts down at once. By [@mavam](https://github.com/mavam) in [#3819](https://github.com/tenzir/tenzir/pull/3819). #### Fix disk metrics with custom state directories [Section titled “Fix disk metrics with custom state directories”](#fix-disk-metrics-with-custom-state-directories) Disk metrics now work correctly for deployments with a customized state directory. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4058](https://github.com/tenzir/tenzir/pull/4058). #### Fix `from <url>` with username [Section titled “Fix from \<url> with username”](#fix-from-url-with-username) `from <url>` now also works when the url specifies username and password. By [@jachris](https://github.com/jachris) in [#4043](https://github.com/tenzir/tenzir/pull/4043). #### Fix an off-by-one error when loading persisted contexts [Section titled “Fix an off-by-one error when loading persisted contexts”](#fix-an-off-by-one-error-when-loading-persisted-contexts) We fixed a bug that caused every second context to become unavailable after a restarting the node. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4045](https://github.com/tenzir/tenzir/pull/4045). #### Fix invalid assertion in `compress` operator [Section titled “Fix invalid assertion in compress operator”](#fix-invalid-assertion-in-compress-operator) The `compress` and `to` operators no longer fail when compression is unable to further reduce the size of a batch of bytes. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4048](https://github.com/tenzir/tenzir/pull/4048).

# Tenzir Node v4.11.2

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.11.2). ### Changes [Section titled “Changes”](#changes) #### PRs 4073-satta [Section titled “PRs 4073-satta”](#prs-4073-satta) The `python` operator now requires Python 3.9 (down from Python 3.10) or newer, making it available on more systems. By [@satta](https://github.com/satta) in [#4073](https://github.com/tenzir/tenzir/pull/4073). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fail late in the python operator setup [Section titled “Fail late in the python operator setup”](#fail-late-in-the-python-operator-setup) The `python` operator often failed with a 504 Gateway Timeout error on app.tenzir.com when first run. This no longer happens. By [@tobim](https://github.com/tobim) in [#4066](https://github.com/tenzir/tenzir/pull/4066).

# Tenzir Node v4.12.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.12.0). ### Features [Section titled “Features”](#features) #### PRs 4133-4138-satta [Section titled “PRs 4133-4138-satta”](#prs-4133-4138-satta) The `suricata` parser’s schema now more accurately reflects Suricata’s Eve JSON output, adding many fields that were previously missing. By [@satta](https://github.com/satta) in [#4133](https://github.com/tenzir/tenzir/pull/4133). #### Add value grouping to `chart` and remove `--title` [Section titled “Add value grouping to chart and remove --title”](#add-value-grouping-to-chart-and-remove---title) Some charts supported by the `chart` operator (`bar`, `line`, and `area`) now have a `--position` argument, with the possible values of `grouped` and `stacked`. By [@jachris](https://github.com/jachris) in [#4119](https://github.com/tenzir/tenzir/pull/4119). #### Add a `--timeout <duration>` option to `batch` [Section titled “Add a --timeout \<duration> option to batch”](#add-a---timeout-duration-option-to-batch) The `batch` operator gained a new `--timeout <duration>` option that controls the maixmum latency for withholding events for batching. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4095](https://github.com/tenzir/tenzir/pull/4095). #### Add configurable contexts [Section titled “Add configurable contexts”](#add-configurable-contexts) You can now define contexts and their creation parameters in the `tenzir.contexts` section of the configuration file. By [@tobim](https://github.com/tobim) in [#4126](https://github.com/tenzir/tenzir/pull/4126). #### Add `show schemas` to display all available schemas [Section titled “Add show schemas to display all available schemas”](#add-show-schemas-to-display-all-available-schemas) The `show schemas` operator lists all unique schemas of events stored at the node. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4131](https://github.com/tenzir/tenzir/pull/4131). #### Introduce the BITZ format [Section titled “Introduce the BITZ format”](#introduce-the-bitz-format) The `bitz` format resembles Tenzir’s internal wire format. It enables lossless and quick transfer of events between Tenzir nodes through any connector. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4079](https://github.com/tenzir/tenzir/pull/4079). #### Add a delay to retrying failed pipelines [Section titled “Add a delay to retrying failed pipelines”](#add-a-delay-to-retrying-failed-pipelines) Stopping a failed pipeline now moves it into the stopped state in the app and through the `/pipeline/update` API, stopping automatic restarts on failure. Pipelines now restart on failure at most every minute. The new API parameter `retry_delay` is available in the `/pipeline/create`, `/pipeline/launch`, and `/pipeline/update` APIs to customize this value. For configured pipelines, the new `restart-on-error` option supersedes the previous `autostart.failed` option and may be set either to a boolean or to a duration, with the former using the default retry delay and the latter using a custom one. The output of `show pipelines` and the `/pipeline/list` API now includes the start time of the pipeline in the field `start_time`, the newly added retry delay in the field `retry_delay`, and whether the pipeline is hidden from the overview page on app.tenzir.com in the field `hidden`. By [@Dakostu](https://github.com/Dakostu) in [#4108](https://github.com/tenzir/tenzir/pull/4108). #### Add `unroll` operator [Section titled “Add unroll operator”](#add-unroll-operator) The `unroll` operator transforms an event that contains a list into a sequence of events where each output event contains one of the list elements. By [@jachris](https://github.com/jachris) in [#4078](https://github.com/tenzir/tenzir/pull/4078). #### Add UDP connector [Section titled “Add UDP connector”](#add-udp-connector) The new `udp` connector comes with a loader and saver to read bytes from and write bytes to a UDP socket. By [@mavam](https://github.com/mavam) in [#4067](https://github.com/tenzir/tenzir/pull/4067). #### Support 0mq inproc sockets [Section titled “Support 0mq inproc sockets”](#support-0mq-inproc-sockets) The `0mq` connector now supports `inproc` socket endpoint URLs, allowing you to create arbitrary publish/subscribe topologies within a node. For example, `save zmq inproc://foo` writes messages to the in-process socket named `foo`. By [@mavam](https://github.com/mavam) in [#4117](https://github.com/tenzir/tenzir/pull/4117). #### Generalize `every` to work with all operators [Section titled “Generalize every to work with all operators”](#generalize-every-to-work-with-all-operators) The `every <duration>` operator modifier now supports all operators, turning blocking operators like `tail`, `sort` or `summarize` into operators that emit events every `<duration>`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4109](https://github.com/tenzir/tenzir/pull/4109). #### Add multi-line syslog message support [Section titled “Add multi-line syslog message support”](#add-multi-line-syslog-message-support) Syslog messages spanning multiple lines are now supported. By [@eliaskosunen](https://github.com/eliaskosunen) in [#4080](https://github.com/tenzir/tenzir/pull/4080). #### Add `deduplicate` operator [Section titled “Add deduplicate operator”](#add-deduplicate-operator) The `deduplicate` operator allows removing duplicate events based on specific fields. By [@eliaskosunen](https://github.com/eliaskosunen) in [#4068](https://github.com/tenzir/tenzir/pull/4068). ### Changes [Section titled “Changes”](#changes) #### Support 0mq inproc sockets [Section titled “Support 0mq inproc sockets”](#support-0mq-inproc-sockets-1) The `0mq` connector no longer automatically monitors TCP sockets to wait until at least one remote peer is present. Explicitly pass `--monitor` for this behavior. By [@mavam](https://github.com/mavam) in [#4117](https://github.com/tenzir/tenzir/pull/4117). #### Remove metrics from `/pipeline/list` [Section titled “Remove metrics from /pipeline/list”](#remove-metrics-from-pipelinelist) The `show pipelines` operator and `/pipeline/list` endpoint no longer include pipeline metrics. We recommend using the `metrics` operator instead, which offers the same data in a more flexible way. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4114](https://github.com/tenzir/tenzir/pull/4114). #### Add value grouping to `chart` and remove `--title` [Section titled “Add value grouping to chart and remove --title”](#add-value-grouping-to-chart-and-remove---title-1) In the `chart` operator, unless otherwise specified, every field but the first one is taken to be a value for the Y-axis, instead of just the second one. If the value for `-x`/`--name` or `-y`/`--value` is explicitly specified, the other one must now be too. The `--title` option is removed from `chart`. Titles can instead be set directly in the web interface. By [@jachris](https://github.com/jachris) in [#4119](https://github.com/tenzir/tenzir/pull/4119). #### Remove many deprecated things [Section titled “Remove many deprecated things”](#remove-many-deprecated-things) The `tenzir-ctl count <expr>` command no longer exists. It has long been deprecated and superseded by pipelines of the form `export | where <expr> | summarize count(.)`. The deprecated `tenzir-ctl status` command and the corresponding `/status` endpoint no longer exist. They have been superseded by the `show` and `metrics` operators that provide more detailed insight. The deprecated `tenzir.aging-frequency` and `tenzir.aging-query` options no longer exist. We recommend using the compaction or disk monitor mechanisms instead to delete persisted events. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4103](https://github.com/tenzir/tenzir/pull/4103). #### Add multi-line syslog message support [Section titled “Add multi-line syslog message support”](#add-multi-line-syslog-message-support-1) Lines of input containing an invalid syslog messages are now assumed to be a continuation of a message on a previous line, if there’s any. By [@eliaskosunen](https://github.com/eliaskosunen) in [#4080](https://github.com/tenzir/tenzir/pull/4080). #### Remove events output from many context operators [Section titled “Remove events output from many context operators”](#remove-events-output-from-many-context-operators) The `context create`, `context reset`, `context update`, and `context load` operators no return information about the context. Pipelines ending with these operators will now be considered closed, and you will be asked to deploy them in the Explorer. Previously, users commonly added `discard` after these operators to force this behavior. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4143](https://github.com/tenzir/tenzir/pull/4143). #### Implement feather printer and parser [Section titled “Implement feather printer and parser”](#implement-feather-printer-and-parser) The `feather` format now reads and writes Arrow IPC streams in addition to Feather files, and no longer requires random access to a file to function, making the format streamable with both `read feather` and `write feather`. By [@balavinaithirthan](https://github.com/balavinaithirthan) in [#4089](https://github.com/tenzir/tenzir/pull/4089). #### Implement a `parquet` parser and printer [Section titled “Implement a parquet parser and printer”](#implement-a-parquet-parser-and-printer) The `parquet` format more efficiently reads and writes Parquet files. The format is streamable for `write parquet`. By [@balavinaithirthan](https://github.com/balavinaithirthan) in [#4116](https://github.com/tenzir/tenzir/pull/4116). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Make `python` operator not discard fields that start with an underscore [Section titled “Make python operator not discard fields that start with an underscore”](#make-python-operator-not-discard-fields-that-start-with-an-underscore) The `python` operator no longer discards field that start with an underscore. By [@jachris](https://github.com/jachris) in [#4085](https://github.com/tenzir/tenzir/pull/4085). #### Support parallel connections in `from tcp` [Section titled “Support parallel connections in from tcp”](#support-parallel-connections-in-from-tcp) The `tcp` connector now supports accepting multiple connections in parallel when used with the `from` operator, parsing data separately per connection. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4084](https://github.com/tenzir/tenzir/pull/4084). #### Fix shutdown of connected pipelines alongside node [Section titled “Fix shutdown of connected pipelines alongside node”](#fix-shutdown-of-connected-pipelines-alongside-node) Pipelines run with the `tenzir` binary that connected to a Tenzir Node did sometimes not shut down correctly when the node shut down. This now happens reliably. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4093](https://github.com/tenzir/tenzir/pull/4093). #### Remove wrong EXPOSE in Dockerfile [Section titled “Remove wrong EXPOSE in Dockerfile”](#remove-wrong-expose-in-dockerfile) Tenzir Docker images no longer expose 5158/tcp by default, as this prevented running multiple containers in the same network or in host mode. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4099](https://github.com/tenzir/tenzir/pull/4099). #### Fix unflattening of empty records and `null` records [Section titled “Fix unflattening of empty records and null records”](#fix-unflattening-of-empty-records-and-null-records) Empty records and `null` values of record type are now correctly unflattened. By [@jachris](https://github.com/jachris) in [#4104](https://github.com/tenzir/tenzir/pull/4104). #### Remove events output from many context operators [Section titled “Remove events output from many context operators”](#remove-events-output-from-many-context-operators-1) The `enrich` operator sometimes stopped working when it encountered an event for which the specified fields did not exist. This no longer happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4143](https://github.com/tenzir/tenzir/pull/4143). #### Fix verification of large FlatBuffers tables [Section titled “Fix verification of large FlatBuffers tables”](#fix-verification-of-large-flatbuffers-tables) Lookup tables with more than 1M entries failed to load after the node was restarted. This no longer happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4137](https://github.com/tenzir/tenzir/pull/4137). #### Fix a race condition in `/serve` [Section titled “Fix a race condition in /serve”](#fix-a-race-condition-in-serve) We fixed a bug that caused the explorer to sometimes show 504 Gateway Timeout errors for pipelines where the first result took over two seconds to arrive. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4123](https://github.com/tenzir/tenzir/pull/4123). #### Shut down node a configured pipeline fails to start [Section titled “Shut down node a configured pipeline fails to start”](#shut-down-node-a-configured-pipeline-fails-to-start) Nodes now shut down with a non-zero exit code when pipelines configured as part of the `tenzir.yaml` file fail to start, making such configuration errors easier to spot. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4097](https://github.com/tenzir/tenzir/pull/4097). #### Fix HTTP saver Content-Length computation [Section titled “Fix HTTP saver Content-Length computation”](#fix-http-saver-content-length-computation) The `http` saver now correctly sets the `Content-Length` header value for HTTP POST requests. By [@mavam](https://github.com/mavam) in [#4134](https://github.com/tenzir/tenzir/pull/4134). #### Fix the schema name in `show contexts` [Section titled “Fix the schema name in show contexts”](#fix-the-schema-name-in-show-contexts) The schema name of events returned by `show contexts` sometimes did not match the type of the context. This now works reliably. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4082](https://github.com/tenzir/tenzir/pull/4082). #### Fix JSON printer handling of `inf` and `nan` [Section titled “Fix JSON printer handling of inf and nan”](#fix-json-printer-handling-of-inf-and-nan) The JSON printer previously printed invalid JSON for `inf` and `nan`, which means that `serve` could sometimes emit invalid JSON, which is not handled well by platform/app. Instead, we now emit `null`. By [@jachris](https://github.com/jachris) in [#4087](https://github.com/tenzir/tenzir/pull/4087). #### Fix HTTP PUT with empty request body [Section titled “Fix HTTP PUT with empty request body”](#fix-http-put-with-empty-request-body) We fixed a bug in the `http` saver that prevented sending HTTP PUT requests with an empty request body. By [@mavam](https://github.com/mavam) in [#4092](https://github.com/tenzir/tenzir/pull/4092). #### Fix `python` deadlock for empty input [Section titled “Fix python deadlock for empty input”](#fix-python-deadlock-for-empty-input) The `python` operator no longer deadlocks when given an empty program. By [@jachris](https://github.com/jachris) in [#4086](https://github.com/tenzir/tenzir/pull/4086).

# Tenzir Node v4.12.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.12.1). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Consolidate community and enterprise edition builds [Section titled “Consolidate community and enterprise edition builds”](#consolidate-community-and-enterprise-edition-builds) We fixed a misconfiguration that caused the `publish` and `subscribe` operators not to be available in the statically linked Linux builds. We fixed a crash on startup when selectively enabling or disabling plugins when at least two plugins with dependent plugins were disabled. By [@tobim](https://github.com/tobim) in [#4149](https://github.com/tenzir/tenzir/pull/4149).

# Tenzir Node v4.12.2

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.12.2). ### Features [Section titled “Features”](#features) #### Add an operator for dumping schemas [Section titled “Add an operator for dumping schemas”](#add-an-operator-for-dumping-schemas) The chart operator now accepts the flags `--x-axis-type` and `--y-axis-type` for `bar`, `line`, and `area` charts, with the possible values being `log` and `linear`, with `linear` as the default value. Setting these flags defines the scale (logarithmic or linear) on the Tenzir App chart visualization. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4147](https://github.com/tenzir/tenzir/pull/4147). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Use consistent attributes for y-axis in `chart` [Section titled “Use consistent attributes for y-axis in chart”](#use-consistent-attributes-for-y-axis-in-chart) The `chart` operator failed to render a chart when the y-axis was not specified explicitly and the events contained more than two top-level fields. This no longer happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4173](https://github.com/tenzir/tenzir/pull/4173). #### Find syntax errors before record batch reading [Section titled “Find syntax errors before record batch reading”](#find-syntax-errors-before-record-batch-reading) The python operator now checks for syntax errors on operator start up. By [@balavinaithirthan](https://github.com/balavinaithirthan) in [#4139](https://github.com/tenzir/tenzir/pull/4139). #### Fix reopening ports while subprocesses are open [Section titled “Fix reopening ports while subprocesses are open”](#fix-reopening-ports-while-subprocesses-are-open) We fixed a bug that prevented restarts of pipelines containing a listening connector under specific circumstances. By [@tobim](https://github.com/tobim) in [#4170](https://github.com/tenzir/tenzir/pull/4170). #### Chain the execution node start response promise to the node lifetime [Section titled “Chain the execution node start response promise to the node lifetime”](#chain-the-execution-node-start-response-promise-to-the-node-lifetime) The retry delay now works for pipelines that fail during startup. By [@Dakostu](https://github.com/Dakostu) in [#4171](https://github.com/tenzir/tenzir/pull/4171). #### Restore implicit `read json` in `from tcp` [Section titled “Restore implicit read json in from tcp”](#restore-implicit-read-json-in-from-tcp) We accidentally removed the implicit `read json` from `from tcp` in Tenzir v4.12. The shortform now works as expected again. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4175](https://github.com/tenzir/tenzir/pull/4175). #### Fix shutdown of `every <interval> <transformation|sink>` [Section titled “Fix shutdown of every \<interval> \<transformation|sink>”](#fix-shutdown-of-every-interval-transformationsink) Transformations or sinks used with the `every` operator modifier did not shut down correctly when exhausting their input. This now work as expected. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4166](https://github.com/tenzir/tenzir/pull/4166).

# Tenzir Node v4.13.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.13.0). ### Features [Section titled “Features”](#features) #### Add new loading mechanism for GeoIP context [Section titled “Add new loading mechanism for GeoIP context”](#add-new-loading-mechanism-for-geoip-context) The `geoip` context now supports loading in a MaxMind database with `context load <ctx>`. For example, `load s3://my-bucket/file.mmdb | context load my-ctx` makes the GeoIP context use a remotely stored database. By [@balavinaithirthan](https://github.com/balavinaithirthan) in [#4158](https://github.com/tenzir/tenzir/pull/4158). #### Add LEEF parser [Section titled “Add LEEF parser”](#add-leef-parser) The new `leef` parser supports parsing Log Event Extended Format (LEEF) version 1.0 and 2.0 events, e.g., `LEEF:1.0|Microsoft|MSExchange|4.0 SP1|15345|src=192.0.2.0\tdst=172.50.123.1`. By [@mavam](https://github.com/mavam) in [#4178](https://github.com/tenzir/tenzir/pull/4178). #### Add `cron` operator [Section titled “Add cron operator”](#add-cron-operator) The `cron "<cron expression>"` operator modifier executes an operator on a schedule. For example, `cron "* */10 * * * MON-FRI" from https://example.org/api` queries an endpoint on every 10th minute, Monday through Friday. By [@IyeOnline](https://github.com/IyeOnline) in [#4192](https://github.com/tenzir/tenzir/pull/4192). #### Add `--precise` mode to JSON parser [Section titled “Add --precise mode to JSON parser”](#add---precise-mode-to-json-parser) The `json` parser has a new `--precise` flag, which ensures that the layout of the emitted events precisely match the input. For example, it guarantees that no additional `null` fields will be added. This mode is implicitly enabled when using `read gelf`. By [@jachris](https://github.com/jachris) in [#4169](https://github.com/tenzir/tenzir/pull/4169). ### Changes [Section titled “Changes”](#changes) #### Remove the —clear parameter for lookup table contexts [Section titled “Remove the —clear parameter for lookup table contexts”](#remove-the-clear-parameter-for-lookup-table-contexts) The `--clear` parameter for clearing lookup table contexts during an update no longer exists. It has been superseded by the more robust `context reset` operator. By [@Dakostu](https://github.com/Dakostu) in [#4179](https://github.com/tenzir/tenzir/pull/4179). #### Fix a hang on shutdown and remove deprecated things [Section titled “Fix a hang on shutdown and remove deprecated things”](#fix-a-hang-on-shutdown-and-remove-deprecated-things) The deprecated `matcher` plugin no longer exists. Use the superior `lookup` operator and contexts instead. The deprecated `tenzir-ctl import` and `tenzir-ctl export` commands no longer exists. They have been fully superseded by pipelines in the form `… | import` and `export | …`, respectively. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4187](https://github.com/tenzir/tenzir/pull/4187). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Add LEEF parser [Section titled “Add LEEF parser”](#add-leef-parser-1) The `syslog` parser no longer crops messages at unprintable characters, such as tab (`\t`). The `syslog` parser no longer eagerly attempts to grab an application name from the content, fixing issues when combined with CEF and LEEF. By [@mavam](https://github.com/mavam) in [#4178](https://github.com/tenzir/tenzir/pull/4178). #### Fix CSV/XSV format printing the header once for each batch [Section titled “Fix CSV/XSV format printing the header once for each batch”](#fix-csvxsv-format-printing-the-header-once-for-each-batch) The CSV, TSV, and SSV printers no longer erroneously print the header multiple times when more than one event batch of events arrives. By [@jachris](https://github.com/jachris) in [#4195](https://github.com/tenzir/tenzir/pull/4195). #### Update the repository to include retry delay-related bug fixes [Section titled “Update the repository to include retry delay-related bug fixes”](#update-the-repository-to-include-retry-delay-related-bug-fixes) Some pipelines did not restart on failure. The retry mechanism now works for all kinds of failures. Pipelines that are configured to automatically restart on failure can now be stopped explicitly. Stopping a failed pipeline now always changes its state to the stopped state. By [@Dakostu](https://github.com/Dakostu) in [#4184](https://github.com/tenzir/tenzir/pull/4184). #### Fix a hang on shutdown and remove deprecated things [Section titled “Fix a hang on shutdown and remove deprecated things”](#fix-a-hang-on-shutdown-and-remove-deprecated-things-1) Startup failures caused by invalid pipelines or contexts deployed as code in the configuration file sometimes caused the node to hang instead of shutting down with an error message. The node now shuts down as expected when this happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4187](https://github.com/tenzir/tenzir/pull/4187). #### Make python venv creation independent from the user [Section titled “Make python venv creation independent from the user”](#make-python-venv-creation-independent-from-the-user) A permission error caused `python` operator to fail when it was previously used by another system user with the same set of requirements. There now is a one Python environment per user and set of requirements. By [@tobim](https://github.com/tobim) in [#4189](https://github.com/tenzir/tenzir/pull/4189).

# Tenzir Node v4.13.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.13.1). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### PRs 4212-satta [Section titled “PRs 4212-satta”](#prs-4212-satta) The `amqp` connector now properly signals more errors caused, for example, by networking issues. This enables pipelines using this connector to trigger their retry behavior. By [@satta](https://github.com/satta) in [#4212](https://github.com/tenzir/tenzir/pull/4212). #### Improve `slice` with positive begin and negative end [Section titled “Improve slice with positive begin and negative end”](#improve-slice-with-positive-begin-and-negative-end) The `slice` operator no longer waits for all input to arrive when used with a positive begin and a negative (or missing) end value, which rendered it unusable with infinite inputs. Instead, the operator now yields results earlier. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4210](https://github.com/tenzir/tenzir/pull/4210). #### Relax `transform_columns` [Section titled “Relax transform\_columns”](#relax-transform_columns) The `enrich`, `drop`, `extend`, `replace`, and `deduplicate` operators failed for empty input events. This no longer happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4215](https://github.com/tenzir/tenzir/pull/4215). #### Remove stream managers when decommissioning partitions [Section titled “Remove stream managers when decommissioning partitions”](#remove-stream-managers-when-decommissioning-partitions) The node’s CPU usage increased ever so slightly with every persisted partition, eventually causing imports and exports to get stuck. This no longer happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4214](https://github.com/tenzir/tenzir/pull/4214).

# Tenzir Node v4.14.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.14.0). ### Features [Section titled “Features”](#features) #### Add timeout options to `summarize` [Section titled “Add timeout options to summarize”](#add-timeout-options-to-summarize) The `summarize` operator gained two new options: `timeout` and `update-timeout`, which enable streaming aggregations. They specifiy the maximum time a bucket in the operator may exist, tracked from the arrival of the first and last event in the bucket, respectively. The `timeout` is useful to guarantee that events are held back no more than the specified duration, and the `update-timeout` is useful to finish aggregations earlier in cases where events that would be sorted into the same buckets arrive within the specified duration, allowing results to be seen earlier. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4209](https://github.com/tenzir/tenzir/pull/4209). #### Add statistical aggregation functions [Section titled “Add statistical aggregation functions”](#add-statistical-aggregation-functions) The new `mean` aggregation function computes the mean of grouped numeric values. The new `approximate_median` aggregation function computes an approximate median of grouped numeric values using the t-digest algorithm. The new `stddev` and `variance` aggregation functions compute the standard deviation and variance of grouped numeric values, respectively. The new `collect` aggregation function collects a list of all non-null grouped values. Unlike `distinct`, this function does not remove dulicates and the results may appear in any order. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4208](https://github.com/tenzir/tenzir/pull/4208). #### Implement strides for the `slice` operator [Section titled “Implement strides for the slice operator”](#implement-strides-for-the-slice-operator) The `slice` operator now supports strides in the form of `slice <begin>:<end>:<stride>`. Negative strides reverse the event order. The new `reverse` operator is a short form of `slice ::-1` and reverses the event order. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4216](https://github.com/tenzir/tenzir/pull/4216). ### Changes [Section titled “Changes”](#changes) #### Change the syntax of the `slice` operator [Section titled “Change the syntax of the slice operator”](#change-the-syntax-of-the-slice-operator) The `slice` operator now expects its arguments in the form `<begin>:<end>`, where either the begin or the end value may be omitted. For example, `slice 10:` returns all but the first 10 events, `slice 10:20` returns events 10 to 20 (exclusive), and `slice :-10` returns all but the last 10 events. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4211](https://github.com/tenzir/tenzir/pull/4211). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Remove the superfluous path separators when using S3 or GS connectors [Section titled “Remove the superfluous path separators when using S3 or GS connectors”](#remove-the-superfluous-path-separators-when-using-s3-or-gs-connectors) Paths for `s3` and `gs` connectors are not broken anymore during loading/saving. By [@Dakostu](https://github.com/Dakostu) in [#4222](https://github.com/tenzir/tenzir/pull/4222). #### Make syslog parser more lenient [Section titled “Make syslog parser more lenient”](#make-syslog-parser-more-lenient) The `syslog` parser incorrectly identified a message without hostname and tag as one with hostname and no tag. This resulted in a hostname with a trailing colon, e.g., `zscaler-nss:`. In such messages, the parser now correctly sets the hostname to `null` and assigns `zscaler-nss` as tag/app, without the trailing colon. By [@mavam](https://github.com/mavam) in [#4225](https://github.com/tenzir/tenzir/pull/4225).

# Tenzir Node v4.15.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.15.0). ### Features [Section titled “Features”](#features) #### Add label definitions to configured pipelines [Section titled “Add label definitions to configured pipelines”](#add-label-definitions-to-configured-pipelines) Pipelines configured as code in the `tenzir.yaml` configuration file may now contain labels. By [@tobim](https://github.com/tobim) in [#4247](https://github.com/tenzir/tenzir/pull/4247). #### Add an option for writing JSON arrays of objects [Section titled “Add an option for writing JSON arrays of objects”](#add-an-option-for-writing-json-arrays-of-objects) Use `write json --arrays-of-objects` to write JSON arrays per batch of events instead of JSON objects per event. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4249](https://github.com/tenzir/tenzir/pull/4249). #### Build an RPM package [Section titled “Build an RPM package”](#build-an-rpm-package) We now offer an RPM package for RedHat Linux and its derivatives. By [@tobim](https://github.com/tobim) in [#4188](https://github.com/tenzir/tenzir/pull/4188). #### Support multiple fields in `sort` [Section titled “Support multiple fields in sort”](#support-multiple-fields-in-sort) The `sort` operator now supports sorting by multiple fields. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4242](https://github.com/tenzir/tenzir/pull/4242). #### Add an option to `export` both past and future events [Section titled “Add an option to export both past and future events”](#add-an-option-to-export-both-past-and-future-events) The `export`, `metrics`, and `diagnostics` operators now features a `--retro` flag. This flag will make the operators first export past events, even when `--live` is set. Specify both options explicitly to first return past events and then immediately switch into live mode. By [@IyeOnline](https://github.com/IyeOnline) in [#4203](https://github.com/tenzir/tenzir/pull/4203). #### Allow editing definitions of managed pipelines [Section titled “Allow editing definitions of managed pipelines”](#allow-editing-definitions-of-managed-pipelines) The `/pipeline/update` API endpoint now supports updating definitions of existing pipelines. By [@Dakostu](https://github.com/Dakostu) in [#4196](https://github.com/tenzir/tenzir/pull/4196). #### Support IP-in-subnet queries in lookup tables [Section titled “Support IP-in-subnet queries in lookup tables”](#support-ip-in-subnet-queries-in-lookup-tables) The `lookup-table` context now performs longest-prefix matches when the table key is of type `subnet` and the to-be-enriched field of type `ip`. For example, a lookup table with key `10.0.0.0/8` will match when enriching the IP address `10.1.1.1`. By [@mavam](https://github.com/mavam) in [#4051](https://github.com/tenzir/tenzir/pull/4051). #### Support disabling TLS in `https` connector [Section titled “Support disabling TLS in https connector”](#support-disabling-tls-in-https-connector) The `https` connector supports the new options `--skip-peer-verification` and `--skip-hostname-verification` to disable verification of the peer’s certificate and verification of the certificate hostname. By [@mavam](https://github.com/mavam) in [#4248](https://github.com/tenzir/tenzir/pull/4248). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Support multiple table slice schemas when dumping contexts [Section titled “Support multiple table slice schemas when dumping contexts”](#support-multiple-table-slice-schemas-when-dumping-contexts) `context inspect` will not crash anymore when encountering contexts that contain multi-schema data. By [@Dakostu](https://github.com/Dakostu) in [#4236](https://github.com/tenzir/tenzir/pull/4236). #### Add an option to `export` both past and future events [Section titled “Add an option to export both past and future events”](#add-an-option-to-export-both-past-and-future-events-1) `export --live` no longer buffers the last batch of event that was imported, and instead immediately returns all imported events. By [@IyeOnline](https://github.com/IyeOnline) in [#4203](https://github.com/tenzir/tenzir/pull/4203). #### Add label definitions to configured pipelines [Section titled “Add label definitions to configured pipelines”](#add-label-definitions-to-configured-pipelines-1) Pipelines configured as code no longer always restart with the node. Instead, just like for other pipelines, they only restart when they were running before the node shut down. By [@tobim](https://github.com/tobim) in [#4247](https://github.com/tenzir/tenzir/pull/4247).

# Tenzir Node v4.15.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.15.1). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix the demo node Docker image’s entrypoint [Section titled “Fix the demo node Docker image’s entrypoint”](#fix-the-demo-node-docker-images-entrypoint) We fixed a regression that caused demo nodes not to start for Tenzir v4.15. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4258](https://github.com/tenzir/tenzir/pull/4258).

# Tenzir Node v4.15.2

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.15.2). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Do not persist pipeline state updates on node shutdown [Section titled “Do not persist pipeline state updates on node shutdown”](#do-not-persist-pipeline-state-updates-on-node-shutdown) Some *Running* pipelines were considered *Completed* when the node shut down, causing them not to start up again automatically when the node restarted. Now, the node only considers pipelines *Completed* that entered the state on their own before the node’s shutdown. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4261](https://github.com/tenzir/tenzir/pull/4261).

# Tenzir Node v4.16.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.16.0). ### Features [Section titled “Features”](#features) #### Enable selective deletion of lookup table entries [Section titled “Enable selective deletion of lookup table entries”](#enable-selective-deletion-of-lookup-table-entries) For `lookup-table` contexts, the new `--erase` option for `context update` enables selective deletion of lookup table entries. The `context update` operator now defaults the `--key <field>` option to the first field in the input when no field is explicitly specified. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4274](https://github.com/tenzir/tenzir/pull/4274). #### Add percentile aggregation functions [Section titled “Add percentile aggregation functions”](#add-percentile-aggregation-functions) The `p99`, `p95`, `p90`, `p75`, and `p50` aggregation functions calculate commonly used percentiles of grouped values in the `summarize` operator. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4273](https://github.com/tenzir/tenzir/pull/4273). #### Support multiple publishers [Section titled “Support multiple publishers”](#support-multiple-publishers) The `publish` operator’s topics no longer have to be unique. Instead, any number of pipelines may use the `publish` operator with the same topic. This enables multi-producer, multi-consumer (MPMC) event routing, where streams of events from different pipelines can now be merged back together in addition to being split. Inter-pipeline data transfer with the `publish` and `subscribe` operators is now as fast as intra-pipeline data transfer between pipeline operators and utilizes the same amount of memory. Back pressure now propagates from subscribers back to publishers, i.e., if a pipeline with a `subscribe` operator is too slow then all pipelines with matching `publish` operators will be slowed down to a matching speed. This limits the memory usage of `publish` operators and prevents data loss. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4270](https://github.com/tenzir/tenzir/pull/4270). ### Changes [Section titled “Changes”](#changes) #### Add percentile aggregation functions [Section titled “Add percentile aggregation functions”](#add-percentile-aggregation-functions-1) The `approximate_median` aggregation function is now called `median`. We found the longer name, despite being more accurate, to be rather unintuitive. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4273](https://github.com/tenzir/tenzir/pull/4273). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Handle loading of configured and non-configured contexts with the same name [Section titled “Handle loading of configured and non-configured contexts with the same name”](#handle-loading-of-configured-and-non-configured-contexts-with-the-same-name) Configured and non-configured contexts with the same name will not cause non-deterministic behavior upon loading anymore. The node will shut down instead. By [@Dakostu](https://github.com/Dakostu) in [#4224](https://github.com/tenzir/tenzir/pull/4224). #### Evaluate `ip == subnet` predicates [Section titled “Evaluate ip == subnet predicates”](#evaluate-ip--subnet-predicates) Predicates of the form `ip == subnet` and `ip in [subnet1, subnet2, …]` now work as expected. The `lookup` operator now correctly handles subnet keys when using the `--retro` or `--snapshot` options. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4268](https://github.com/tenzir/tenzir/pull/4268).

# Tenzir Node v4.17.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.17.0). ### Features [Section titled “Features”](#features) #### Fix a potential crash in `enrich --replace` [Section titled “Fix a potential crash in enrich --replace”](#fix-a-potential-crash-in-enrich---replace) The `enrich` operator no longer crashes when it is used to replace a field value with a context value of a different type and the context is not able to provide a substitute for all inputs. By [@tobim](https://github.com/tobim) in [#4291](https://github.com/tenzir/tenzir/pull/4291). #### Implement the `azure-log-analytics` plugin [Section titled “Implement the azure-log-analytics plugin”](#implement-the-azure-log-analytics-plugin) The new `azure-log-analytics` operator makes it possible to upload events to supported or custom tables in Microsoft Azure. By [@Dakostu](https://github.com/Dakostu) in [#4281](https://github.com/tenzir/tenzir/pull/4281). #### Make the parallel level in `lookup` configurable [Section titled “Make the parallel level in lookup configurable”](#make-the-parallel-level-in-lookup-configurable) The `lookup` operator gained a new `--parallel <level>` option controlling the number of partitions the operator is allowed to open at once for retrospective lookups. This can significantly increase performance at the cost of higher resource usage. The option defaults to 3. To restore the previous behavior, set the option to 1. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4300](https://github.com/tenzir/tenzir/pull/4300). #### Add the `ttl` to the `/pipeline/list` API [Section titled “Add the ttl to the /pipeline/list API”](#add-the-ttl-to-the-pipelinelist-api) The `/pipeline/list` API now includes a new `ttl` field showing the TTL of the pipeline. The remaining TTL moved from `ttl_expires_in_ns` to a `remaining_ttl` field, aligning the output of the API with the `show pipelines` operator. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4314](https://github.com/tenzir/tenzir/pull/4314). #### Allow pip to write to stdout in venv creation [Section titled “Allow pip to write to stdout in venv creation”](#allow-pip-to-write-to-stdout-in-venv-creation) We fixed bug that caused python-pip to fail when creating the runtime environment for the python operator. By [@tobim](https://github.com/tobim) in [#4279](https://github.com/tenzir/tenzir/pull/4279). #### Add a `rendered` field to diagnostics [Section titled “Add a rendered field to diagnostics”](#add-a-rendered-field-to-diagnostics) Newly created diagnostics returned from the `diagnostics` now contain a `rendered` field that contains a rendered form of the diagnostic. To restore the previous behavior, use `diagnostics | drop rendered`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4290](https://github.com/tenzir/tenzir/pull/4290). #### Fix healthcheck in docker-compose.yaml [Section titled “Fix healthcheck in docker-compose.yaml”](#fix-healthcheck-in-docker-composeyaml) `context update <name>` for `lookup-table` contexts now supports per-entry timeouts. The `--create-timeout <duration>` option sets the time after which lookup table entries expire, and the `--update-timeout <duration>` option sets the time after which lookup table entries expire if they are not accessed. By [@lo-chr](https://github.com/lo-chr) in [#5126](https://github.com/tenzir/tenzir/pull/5126). #### Print Operator [Section titled “Print Operator”](#print-operator) The `print` operator allows for printing record fields as strings with any format. By [@balavinaithirthan](https://github.com/balavinaithirthan) in [#4265](https://github.com/tenzir/tenzir/pull/4265). ### Changes [Section titled “Changes”](#changes) #### Remove built-in type aliases [Section titled “Remove built-in type aliases”](#remove-built-in-type-aliases) The built-in type aliases `timestamp` and `port` for `time` and `uint64`, respectively, no longer exist. They were an artifact of Tenzir from before it supported schema inference in most parsers, and did not play well with many operators when used together with inferred types from other parsers. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4299](https://github.com/tenzir/tenzir/pull/4299). #### Include hidden pipelines in `show pipelines` [Section titled “Include hidden pipelines in show pipelines”](#include-hidden-pipelines-in-show-pipelines) `show pipelines` now includes “hidden” pipelines run by the by the Tenzir Platform or through the API. These pipelines usually run background jobs, so they’re intentionally hidden from the `/pipeline/list` API. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4309](https://github.com/tenzir/tenzir/pull/4309). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Make `ip == subnet` and `string == pattern` commutative [Section titled “Make ip == subnet and string == pattern commutative”](#make-ip--subnet-and-string--pattern-commutative) `subnet == ip` and `pattern == string` predicates now behave just like `ip == subnet` and `string == pattern` predicates. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4280](https://github.com/tenzir/tenzir/pull/4280). #### Fix start abort error message [Section titled “Fix start abort error message”](#fix-start-abort-error-message) Errors during pipeline startup are properly propagated instead of being replaced by `error: failed to run` in some situations. By [@jachris](https://github.com/jachris) in [#4288](https://github.com/tenzir/tenzir/pull/4288). #### Add missing `-X` option for `kafka` saver [Section titled “Add missing -X option for kafka saver”](#add-missing--x-option-for-kafka-saver) The `-X` option for overriding configuration options for `librdkafka` now works the `kafka` saver as well. Previously, the option was only exposed for the loader, unlike advertised in the documentation. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4317](https://github.com/tenzir/tenzir/pull/4317). #### Tone down execution node backoff behavior [Section titled “Tone down execution node backoff behavior”](#tone-down-execution-node-backoff-behavior) We fixed a regression that caused excess CPU usage for some operators when idle. This was most visible with the `subscribe`, `export`, `metrics`, `diagnostics`, `lookup` and `enrich` operators. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4297](https://github.com/tenzir/tenzir/pull/4297). #### Implement the `azure-log-analytics` plugin [Section titled “Implement the azure-log-analytics plugin”](#implement-the-azure-log-analytics-plugin-1) The `https` and related savers now signal an error when the saver-related upload fails. By [@Dakostu](https://github.com/Dakostu) in [#4281](https://github.com/tenzir/tenzir/pull/4281). #### Fix using `summarize … by x` when `x` is of type `null` [Section titled “Fix using summarize … by x when x is of type null”](#fix-using-summarize--by-x-when-x-is-of-type-null) The `summarize` operator no longer crashes when grpuping by a field of type `null`, i.e., a field whose type could not be inferred because all of its values were `null`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4289](https://github.com/tenzir/tenzir/pull/4289).

# Tenzir Node v4.17.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.17.1). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Revert “Allow components to depend on other components (#4295)” [Section titled “Revert “Allow components to depend on other components (#4295)””](#revert-allow-components-to-depend-on-other-components-4295) We fixed a bug in Tenzir v4.17 that caused some nodes to error on startup with an “unreachable” error. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4322](https://github.com/tenzir/tenzir/pull/4322).

# Tenzir Node v4.17.2

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.17.2). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### PRs 4295-4322-4325 [Section titled “PRs 4295-4322-4325”](#prs-4295-4322-4325) We fixed a bug that very rarely caused configured pipelines using contexts to fail starting up because the used context was not available, and similarly to fail shutting down because the used context was no longer available before the pipeline was shut down. By [@tobim](https://github.com/tobim) in [#4295](https://github.com/tenzir/tenzir/pull/4295). #### Fix minor issues with the diagnostics and metrics collector [Section titled “Fix minor issues with the diagnostics and metrics collector”](#fix-minor-issues-with-the-diagnostics-and-metrics-collector) We fixed an issue where diagnostics were not properly propagated and thus not available to the `diagnostics` operator. By [@jachris](https://github.com/jachris) in [#4326](https://github.com/tenzir/tenzir/pull/4326).

# Tenzir Node v4.17.3

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.17.3). ### Features [Section titled “Features”](#features) #### Add an operator for partition candidate checks [Section titled “Add an operator for partition candidate checks”](#add-an-operator-for-partition-candidate-checks) The `partitions [<expr>]` source operator supersedes `show partitions` (now deprecated) and supports an optional expression as a positional argument for showing only the partitions that would be considered in `export | where <expr>`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4329](https://github.com/tenzir/tenzir/pull/4329). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix deletion of removed configured contexts [Section titled “Fix deletion of removed configured contexts”](#fix-deletion-of-removed-configured-contexts) We fixed a bug in Tenzir v4.17.2 that sometimes caused the deletion of on-disk state of configured contexts on startup. By [@tobim](https://github.com/tobim) in [#4330](https://github.com/tenzir/tenzir/pull/4330).

# Tenzir Node v4.17.4

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.17.4). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix configured pipelines causing a crash when they contain a syntax error [Section titled “Fix configured pipelines causing a crash when they contain a syntax error”](#fix-configured-pipelines-causing-a-crash-when-they-contain-a-syntax-error) Shutting down a node no longer sets managed pipelines to the completed state unintentionally. Configured pipelines with retry on error enabled will not trigger an assertion anymore when they fail to launch. By [@Dakostu](https://github.com/Dakostu) in [#4334](https://github.com/tenzir/tenzir/pull/4334). #### Fix two concurrency issues related to child process creation [Section titled “Fix two concurrency issues related to child process creation”](#fix-two-concurrency-issues-related-to-child-process-creation) We fixed a bug that caused a “Bad file descriptor” error from the python operator, when multiple instances of it were started simultaneously. By [@tobim](https://github.com/tobim) in [#4333](https://github.com/tenzir/tenzir/pull/4333).

# Tenzir Node v4.18.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.18.0). ### Features [Section titled “Features”](#features) #### Add an optional `name` argument to the `metrics` operator [Section titled “Add an optional name argument to the metrics operator”](#add-an-optional-name-argument-to-the-metrics-operator) The `metrics` operator now optionally takes a metric name as an argument. For example, `metrics cpu` only shows CPU metrics. This is functionally equivalent to `metrics | where #schema == "tenzir.metrics.cpu"`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4369](https://github.com/tenzir/tenzir/pull/4369). #### Introduce API metrics [Section titled “Introduce API metrics”](#introduce-api-metrics) The new `tenzir.metrics.api` metrics record every API call made to a Tenzir Node. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4368](https://github.com/tenzir/tenzir/pull/4368). #### Emit connection status metrics from the platform [Section titled “Emit connection status metrics from the platform”](#emit-connection-status-metrics-from-the-platform) The `tenzir.metrics.platform` metrics records every second whether the connection to the Tenzir Platform is working as expected from the node’s perspective. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4374](https://github.com/tenzir/tenzir/pull/4374). #### PRs 4339-4365 [Section titled “PRs 4339-4365”](#prs-4339-4365) The `publish`, `subscribe`, `import`, `export`, `lookup` and `enrich` operators deliver their own, operator-specific metrics now. By [@Dakostu](https://github.com/Dakostu) in [#4339](https://github.com/tenzir/tenzir/pull/4339). ### Changes [Section titled “Changes”](#changes) #### Raise the default and max timeouts for `/serve` [Section titled “Raise the default and max timeouts for /serve”](#raise-the-default-and-max-timeouts-for-serve) We raised the default and maximum long-polling timeouts for `/serve` from 2s and 5s to 5s and 10s, respectively. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4370](https://github.com/tenzir/tenzir/pull/4370). #### Prepare the pipeline manager for TQLv2 [Section titled “Prepare the pipeline manager for TQLv2”](#prepare-the-pipeline-manager-for-tqlv2) Diagnostics from managed pipelines are now deduplicated, showing each diagnostic at most once for each run. By [@jachris](https://github.com/jachris) in [#4348](https://github.com/tenzir/tenzir/pull/4348). #### Push expressions into `subscribe` for better metrics [Section titled “Push expressions into subscribe for better metrics”](#push-expressions-into-subscribe-for-better-metrics) Pipeline activity for pipelines starting with `subscribe | where <expr>` will no longer report ingress that does not match the provided filter expression. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4349](https://github.com/tenzir/tenzir/pull/4349). #### Revamp the `export` operator [Section titled “Revamp the export operator”](#revamp-the-export-operator) The previously deprecated `--low-priority` option for the `export` operator no longer exists. The new `--parallel <level>` option allows tuning how many worker threads the operator uses at most for querying persisted events. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4365](https://github.com/tenzir/tenzir/pull/4365). #### Simplify the node actor setup [Section titled “Simplify the node actor setup”](#simplify-the-node-actor-setup) The deprecated `vast` symlink for the `tenzir-ctl` binary that offeres backwards compatiblity with versions older than Tenzir v4—when it was called VAST—no longer exists. The deprecated `tenzir.db-directory` option no longer exists. Use `tenzir.state-directory` instead. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4343](https://github.com/tenzir/tenzir/pull/4343). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Add missing time format specifiers for the static binary [Section titled “Add missing time format specifiers for the static binary”](#add-missing-time-format-specifiers-for-the-static-binary) The time parser now accepts the `%F`, `%g`, `%G`, `%u`, `%V`, `%z`, and `%Z` format specifiers. By [@tobim](https://github.com/tobim) in [#4366](https://github.com/tenzir/tenzir/pull/4366). #### Fix open partition tracking in the `lookup` operator [Section titled “Fix open partition tracking in the lookup operator”](#fix-open-partition-tracking-in-the-lookup-operator) We fixed a rare bug that caused the `lookup` operator to exit unexpectedly when using a high value for the operator’s `--parallel` option. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4363](https://github.com/tenzir/tenzir/pull/4363). #### Allow immediate restarts of the TCP listen connector [Section titled “Allow immediate restarts of the TCP listen connector”](#allow-immediate-restarts-of-the-tcp-listen-connector) The `tcp` connector no longer fails in listen mode when you try to restart it directly after stopping it. By [@tobim](https://github.com/tobim) in [#4367](https://github.com/tenzir/tenzir/pull/4367). #### Honor proxy settings in the SQS connector [Section titled “Honor proxy settings in the SQS connector”](#honor-proxy-settings-in-the-sqs-connector) The SQS connector now honors system proxy settings. By [@tobim](https://github.com/tobim) in [#4359](https://github.com/tenzir/tenzir/pull/4359). #### Fix possible crash when one of multiple subscribers disconnects [Section titled “Fix possible crash when one of multiple subscribers disconnects”](#fix-possible-crash-when-one-of-multiple-subscribers-disconnects) We fixed a rare crash when one of multiple `subscribe` operators for the same topic disconnected while at least one of the other subscribers was overwhelmed and asked for corresponding publishers to throttle. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4346](https://github.com/tenzir/tenzir/pull/4346). #### Remove the zero-size check in the split\_at\_null() input loop [Section titled “Remove the zero-size check in the split\_at\_null() input loop”](#remove-the-zero-size-check-in-the-split_at_null-input-loop) We fixed a rarely occurring issue in the `gelf` parser that led to parsing errors for some events. By [@Dakostu](https://github.com/Dakostu) in [#4341](https://github.com/tenzir/tenzir/pull/4341). #### Push expressions into `subscribe` for better metrics [Section titled “Push expressions into subscribe for better metrics”](#push-expressions-into-subscribe-for-better-metrics-1) Pipelines of the form `export --live | where <expr>` failed to filter with type extractors or concepts. This now works as expected. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4349](https://github.com/tenzir/tenzir/pull/4349).

# Tenzir Node v4.18.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.18.1). ### Features [Section titled “Features”](#features) #### Allow disabling node-to-node connections [Section titled “Allow disabling node-to-node connections”](#allow-disabling-node-to-node-connections) Setting the `tenzir.endpoint` option to `false` now causes the node not to listen for node-to-node connections. Previously, the port was always exposed for other nodes or `tenzir` processes to connect. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4380](https://github.com/tenzir/tenzir/pull/4380). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Do not optimize `deduplicate` [Section titled “Do not optimize deduplicate”](#do-not-optimize-deduplicate) We fixed a bug that caused `deduplicate <fields...> --distance <distance>` to sometimes produce incorrect results when followed by `where <expr>` with an expression that filters on the deduplicated fields. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4379](https://github.com/tenzir/tenzir/pull/4379). #### Don’t terminate `export` when used with `every` [Section titled “Don’t terminate export when used with every”](#dont-terminate-export-when-used-with-every) Pipelines that use the `every` modifier with the `export` operator no longer terminate after the first run. By [@tobim](https://github.com/tobim) in [#4382](https://github.com/tenzir/tenzir/pull/4382).

# Tenzir Node v4.18.2

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.18.2). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Send a hard shutdown to the export bridge [Section titled “Send a hard shutdown to the export bridge”](#send-a-hard-shutdown-to-the-export-bridge) We fixed a memory leak in `export` that was introduced with `v4.18.1`. By [@tobim](https://github.com/tobim) in [#4389](https://github.com/tenzir/tenzir/pull/4389).

# Tenzir Node v4.18.3

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.18.3). ### Changes [Section titled “Changes”](#changes) #### Prevent unbounded memory usage in `export --live` [Section titled “Prevent unbounded memory usage in export --live”](#prevent-unbounded-memory-usage-in-export---live) `metrics export` now includes an additional field that shows the number of queued events in the pipeline. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4396](https://github.com/tenzir/tenzir/pull/4396). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Use `append_array_slice` everywhere [Section titled “Use append\_array\_slice everywhere”](#use-append_array_slice-everywhere) Fixed an issue where `null` records were sometimes transformed into non-null records with `null` fields. We fixed an issue that sometimes caused `subscribe` to fail when multiple `publish` operators pushed to the same topic at the exact same time. By [@jachris](https://github.com/jachris) in [#4394](https://github.com/tenzir/tenzir/pull/4394). #### Prevent unbounded memory usage in `export --live` [Section titled “Prevent unbounded memory usage in export --live”](#prevent-unbounded-memory-usage-in-export---live-1) We fixed a bug that caused a potentially unbounded memory usage in `export --live`, `metrics --live`, and `diagnostics --live`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4396](https://github.com/tenzir/tenzir/pull/4396).

# Tenzir Node v4.18.4

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.18.4). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Break back pressure in hidden subscribers [Section titled “Break back pressure in hidden subscribers”](#break-back-pressure-in-hidden-subscribers) The `subscribe` operator no longer propagates back pressure to its corresponding `publish` operators when part of a pipeline that runs in the background, i.e., is not visible on the overview page on app.tenzir.com. An invisible subscriber should never be able to slow down a publisher. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4399](https://github.com/tenzir/tenzir/pull/4399).

# Tenzir Node v4.18.5

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.18.5). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Add new `unflatten` implementation [Section titled “Add new unflatten implementation”](#add-new-unflatten-implementation) The `unflatten` operator now correctly preserves field order and overwrites in case of a name conflict. By [@jachris](https://github.com/jachris) in [#4405](https://github.com/tenzir/tenzir/pull/4405).

# Tenzir Node v4.19.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.19.0). ### Features [Section titled “Features”](#features) #### Add the `buffer` operator for breaking back pressure [Section titled “Add the buffer operator for breaking back pressure”](#add-the-buffer-operator-for-breaking-back-pressure) The `buffer` operator buffers up to the specified number of events in an in-memory buffer. By default, operators in a pipeline run only when their downstream operators want to receive input. This mechanism is called back pressure. The `buffer` operator effectively breaks back pressure by storing up to the specified number of events in memory, always requesting more input, which allows upstream operators to run uninterruptedly even in case the downstream operators of the buffer are unable to keep up. This allows pipelines to handle data spikes more easily. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4404](https://github.com/tenzir/tenzir/pull/4404). #### Add a package manager [Section titled “Add a package manager”](#add-a-package-manager) The new `package` operator allows for adding and removing packages, a combination of pipelines and contexts deployed to a node as a set. Nodes load packages installed to `<configdir>/tenzir/package/<package-name>/package.yaml` on startup. By [@lava](https://github.com/lava) in [#4344](https://github.com/tenzir/tenzir/pull/4344). ### Changes [Section titled “Changes”](#changes) #### Remove the `use_simple_format` option for `/serve` [Section titled “Remove the use\_simple\_format option for /serve”](#remove-the-use_simple_format-option-for-serve) The `/serve` endpoint now always uses the simple output format for schema definitions. The option `use_simple_format` is now ignored. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4411](https://github.com/tenzir/tenzir/pull/4411). #### Refactor python operator setup [Section titled “Refactor python operator setup”](#refactor-python-operator-setup) The `python` operator now resolves dependencies with every fresh pipeline run. Just restart your pipeline to upgrade to the latest available versions of your Python modules. The `python` operator no longer uses `pip` but rather [`uv`](https://github.com/astral-sh/uv). In case you set custom environment variables for `pip` you need to exchange those with alternative settings that work with `uv`. By [@tobim](https://github.com/tobim) in [#4336](https://github.com/tenzir/tenzir/pull/4336). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Add the `buffer` operator for breaking back pressure [Section titled “Add the buffer operator for breaking back pressure”](#add-the-buffer-operator-for-breaking-back-pressure-1) Metrics emitted towards the end of an operator’s runtime were sometimes not recorded correctly. This now works reliably. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4404](https://github.com/tenzir/tenzir/pull/4404).

# Tenzir Node v4.19.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.19.1). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Explicitly handle AMQP heartbeats in saver [Section titled “Explicitly handle AMQP heartbeats in saver”](#explicitly-handle-amqp-heartbeats-in-saver) Activating heartbeats via `-X`/`--set` on an `amqp` saver triggered socket errors if the interval between sent messages was larger than the heartbeat interval. This has been fixed by handling heartbeat communication correctly in such cases. By [@satta](https://github.com/satta) in [#4428](https://github.com/tenzir/tenzir/pull/4428).

# Tenzir Node v4.19.2

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.19.2). ### Features [Section titled “Features”](#features) #### Add a throttle operator [Section titled “Add a throttle operator”](#add-a-throttle-operator) The throttle operator allows for limiting the bandwidth of a pipeline. By [@lava](https://github.com/lava) in [#4448](https://github.com/tenzir/tenzir/pull/4448). ### Changes [Section titled “Changes”](#changes) #### Add new expert-only options to control demand [Section titled “Add new expert-only options to control demand”](#add-new-expert-only-options-to-control-demand) We’ve made some changes that optimize Tenzir’s memory usage. Pipeline operators that emit very small batches of events or bytes at a high frequency now use less memory. The `serve` operator’s internal buffer is now soft-capped at 1Ki instead of 64Ki events, aligning the buffer size with the default upper limit for the number of events that can be fetched at once from `/serve`. The `export`, `metrics`, and `diagnostics` operators now handle back pressure better and utilize less memory in situations where the node has many small partitions. For expert users, the new `tenzir.demand` configuration section allows for controlling how eagerly operators demand input from their upstream operators. Lowering the demand reduces the peak memory usage of pipelines at some performance cost. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4447](https://github.com/tenzir/tenzir/pull/4447). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Emit metrics for events that get emitted as part of push() in the subscribe operator [Section titled “Emit metrics for events that get emitted as part of push() in the subscribe operator”](#emit-metrics-for-events-that-get-emitted-as-part-of-push-in-the-subscribe-operator) The `subscribe` operator now delivers metrics more consistently. By [@Dakostu](https://github.com/Dakostu) in [#4439](https://github.com/tenzir/tenzir/pull/4439).

# Tenzir Node v4.19.3

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.19.3). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Always store pipeline state for configured packaged pipelines [Section titled “Always store pipeline state for configured packaged pipelines”](#always-store-pipeline-state-for-configured-packaged-pipelines) Pipelines from packages now correctly remember their last run number and last state when the reinstalling the package. By [@lava](https://github.com/lava) in [#4479](https://github.com/tenzir/tenzir/pull/4479).

# Tenzir Node v4.19.4

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.19.4). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Add packages plugin to list in ‘overlay.nix’ [Section titled “Add packages plugin to list in ‘overlay.nix’”](#add-packages-plugin-to-list-in-overlaynix) The `packages` plugin is now available in the static binary release artifacts. By [@lava](https://github.com/lava) in [#4490](https://github.com/tenzir/tenzir/pull/4490).

# Tenzir Node v4.19.5

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.19.5). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix excessive CPU usage of `serve` [Section titled “Fix excessive CPU usage of serve”](#fix-excessive-cpu-usage-of-serve) The `serve` operator no longer uses an excessive amount of CPU. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4499](https://github.com/tenzir/tenzir/pull/4499).

# Tenzir Node v4.19.6

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.19.6). ### Features [Section titled “Features”](#features) #### Implement the `assert` operator [Section titled “Implement the assert operator”](#implement-the-assert-operator) The `tenzir` command-line utility gained a new option `--strict`, causing it to exit with a non-zero exit code for pipelines that emit at least one warning. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4506](https://github.com/tenzir/tenzir/pull/4506). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix a potentially uncaught exception in `shell` [Section titled “Fix a potentially uncaught exception in shell”](#fix-a-potentially-uncaught-exception-in-shell) We fixed a bug in the `shell` operator that could cause the process to crash when breaking its pipe. Now, the operator shuts down with an error diagnostic instead. Pipelines with the `python` operator now deploy more quickly, as their deployment no longer waits for the virtual environment to be set up successfully. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4508](https://github.com/tenzir/tenzir/pull/4508). #### Fix `slice 1:-1` for exactly one event [Section titled “Fix slice 1:-1 for exactly one event”](#fix-slice-1-1-for-exactly-one-event) The `slice` operator no longer crashes when used with a positive begin and negative end value when operating on less events than `-end`, e.g., when working on a single event and using `slice 0:-1`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4505](https://github.com/tenzir/tenzir/pull/4505).

# Tenzir Node v4.2.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.2.0). ### Features [Section titled “Features”](#features) #### Add a round of loaders: `http`, `https`, `ftp`, `ftps` [Section titled “Add a round of loaders: http, https, ftp, ftps”](#add-a-round-of-loaders-http-https-ftp-ftps) The new connectors `http`, `https`, `ftp`, and `ftps` simplify using remote files in pipelines via HTTP(S) and FTP(S). By [@mavam](https://github.com/mavam) in [#3499](https://github.com/tenzir/tenzir/pull/3499). #### Support parsing of concatenated PCAPs [Section titled “Support parsing of concatenated PCAPs”](#support-parsing-of-concatenated-pcaps) The `pcap` parser can now process a stream of concatenated PCAP files. On the command line, you can now parse traces with `cat *.pcap | tenzir 'read pcap'`. When providing `--emit-file-headers`, each intermediate file header yields a separate event. The `nic` loader has a new option `--emit-file-headers` that prepends a PCAP file header for every batch of bytes that the loader produces, yielding a stream of concatenated PCAP files. By [@mavam](https://github.com/mavam) in [#3513](https://github.com/tenzir/tenzir/pull/3513). #### Implement the GCS connector plugin [Section titled “Implement the GCS connector plugin”](#implement-the-gcs-connector-plugin) The new `gcs` connector enables the user to import/export file data from/to GCS buckets. By [@Dakostu](https://github.com/Dakostu) in [#3498](https://github.com/tenzir/tenzir/pull/3498). #### Support `show nics` to see network interfaces [Section titled “Support show nics to see network interfaces”](#support-show-nics-to-see-network-interfaces) You can now write `show nics` to get a list of network interfaces. Use `show nics | select name` to a get a list of possible interface names for `from nic`. By [@mavam](https://github.com/mavam) in [#3517](https://github.com/tenzir/tenzir/pull/3517). #### Add `lines` parser [Section titled “Add lines parser”](#add-lines-parser) The new `lines` parser splits its input at newline characters and produces events with a single field containing the line. By [@mavam](https://github.com/mavam) in [#3511](https://github.com/tenzir/tenzir/pull/3511). #### Implement a ZeroMQ connector [Section titled “Implement a ZeroMQ connector”](#implement-a-zeromq-connector) The new `zmq` connector ships with a saver and loader for interacting with ZeroMQ. The loader (source) implements a connecting `SUB` socket and the saver (sink) a binding `PUB` socket. The `--bind` or `--connect` flags make it possible to control the direction of connection establishment. By [@mavam](https://github.com/mavam) in [#3497](https://github.com/tenzir/tenzir/pull/3497). #### Implement the s3 connector [Section titled “Implement the s3 connector”](#implement-the-s3-connector) The new `s3` connector enables the user to import/export file data from/to S3 buckets. By [@Dakostu](https://github.com/Dakostu) in [#3496](https://github.com/tenzir/tenzir/pull/3496). ### Changes [Section titled “Changes”](#changes) #### Do not drop the `data` field in `decapsulate` [Section titled “Do not drop the data field in decapsulate”](#do-not-drop-the-data-field-in-decapsulate) The `decapsulate` operator no longer drops the PCAP packet data in incoming events. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3515](https://github.com/tenzir/tenzir/pull/3515). #### Support parsing of concatenated PCAPs [Section titled “Support parsing of concatenated PCAPs”](#support-parsing-of-concatenated-pcaps-1) The long option name `--emit-file-header` of the `pcap` parser is now called `--emit-file-headers` (plural) to streamline it with the `nic` loader and the new capability to process concatenated PCAP files. By [@mavam](https://github.com/mavam) in [#3513](https://github.com/tenzir/tenzir/pull/3513). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Bump submodule pointer to include pipeline manager deserialization update [Section titled “Bump submodule pointer to include pipeline manager deserialization update”](#bump-submodule-pointer-to-include-pipeline-manager-deserialization-update) Pipelines now show up in the “stopped” instead of the “created” state after the node restarted. By [@Dakostu](https://github.com/Dakostu) in [#3487](https://github.com/tenzir/tenzir/pull/3487).

# Tenzir Node v4.20.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.20.0). ### Features [Section titled “Features”](#features) #### Perform individual catalog lookups in `lookup` [Section titled “Perform individual catalog lookups in lookup”](#perform-individual-catalog-lookups-in-lookup) The `lookup` operator is now smarter about retroactive lookups for frequently updated contexts and avoids loading data from disk multiple times for context updates that arrive shortly after one another. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4535](https://github.com/tenzir/tenzir/pull/4535). #### Implement the `cache` operator [Section titled “Implement the cache operator”](#implement-the-cache-operator) The `cache` operator is a transformation that passes through events, creating an in-memory cache of events on the first use. On subsequent uses, the operator signals upstream operators no to start at all, and returns the cached events immediately. The operator may also be used as a source for reading from a cache only, or as a sink for writing to a cache only. The `/pipeline/launch` operator features four new parameters `cache_id`, `cache_capacity`,`cache_ttl`, and `cache_max_ttl`. If a `cache_id` is specified, the pipeline’s implicit sink will use the `cache` operator under the hood. At least one of `serve_id` and `cache_id` must be specified. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4515](https://github.com/tenzir/tenzir/pull/4515). #### Remove the legacy metrics system [Section titled “Remove the legacy metrics system”](#remove-the-legacy-metrics-system) The new `rebuild` metrics contain information about running partition rebuilds. The `ingest` metrics contain information about all ingested events and their schema. This is slightly different from the existing `import` metrics, which track only events imported via the `import` operator, and are separate per pipeline. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4381](https://github.com/tenzir/tenzir/pull/4381). #### Implement unstoppable pipelines [Section titled “Implement unstoppable pipelines”](#implement-unstoppable-pipelines) The new `unstoppable` flag allows for pipelines to run and repeat indefinitely without the ability to stop or pause. By [@Dakostu](https://github.com/Dakostu) in [#4513](https://github.com/tenzir/tenzir/pull/4513). ### Changes [Section titled “Changes”](#changes) #### Remove the legacy metrics system [Section titled “Remove the legacy metrics system”](#remove-the-legacy-metrics-system-1) The previously deprecated legacy metrics system configured via the `tenzir.metrics` configuration section no longer exists. Use the `metrics` operator instead. `lookup` metrics no longer contain the `snapshot` field; instead, the values show in the `retro` field. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4381](https://github.com/tenzir/tenzir/pull/4381). #### Remove special character escaping from `lines_printer` [Section titled “Remove special character escaping from lines\_printer”](#remove-special-character-escaping-from-lines_printer) The `lines` printer now does not perform any escaping and is no longer an alias to the `ssv` printer. Additionally, nulls are skipped, instead of being printed as `-`. By [@raxyte](https://github.com/raxyte) in [#4520](https://github.com/tenzir/tenzir/pull/4520). #### PRs 4455-4549 [Section titled “PRs 4455-4549”](#prs-4455-4549) The `show` operator is deprecated. Use the operator `<aspect>` instead of `show <aspect>`. The information from `show dependencies` and `show build` is now available in the `version` operator. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4455](https://github.com/tenzir/tenzir/pull/4455). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix a crash when starting `export` on shutdown [Section titled “Fix a crash when starting export on shutdown”](#fix-a-crash-when-starting-export-on-shutdown) We fixed an issue where the `export`, `metrics`, or `diagnostics` operators crashed the node when started while the node was shutting down or after an unexpected filesystem error occurred. This happened frequently while using the Tenzir Platform, which subscribes to metrics and diagnostics automatically. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4530](https://github.com/tenzir/tenzir/pull/4530). #### Perform individual catalog lookups in `lookup` [Section titled “Perform individual catalog lookups in lookup”](#perform-individual-catalog-lookups-in-lookup-1) We fixed a bug that sometimes caused the `retro.queued_events` value in `lookup` metrics to stop going down again. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4535](https://github.com/tenzir/tenzir/pull/4535). #### Fix data parser precedence [Section titled “Fix data parser precedence”](#fix-data-parser-precedence) IPv6 addresses with a prefix that is a valid duration, for example `2dff::` with the prefix `2d`, now correctly parse as an IP instead of a string. By [@jachris](https://github.com/jachris) in [#4523](https://github.com/tenzir/tenzir/pull/4523). #### Fix regression in `azure-log-analytics` [Section titled “Fix regression in azure-log-analytics”](#fix-regression-in-azure-log-analytics) We fixed a regression introduced in Tenzir v4.19.2 in the `azure-log-analytics` operator that prevented it from starting correctly. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4516](https://github.com/tenzir/tenzir/pull/4516). #### Fix crash for heterogeneous subnet lookup tables [Section titled “Fix crash for heterogeneous subnet lookup tables”](#fix-crash-for-heterogeneous-subnet-lookup-tables) `context inspect <ctx>` no longer crashes for lookup table contexts with values of multiple schemas when using subnets as keys. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4531](https://github.com/tenzir/tenzir/pull/4531).

# Tenzir Node v4.20.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.20.1). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix `/pipeline/launch` when no cache is provided [Section titled “Fix /pipeline/launch when no cache is provided”](#fix-pipelinelaunch-when-no-cache-is-provided) We fixed a regression introduced with Tenzir v4.20 that sometimes caused the Tenzir Platform to fail to fetch results from pipelines. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4554](https://github.com/tenzir/tenzir/pull/4554).

# Tenzir Node v4.20.2

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.20.2). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Allow binding to low ports in systemd [Section titled “Allow binding to low ports in systemd”](#allow-binding-to-low-ports-in-systemd) The systemd unit now allows binding to privileged ports by default via the ambient capability `CAP_NET_BIND_SERVICE`. By [@tobim](https://github.com/tobim) in [#4580](https://github.com/tenzir/tenzir/pull/4580). #### Add OCSF schema type definitions [Section titled “Add OCSF schema type definitions”](#add-ocsf-schema-type-definitions) The empty record type is no longer rejected in schema definitions. By [@jachris](https://github.com/jachris) in [#4558](https://github.com/tenzir/tenzir/pull/4558). #### Fix a use-after-free in the `xsv` parser [Section titled “Fix a use-after-free in the xsv parser”](#fix-a-use-after-free-in-the-xsv-parser) We fixed a potential crash in the `csv`, `ssv`, and `tsv` parsers for slowly arriving inputs. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4570](https://github.com/tenzir/tenzir/pull/4570). #### Fix the `azure-log-analytics` operator (again) [Section titled “Fix the azure-log-analytics operator (again)”](#fix-the-azure-log-analytics-operator-again) The `azure-log-analytics` operator sometimes errored on startup complaining about am unknown `window` option. This no longer occurs. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4578](https://github.com/tenzir/tenzir/pull/4578). #### Fix compile error with fmt 11.0.2 [Section titled “Fix compile error with fmt 11.0.2”](#fix-compile-error-with-fmt-1102) We fixed a bug that caused the Demo Node package not to be pre-installed correctly when using the `tenzir/tenzir-demo` Docker image. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4559](https://github.com/tenzir/tenzir/pull/4559). #### Set `SO_REUSEADDR` in the UDP connector [Section titled “Set SO\_REUSEADDR in the UDP connector”](#set-so_reuseaddr-in-the-udp-connector) Restarting pipelines with the `udp` connector no longer fails to bind to the socket. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4579](https://github.com/tenzir/tenzir/pull/4579).

# Tenzir Node v4.20.3

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.20.3). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix a logic error for retried requests in `/serve` [Section titled “Fix a logic error for retried requests in /serve”](#fix-a-logic-error-for-retried-requests-in-serve) The `/serve` endpoint now gracefully handles retried requests with the same continuation token, returning the same result for each request. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4585](https://github.com/tenzir/tenzir/pull/4585). #### Remove the delay between importing and exporting events [Section titled “Remove the delay between importing and exporting events”](#remove-the-delay-between-importing-and-exporting-events) We fixed a bug where the `export`, `metrics`, and `diagnostics` operators were sometimes missing events from up to the last 30 seconds. In the Tenzir Platform, this showed itself as a gap in activity sparkbars upon loading the page. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4583](https://github.com/tenzir/tenzir/pull/4583).

# Tenzir Node v4.21.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.21.0). ### Features [Section titled “Features”](#features) #### Add a —null option to the lines parser [Section titled “Add a —null option to the lines parser”](#add-a-null-option-to-the-lines-parser) The `lines` parser can now handle null delimited “lines” with the `--null` flag. By [@tobim](https://github.com/tobim) in [#4603](https://github.com/tenzir/tenzir/pull/4603). #### Support bytes inputs in the `buffer` operator [Section titled “Support bytes inputs in the buffer operator”](#support-bytes-inputs-in-the-buffer-operator) The `buffer` operator now works with bytes inputs in addition to the existing support for events inputs. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4594](https://github.com/tenzir/tenzir/pull/4594). #### Precise Parsing [Section titled “Precise Parsing”](#precise-parsing) The CEF, CSV, GELF, JSON, KV, LEEF, Suricata, Syslog, XSV, YAML and Zeek JSON parsers now properly adhere to the schema of the read data. Previously, parsers would merge heterogeneous input into a single, growing schema, inserting nulls for fields that did not exist in some events. The `fluent-bit` source now properly adheres to the schema of the read data. The CEF, CSV, GELF, JSON, KV, LEEF, Suricata, Syslog, XSV, YAML and Zeek JSON parsers now all support the `--schema`, `--selector` flags to parse their data according to some given schema, as well as various other flags to more precisely control their output schema. By [@IyeOnline](https://github.com/IyeOnline) in [#4527](https://github.com/tenzir/tenzir/pull/4527). #### Metrics for TCP connections [Section titled “Metrics for TCP connections”](#metrics-for-tcp-connections) `metrics tcp` shows metrics for TCP connections, emitted once every second per connection. The metrics contains the reads and writes on the socket and the number of bytes transmitted. By [@tobim](https://github.com/tobim) in [#4564](https://github.com/tenzir/tenzir/pull/4564). #### Dynamically grow simdjson buffer if necessary [Section titled “Dynamically grow simdjson buffer if necessary”](#dynamically-grow-simdjson-buffer-if-necessary) The JSON parser is now able to also handle extremely large events when not using the NDJSON or GELF mode. By [@IyeOnline](https://github.com/IyeOnline) in [#4590](https://github.com/tenzir/tenzir/pull/4590). #### Make the kv-parser consider quotes when looking for separators [Section titled “Make the kv-parser consider quotes when looking for separators”](#make-the-kv-parser-consider-quotes-when-looking-for-separators) The `kv` parser now allows for keys and values to be enclosed in double quotes: Split matches within quotes will not be considered. Quotes will be trimmed of keys and values. For example `"key"="nested = value, fun"` will now successfully parse as `{ "key" : "nested = value, fun" }`. By [@IyeOnline](https://github.com/IyeOnline) in [#4591](https://github.com/tenzir/tenzir/pull/4591). #### Implement the azure-blob-storage connector [Section titled “Implement the azure-blob-storage connector”](#implement-the-azure-blob-storage-connector) The new `azure-blob-storage` connector allows reading from and writing to Azure Blob Storage via an URI. By [@IyeOnline](https://github.com/IyeOnline) in [#4617](https://github.com/tenzir/tenzir/pull/4617). ### Changes [Section titled “Changes”](#changes) #### Prefer recent partitions for retro lookups [Section titled “Prefer recent partitions for retro lookups”](#prefer-recent-partitions-for-retro-lookups) The `lookup` operator now prefers recent data in searches for lookups against historical data instead of using the order in which context updates arrive. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4636](https://github.com/tenzir/tenzir/pull/4636). #### Switch the index to basic messaging [Section titled “Switch the index to basic messaging”](#switch-the-index-to-basic-messaging) We removed the unused `--snapshot` option from the `lookup` operator. By [@tobim](https://github.com/tobim) in [#4613](https://github.com/tenzir/tenzir/pull/4613). #### Precise Parsing [Section titled “Precise Parsing”](#precise-parsing-1) The JSON parser’s `--precise` option is now deprecated, as the “precise” mode is the new default. Use `--merge` to get the previous “imprecise” behavior. The JSON parser’s `--no-infer` option has been renamed to `--schema-only`. The old name is deprecated and will be removed in the future. By [@IyeOnline](https://github.com/IyeOnline) in [#4527](https://github.com/tenzir/tenzir/pull/4527). #### Stabilize the `bitz` format [Section titled “Stabilize the bitz format”](#stabilize-the-bitz-format) Tenzir’s internal wire format `bitz` is now considered stable. Note that the format underwent significant changes as part of its stabilization, and is incompatible with `bitz` from Tenzir Node v4.20 and older. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4633](https://github.com/tenzir/tenzir/pull/4633). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Stabilize the `bitz` format [Section titled “Stabilize the bitz format”](#stabilize-the-bitz-format-1) We fixed a very rare crash in the zero-copy parser implementation of `read feather` and `read parquet` that was caused by releasing shared memory too early. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4633](https://github.com/tenzir/tenzir/pull/4633). #### Keep from tcp pipelines running on connection failures [Section titled “Keep from tcp pipelines running on connection failures”](#keep-from-tcp-pipelines-running-on-connection-failures) Pipelines starting with `from tcp` no longer enter the failed state when an error occurrs in one of the connections. By [@tobim](https://github.com/tobim) in [#4602](https://github.com/tenzir/tenzir/pull/4602). #### Stop using connection timeout to get node components [Section titled “Stop using connection timeout to get node components”](#stop-using-connection-timeout-to-get-node-components) The `import` and `partitions` operators and the `tenzir-ctl rebuild` command no longer occasionally fail with request timeouts when the node is under high load. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4597](https://github.com/tenzir/tenzir/pull/4597). #### Make `read json --arrays-of-objects` faster [Section titled “Make read json --arrays-of-objects faster”](#make-read-json---arrays-of-objects-faster) We fixed an accidentally quadratic scaling with the number of top-level array elements in `read json --arrays-of-objects`. As a result, using this option will now be much faster. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4601](https://github.com/tenzir/tenzir/pull/4601). #### Precise Parsing [Section titled “Precise Parsing”](#precise-parsing-2) We fixed various edge cases in parsers where values would not be properly parsed as typed data and were stored as plain text instead. No input data was lost, but no valuable type information was gained either. By [@IyeOnline](https://github.com/IyeOnline) in [#4527](https://github.com/tenzir/tenzir/pull/4527).

# Tenzir Node v4.21.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.21.1). ### Features [Section titled “Features”](#features) #### Make the grok parser precise [Section titled “Make the grok parser precise”](#make-the-grok-parser-precise) The `grok` parser now allows better control over the schema inference. The `grok` parser can now be directly used when reading input, allowing for `read grok`. By [@IyeOnline](https://github.com/IyeOnline) in [#4657](https://github.com/tenzir/tenzir/pull/4657). #### Add `sample` operator [Section titled “Add sample operator”](#add-sample-operator) A new `sample` operator now provides the ability to dynamically sample input data based on the frequency of the receiving events allowing relative sampling in situations of varying load. By [@raxyte](https://github.com/raxyte) in [#4645](https://github.com/tenzir/tenzir/pull/4645). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Switch the index to basic messaging [Section titled “Switch the index to basic messaging”](#switch-the-index-to-basic-messaging) We fixed a bug that sometimes caused the `tenzir-node` process to hang on shutdown. This was most likely to happen when the node shut down immediately after starting up, e.g., because of an invalid configuration file. By [@tobim](https://github.com/tobim) in [#4613](https://github.com/tenzir/tenzir/pull/4613). #### Fix double-closing fds in the python operator [Section titled “Fix double-closing fds in the python operator”](#fix-double-closing-fds-in-the-python-operator) Fixed a bug in the python operator that could lead to random valid file descriptors in the parent process being closed prematurely. By [@lava](https://github.com/lava) in [#4646](https://github.com/tenzir/tenzir/pull/4646). #### Enable azure-blob-storage in the DEB and RPM packages [Section titled “Enable azure-blob-storage in the DEB and RPM packages”](#enable-azure-blob-storage-in-the-deb-and-rpm-packages) The `azure-blob-storage` connector is now also available in the static linux binary distributions. By [@tobim](https://github.com/tobim) in [#4649](https://github.com/tenzir/tenzir/pull/4649). #### Fix incorrect context updates count in lookup metrics [Section titled “Fix incorrect context updates count in lookup metrics”](#fix-incorrect-context-updates-count-in-lookup-metrics) We fixed a bug that caused the `context_updates` field in `metrics lookup` to be reported once per field specified in the corresponding `lookup` operator instead of being reported once per operator in total. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4655](https://github.com/tenzir/tenzir/pull/4655).

# Tenzir Node v4.22.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.22.0). ### Features [Section titled “Features”](#features) #### Implement Google Cloud Pub/Sub connectors [Section titled “Implement Google Cloud Pub/Sub connectors”](#implement-google-cloud-pubsub-connectors) The new `google-cloud-pubsub` connectors allow subscribing to a Google Cloud Pub/Sub subscription and publishing to a Google Cloud Pub/Sub topic. By [@IyeOnline](https://github.com/IyeOnline) in [#4656](https://github.com/tenzir/tenzir/pull/4656). #### Add metrics for select component actors [Section titled “Add metrics for select component actors”](#add-metrics-for-select-component-actors) We added low-level actor metrics that help admins track the system health over time. By [@tobim](https://github.com/tobim) in [#4668](https://github.com/tenzir/tenzir/pull/4668). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Clean up old venvs in the python operator [Section titled “Clean up old venvs in the python operator”](#clean-up-old-venvs-in-the-python-operator) The node now wipes its cache directory whenever it restarts. By [@lava](https://github.com/lava) in [#4669](https://github.com/tenzir/tenzir/pull/4669). #### Check cURL response codes and do not deliver data on error [Section titled “Check cURL response codes and do not deliver data on error”](#check-curl-response-codes-and-do-not-deliver-data-on-error) We fixed a bug in the HTTP connectors, that caused them to not respect the http response codes. By [@IyeOnline](https://github.com/IyeOnline) in [#4660](https://github.com/tenzir/tenzir/pull/4660).

# Tenzir Node v4.22.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.22.1). ### Features [Section titled “Features”](#features) #### Add a few new aggregation functions for TQL2 [Section titled “Add a few new aggregation functions for TQL2”](#add-a-few-new-aggregation-functions-for-tql2) We added three new, TQL2-exclusive aggregation functions: `first`, `last`, and `mode`. The functions return the first, last, and most common non-null value per group, respectively. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4679](https://github.com/tenzir/tenzir/pull/4679). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Implement `and` and `or` for `null_type` [Section titled “Implement and and or for null\_type”](#implement-and-and-or-for-null_type) The boolean operators `and`/`or` now work correctly for the type `null`. Previously, `null and false` evaluated to `null`, and a warning was emitted. Now, it evaluates to `false` without a warning. By [@raxyte](https://github.com/raxyte) in [#4689](https://github.com/tenzir/tenzir/pull/4689). #### Ensure cache directory is writable for multiple users [Section titled “Ensure cache directory is writable for multiple users”](#ensure-cache-directory-is-writable-for-multiple-users) Using the `tenzir` process from multiple users on the same host sometimes failed because the cache directory was not writable for all users. This no longer happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4694](https://github.com/tenzir/tenzir/pull/4694). #### Return instantly in `/serve` if pipeline fails early [Section titled “Return instantly in /serve if pipeline fails early”](#return-instantly-in-serve-if-pipeline-fails-early) The `/serve` endpoint now returns instantly when its pipeline fails before the endpoint is used for the first time. In the Tenzir Platform this causes the load more button in the Explorer to correctly stop showing for pipelines that fail shortly after starting. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4688](https://github.com/tenzir/tenzir/pull/4688).

# Tenzir Node v4.22.2

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.22.2). ### Features [Section titled “Features”](#features) #### Implement `<list>.sort()` and `<record>.sort()` [Section titled “Implement \<list>.sort() and \<record>.sort()”](#implement-listsort-and-recordsort) The new `sort` method sorts fields in records by name and lists by values. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4704](https://github.com/tenzir/tenzir/pull/4704). #### Add a `value_counts` aggregation function [Section titled “Add a value\_counts aggregation function”](#add-a-value_counts-aggregation-function) The new `value_counts` aggregation function returns a list of values and their frequency. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4701](https://github.com/tenzir/tenzir/pull/4701). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Enable google-cloud-pubsub connector in the Docker Image [Section titled “Enable google-cloud-pubsub connector in the Docker Image”](#enable-google-cloud-pubsub-connector-in-the-docker-image) The `google-cloud-pubsub` connector and TQL2 operators `load_google_cloud_pubsub` `save_google_cloud_pubsub` operators are now available in the Docker image. By [@IyeOnline](https://github.com/IyeOnline) in [#4690](https://github.com/tenzir/tenzir/pull/4690). #### Add a `value_counts` aggregation function [Section titled “Add a value\_counts aggregation function”](#add-a-value_counts-aggregation-function-1) We fixed a bug that caused the `mode` aggregation function to sometimes ignore some input values. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4701](https://github.com/tenzir/tenzir/pull/4701). #### Allow reinstantiating the `buffer` operator [Section titled “Allow reinstantiating the buffer operator”](#allow-reinstantiating-the-buffer-operator) We fixed a bug in the `buffer` operator that caused it to break when restarting a pipeline or using multiple buffers in a “parallel” context, such as in `load_tcp`’s pipeline argument. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4702](https://github.com/tenzir/tenzir/pull/4702). #### Explicitly close ending TCP connection sockets [Section titled “Explicitly close ending TCP connection sockets”](#explicitly-close-ending-tcp-connection-sockets) We fixed a bug that sometimes prevented incoming connections from `load_tcp` from closing properly. By [@tobim](https://github.com/tobim) in [#4674](https://github.com/tenzir/tenzir/pull/4674).

# Tenzir Node v4.23.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.23.0). ### Features [Section titled “Features”](#features) #### Implement `in` for `list_type` [Section titled “Implement in for list\_type”](#implement-in-for-list_type) The relational operator `in` now supports checking for existence of an element in a list. For example, `where x in ["important", "values"]` is functionally equivalent to `where x == "important" or x == "values"`. By [@raxyte](https://github.com/raxyte) in [#4691](https://github.com/tenzir/tenzir/pull/4691). #### Add universal function call syntax [Section titled “Add universal function call syntax”](#add-universal-function-call-syntax) TQL now supports “universal function call syntax,” which means that every method is callable as a function and every function with at least one positional argument is callable as a method. By [@jachris](https://github.com/jachris) in [#4730](https://github.com/tenzir/tenzir/pull/4730). #### Implement `floor` and `ceil` functions [Section titled “Implement floor and ceil functions”](#implement-floor-and-ceil-functions) `ceil` and `floor` join the existing `round` function for rounding numbers, durations, and timestamps upwards and downwards, respectively. By [@raxyte](https://github.com/raxyte) in [#4712](https://github.com/tenzir/tenzir/pull/4712). #### Add `load_balance` operator [Section titled “Add load\_balance operator”](#add-load_balance-operator) The new `load_balance` operator distributes events over a set of subpipelines. By [@jachris](https://github.com/jachris) in [#4720](https://github.com/tenzir/tenzir/pull/4720). #### Port kafka connector to TQL2 [Section titled “Port kafka connector to TQL2”](#port-kafka-connector-to-tql2) New `load_kafka` and `save_kafka` operators enable seamless integration with Apache Kafka in TQL2. By [@raxyte](https://github.com/raxyte) in [#4725](https://github.com/tenzir/tenzir/pull/4725). #### Add spread syntax `...expr` for lists [Section titled “Add spread syntax ...expr for lists”](#add-spread-syntax-expr-for-lists) The spread syntax `...` can now be used inside lists to expand one list into another. For example, `[1, ...[2, 3]]` evaluates to `[1, 2, 3]`. By [@jachris](https://github.com/jachris) in [#4729](https://github.com/tenzir/tenzir/pull/4729). #### Expose new hash functions [Section titled “Expose new hash functions”](#expose-new-hash-functions) We’ve added new hash functions for commonly used algorithms: `hash_md5`, `hash_sha1`, `hash_sha224`, `hash_sha256`, `hash_sha384`, `hash_sha512`, `hash_xxh3`. By [@mavam](https://github.com/mavam) in [#4705](https://github.com/tenzir/tenzir/pull/4705). #### Add a `splunk` sink operator [Section titled “Add a splunk sink operator”](#add-a-splunk-sink-operator) The new `to_splunk` sink operator writes data to Splunk HEC endpoint. By [@IyeOnline](https://github.com/IyeOnline) in [#4719](https://github.com/tenzir/tenzir/pull/4719). ### Changes [Section titled “Changes”](#changes) #### `splunk` fixes & consistent operator naming [Section titled “splunk fixes & consistent operator naming”](#splunk-fixes--consistent-operator-naming) We renamed the TQL2 `azure_log_analytics` operator to `to_azure_log_analytics`. We renamed the TQL2 `velociraptor` operator to `from_velociraptor`. By [@IyeOnline](https://github.com/IyeOnline) in [#4726](https://github.com/tenzir/tenzir/pull/4726). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Correctly handle duplicate serve requests and tune some logs [Section titled “Correctly handle duplicate serve requests and tune some logs”](#correctly-handle-duplicate-serve-requests-and-tune-some-logs) We eliminated a rare crash in the `serve` operator that was introduced in v4.20.3. By [@tobim](https://github.com/tobim) in [#4715](https://github.com/tenzir/tenzir/pull/4715). #### Fix TQL2 `summarize` with no groups and no input [Section titled “Fix TQL2 summarize with no groups and no input”](#fix-tql2-summarize-with-no-groups-and-no-input) TQL2’s `summarize` now returns a single event when used with no groups and no input events just like in TQL1, making `from [] | summarize count=count()` return `{count: 0}` instead of nothing. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4709](https://github.com/tenzir/tenzir/pull/4709). #### Make `str(enum)` return the name of the enum entry [Section titled “Make str(enum) return the name of the enum entry”](#make-strenum-return-the-name-of-the-enum-entry) The `str` function no longer returns the numeric index of an enumeration value. Instead, the result is now the actual name associated with that value. By [@jachris](https://github.com/jachris) in [#4717](https://github.com/tenzir/tenzir/pull/4717).

# Tenzir Node v4.23.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.23.1). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Only wipe the cache directory contents but not the dir itself [Section titled “Only wipe the cache directory contents but not the dir itself”](#only-wipe-the-cache-directory-contents-but-not-the-dir-itself) The node doesn’t try to recreate its cache directory on startup anymore, avoiding permissions issues on systems with strict access control. By [@lava](https://github.com/lava) in [#4742](https://github.com/tenzir/tenzir/pull/4742). #### Use separate volumes in docker-compose [Section titled “Use separate volumes in docker-compose”](#use-separate-volumes-in-docker-compose) The `docker compose` setup now uses separate local volumes for each `tenzir` directory. This fixes a bug where restarting the container resets installed packages or pipelines. By [@sunnewehr](https://github.com/sunnewehr) in [#4749](https://github.com/tenzir/tenzir/pull/4749). #### Normalize expressions for live and unpersisted data [Section titled “Normalize expressions for live and unpersisted data”](#normalize-expressions-for-live-and-unpersisted-data) We fixed a crash in pipelines that use the `export` operator and a subsequent `where` filter with certain expressions. By [@tobim](https://github.com/tobim) in [#4774](https://github.com/tenzir/tenzir/pull/4774). #### Build the `parquet` plugin in the Dockerfile [Section titled “Build the parquet plugin in the Dockerfile”](#build-the-parquet-plugin-in-the-dockerfile) The `parquet` plugin is now available in the `tenzir/tenzir` and `tenzir/tenzir-node` Docker images. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4760](https://github.com/tenzir/tenzir/pull/4760). #### Fix configuration options for the kafka plugin [Section titled “Fix configuration options for the kafka plugin”](#fix-configuration-options-for-the-kafka-plugin) We fixed a bug in the kafka plugin so that it no longer wrongly splits config options from the `yaml` files at the dot character. By [@tobim](https://github.com/tobim) in [#4761](https://github.com/tenzir/tenzir/pull/4761). #### Fix syslog parser not yielding on infinite streams [Section titled “Fix syslog parser not yielding on infinite streams”](#fix-syslog-parser-not-yielding-on-infinite-streams) We fixed a bug causing the `syslog` parser to never yield events until the input stream ended. By [@IyeOnline](https://github.com/IyeOnline) in [#4777](https://github.com/tenzir/tenzir/pull/4777). #### Fix bugs in `where` when predicate evaluates to `null` [Section titled “Fix bugs in where when predicate evaluates to null”](#fix-bugs-in-where-when-predicate-evaluates-to-null) We fixed a bug in TQL2’s `where` operator that made it sometimes return incorrect results for events for which the predicate evaluated to `null`. Now, the operator consistently warns when this happens and drops the events. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4785](https://github.com/tenzir/tenzir/pull/4785).

# Tenzir Node v4.24.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.24.0). ### Features [Section titled “Features”](#features) #### Implement `encode_base64` and `decode_base64` [Section titled “Implement encode\_base64 and decode\_base64”](#implement-encode_base64-and-decode_base64) The new functions `encode_base64` and `decode_base64` encode and decode blobs and strings as Base64. By [@raxyte](https://github.com/raxyte) in [#4806](https://github.com/tenzir/tenzir/pull/4806). #### Implement `append`, `prepend`, and `concatenate` [Section titled “Implement append, prepend, and concatenate”](#implement-append-prepend-and-concatenate) The new `append`, `prepend`, and `concatenate` functions add an element to the end of a list, to the front of a list, and merge two lists, respectively. `xs.append(y)` is equivalent to `[...xs, y]`, `xs.prepend(y)` is equivalent to `[y, ...xs]`, and `concatenate(xs, ys)` is equivalent to `[...xs, ..ys]`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4792](https://github.com/tenzir/tenzir/pull/4792). #### Implement `otherwise(<expr>, <expr>)` [Section titled “Implement otherwise(\<expr>, \<expr>)”](#implement-otherwiseexpr-expr) The function `otherwise(primary:any, fallback:any)` provides a simple way to specify a `fallback` expression when the `primary` expression evaluates to `null`. By [@raxyte](https://github.com/raxyte) in [#4794](https://github.com/tenzir/tenzir/pull/4794). #### Port `unroll` to TQL2 [Section titled “Port unroll to TQL2”](#port-unroll-to-tql2) The `unroll` operator is now available in TQL2. It takes a field of type list, and duplicates the surrounding event for every element of the list. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4736](https://github.com/tenzir/tenzir/pull/4736). #### Support decapsulating SLL2 packets [Section titled “Support decapsulating SLL2 packets”](#support-decapsulating-sll2-packets) The `decapsulate` function now handles SLL2 frames (Linux cooked capture encapsulation). By [@mavam](https://github.com/mavam) in [#4744](https://github.com/tenzir/tenzir/pull/4744). #### Implement `where` and `map` on lists [Section titled “Implement where and map on lists”](#implement-where-and-map-on-lists) The `<list>.map(<capture>, <expression>)` function replaces each value from `<list>` with the value from `<expression>`. Within `<expression>`, the elements are available as `<capture>`. For example, to add 5 to all elements in the list `xs`, use `xs = xs.map(x, x + 5)`. The `<list>.where(<capture>, <predicate>)` removes all elements from `<list>` for which the `<predicate>` evaluates to `false`. Within `<predicate>`, the elements are available as `<capture>`. For example, to remove all elements smaller than 3 from the list `xs`, use `xs = xs.where(x, x >= 3)`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4788](https://github.com/tenzir/tenzir/pull/4788). #### Implement `encode_hex()` and `decode_hex()` [Section titled “Implement encode\_hex() and decode\_hex()”](#implement-encode_hex-and-decode_hex) The functions `encode_hex` and `decode_hex` transform strings and blobs to/from their hexadecimal byte representation. By [@raxyte](https://github.com/raxyte) in [#4815](https://github.com/tenzir/tenzir/pull/4815). #### Port Contexts to TQL2 [Section titled “Port Contexts to TQL2”](#port-contexts-to-tql2) The contexts feature is now available in TQL2. It has undergone significant changes to make use of TQL2’s more powerful expressions. Contexts are shared between TQL1 and TQL2 pipelines. All operators are grouped in the `context` module, including the `enrich` and `show contexts` operators, which are now called `context::enrich` and `context::list`, respectively. To create a new context, use the `context::create_lookup_table`, `context::create_bloom_filter`, or `context::create_geoip` operators. Lookup table contexts now support separate create, write, and read timeouts via the `create_timeout`, `write_timeout`, and `read_timeout` options, respectively. The options are exclusive to contexts updated with TQL2’s `context::update` operator. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4753](https://github.com/tenzir/tenzir/pull/4753). #### Improve `to_splunk` TLS functionality [Section titled “Improve to\_splunk TLS functionality”](#improve-to_splunk-tls-functionality) The `to_splunk` operator now supports the `cacert`, `certfile`, and `keyfile` options to provide certificates for the TLS connection. By [@raxyte](https://github.com/raxyte) in [#4825](https://github.com/tenzir/tenzir/pull/4825). #### Implement `--limit` flag for the `chart` operator [Section titled “Implement --limit flag for the chart operator”](#implement---limit-flag-for-the-chart-operator) The `--limit` option for the TQL1 `chart` operator controls the previously hardcoded upper limit on the number of events in a chart. The option defaults to 10,000 events. By [@IyeOnline](https://github.com/IyeOnline) in [#4757](https://github.com/tenzir/tenzir/pull/4757). #### Add `parse_time` and `format_time` methods [Section titled “Add parse\_time and format\_time methods”](#add-parse_time-and-format_time-methods) The new `parse_time` and `format_time` functions transform strings into timestamps and vice versa. By [@mavam](https://github.com/mavam) in [#4576](https://github.com/tenzir/tenzir/pull/4576). #### Implement `x[y]` record indexing [Section titled “Implement x\[y\] record indexing”](#implement-xy-record-indexing) Indexing records with string expressions is now supported. By [@raxyte](https://github.com/raxyte) in [#4795](https://github.com/tenzir/tenzir/pull/4795). #### Implement `split`, `split_regex`, and `join` [Section titled “Implement split, split\_regex, and join”](#implement-split-split_regex-and-join) The `split` and `split_regex` functions split a string into a list of strings based on a delimiter or a regular expression, respectively. The `join` aggregation function concatenates a strings into a single string, optionally separated by a delimiter. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4799](https://github.com/tenzir/tenzir/pull/4799). #### Fix crash in `context::enrich` for heterogeneous enrichments [Section titled “Fix crash in context::enrich for heterogeneous enrichments”](#fix-crash-in-contextenrich-for-heterogeneous-enrichments) The `network` function returns the network address of a CIDR subnet. For example, `192.168.0.0/16.network()` returns `192.168.0.0`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4828](https://github.com/tenzir/tenzir/pull/4828). #### Introduce a `zip` function for merging lists [Section titled “Introduce a zip function for merging lists”](#introduce-a-zip-function-for-merging-lists) The `zip` function merges two lists into a single list of a record with two fields `left` and `right`. For example, `zip([1, 2], [3, 4])` returns `[{left: 1, right: 3}, {left: 2, right: 4}]`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4803](https://github.com/tenzir/tenzir/pull/4803). #### PRs 4716-4807 [Section titled “PRs 4716-4807”](#prs-4716-4807) The following operators are now available in TQL2 for loading and saving: `load_amqp`, `save_amqp`, `load_ftp`, `save_ftp`, `load_nic`, `load_s3`, `save_s3`, `load_sqs`, `save_sqs`, `load_udp`, `save_udp`, `load_zmq`, `save_zmq`, `save_tcp` and `save_email`. The following new operators are available in TQL2 to convert event streams to byte streams in various formats: `write_csv`, `write_feather`, `write_json`, `write_lines`, `write_ndjson`, `write_parquet`, `write_pcap`, `write_ssv`, `write_tsv`, `write_xsv`, `write_yaml`, `write_zeek_tsv`. By [@raxyte](https://github.com/raxyte) in [#4716](https://github.com/tenzir/tenzir/pull/4716). #### Allow aggregation functions to be called on lists [Section titled “Allow aggregation functions to be called on lists”](#allow-aggregation-functions-to-be-called-on-lists) Aggregation functions now work on lists. For example, `[1, 2, 3].sum()` will return `6`, and `["foo", "bar", "baz"].map(x, x == "bar").any()` will return `true`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4821](https://github.com/tenzir/tenzir/pull/4821). #### Port `unordered`, `local`, and `remote` to TQL2 [Section titled “Port unordered, local, and remote to TQL2”](#port-unordered-local-and-remote-to-tql2) The `local` and `remote` operators allow for overriding the location of a pipeline. Local operators prefer running at a client `tenzir` process, and remote operators prefer running at a remote `tenzir-node` process. These operators are primarily intended for testing purposes. The `unordered` operator throws away the order of events in a pipeline. This causes some operators to run faster, e.g., `read_ndjson` is able to parse events out of order through this. This operator is primarily intended for testing purposes, as most of the time the ordering requirements are inferred from subsequent operators in the pipeline. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4835](https://github.com/tenzir/tenzir/pull/4835). ### Changes [Section titled “Changes”](#changes) #### Stop URL-encoding pub/sub topics [Section titled “Stop URL-encoding pub/sub topics”](#stop-url-encoding-pubsub-topics) The topics provided to the `publish` and `subscribe` operators now exactly match the `topic` field in the corresponding metrics. Using `publish` and `subscribe` without an explicitly provided topic now uses the topic `main` as opposed to an implementation-defined special name. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4738](https://github.com/tenzir/tenzir/pull/4738). #### Finish porting loaders, printers and savers [Section titled “Finish porting loaders, printers and savers”](#finish-porting-loaders-printers-and-savers) The option `ndjson` for `write_json` operator has been removed in favor of a new operator `write_ndjson`. By [@raxyte](https://github.com/raxyte) in [#4762](https://github.com/tenzir/tenzir/pull/4762). #### PRs 4741-4746 [Section titled “PRs 4741-4746”](#prs-4741-4746) The functions `ocsf_category_name`, `ocsf_category_uid`, `ocsf_class_name`, and `ocsf_class_uid` are now called `ocsf::category_name`, `ocsf::category_uid`, `ocsf::class_name`, and `ocsf::class_uid`, respectively. Similarly, the `package_add`, `package_remove`, `packages`, and `show pipelines` operators are now called `package::add`, `package::remove`, `package::list`, and `pipeline::list`, respectively. By [@jachris](https://github.com/jachris) in [#4741](https://github.com/tenzir/tenzir/pull/4741). #### Improve names for the `cache` operator’s timeout options [Section titled “Improve names for the cache operator’s timeout options”](#improve-names-for-the-cache-operators-timeout-options) The `cache` operator’s `ttl` and `max_ttl` options are now called `read_timeout` and `write_timeout`, respectively. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4758](https://github.com/tenzir/tenzir/pull/4758). #### Prepare small fixes for release [Section titled “Prepare small fixes for release”](#prepare-small-fixes-for-release) The new `string` function now replaces the `str` function. The older `str` name will be available as an alias for some time for compatibility but will be removed in a future release. By [@raxyte](https://github.com/raxyte) in [#4834](https://github.com/tenzir/tenzir/pull/4834). #### Align argument parser usage format with docs [Section titled “Align argument parser usage format with docs”](#align-argument-parser-usage-format-with-docs) The usage string that is reported when an operator or function is being used incorrectly now uses the same format as the documentation. By [@jachris](https://github.com/jachris) in [#4740](https://github.com/tenzir/tenzir/pull/4740). #### Improve `to_splunk` TLS functionality [Section titled “Improve to\_splunk TLS functionality”](#improve-to_splunk-tls-functionality-1) The `tls_no_verify` option of the `to_splunk` operator is now called `skip_peer_verification`. By [@raxyte](https://github.com/raxyte) in [#4825](https://github.com/tenzir/tenzir/pull/4825). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Add timeout to multiline syslog [Section titled “Add timeout to multiline syslog”](#add-timeout-to-multiline-syslog) We fixed an oversight in the syslog parsers, which caused it to not yield an event until the next line came in. By [@IyeOnline](https://github.com/IyeOnline) in [#4829](https://github.com/tenzir/tenzir/pull/4829). #### Port Loaders, Printers, Savers [Section titled “Port Loaders, Printers, Savers”](#port-loaders-printers-savers) The docs for the `sqs` connector now correctly reflect the default of `3s` for the `--poll-time` option. By [@raxyte](https://github.com/raxyte) in [#4716](https://github.com/tenzir/tenzir/pull/4716). #### Ignore whole line when NDJSON parser fails [Section titled “Ignore whole line when NDJSON parser fails”](#ignore-whole-line-when-ndjson-parser-fails) The `read_ndjson` operator no longer uses an error-prone mechanism to continue parsing an NDJSON line that contains an error. Instead, the entire line is skipped. By [@jachris](https://github.com/jachris) in [#4801](https://github.com/tenzir/tenzir/pull/4801). #### Introduce `{package,pipeline}::list` [Section titled “Introduce {package,pipeline}::list”](#introduce-packagepipelinelist) `context inspect` crashed when used to inspect a context that was previously updated with `context update` with an input containing a field of type `enum`. This no longer happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4746](https://github.com/tenzir/tenzir/pull/4746). #### Don’t allow manual erasing of contexts from packages [Section titled “Don’t allow manual erasing of contexts from packages”](#dont-allow-manual-erasing-of-contexts-from-packages) It is no longer possible to manually remove contexts that are installed as part of a package. By [@lava](https://github.com/lava) in [#4768](https://github.com/tenzir/tenzir/pull/4768). #### Fix ODR violation of `tenzir::socket` type [Section titled “Fix ODR violation of tenzir::socket type”](#fix-odr-violation-of-tenzirsocket-type) The TQL1 and TQL2 `sockets` operators no longer crash on specific builds. By [@raxyte](https://github.com/raxyte) in [#4816](https://github.com/tenzir/tenzir/pull/4816). #### Improve `to_splunk` TLS functionality [Section titled “Improve to\_splunk TLS functionality”](#improve-to_splunk-tls-functionality-2) The `max_content_length` option for the `to_splunk` operator was named incorrectly in an earlier version to `send_timeout`. This has now been fixed. By [@raxyte](https://github.com/raxyte) in [#4825](https://github.com/tenzir/tenzir/pull/4825). #### Prepend the field added by `enumerate` [Section titled “Prepend the field added by enumerate”](#prepend-the-field-added-by-enumerate) The `enumerate` operator now correctly prepends the added index field instead of appending it. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4756](https://github.com/tenzir/tenzir/pull/4756). #### Add missing `co_yield`s in `save_http` [Section titled “Add missing co\_yields in save\_http”](#add-missing-co_yields-in-save_http) The TQL2 `save_http` operator had a bug causing it to fail to connect and get stuck in an infinite loop. This is now fixed and works as expected. By [@raxyte](https://github.com/raxyte) in [#4833](https://github.com/tenzir/tenzir/pull/4833). #### Fix `str` function quotes [Section titled “Fix str function quotes”](#fix-str-function-quotes) The `str` function no longer adds extra quotes when given a string. For example, `str("") == "\"\""` was changed to `str("") == ""`. By [@jachris](https://github.com/jachris) in [#4809](https://github.com/tenzir/tenzir/pull/4809). #### Port Contexts to TQL2 [Section titled “Port Contexts to TQL2”](#port-contexts-to-tql2-1) The last metric emitted for each run of the `enrich` operator was incorrectly named `tenzir.enrich.metrics` instead of `tenzir.metrics.enrich`, causing it not to be available via `metrics enrich`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4753](https://github.com/tenzir/tenzir/pull/4753). #### Make `to_hive` a “local” operator [Section titled “Make to\_hive a “local” operator”](#make-to_hive-a-local-operator) The `to_hive` operator now correctly writes files relative to the working directory of a `tenzir` client process instead of relative to the node. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4771](https://github.com/tenzir/tenzir/pull/4771).

# Tenzir Node v4.24.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.24.1). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix `last` aggregation [Section titled “Fix last aggregation”](#fix-last-aggregation) We fixed the `last` aggregation function to return the last element. By [@raxyte](https://github.com/raxyte) in [#4855](https://github.com/tenzir/tenzir/pull/4855). #### Check mmapped chunks for required minimum size [Section titled “Check mmapped chunks for required minimum size”](#check-mmapped-chunks-for-required-minimum-size) We fixed a bug introduced with v4.24.0 causing crashes on startup when some of the files in the node’s state directory were smaller than 12 bytes. By [@lava](https://github.com/lava) in [#4856](https://github.com/tenzir/tenzir/pull/4856). #### Fix a rare crash in the index actor on startup [Section titled “Fix a rare crash in the index actor on startup”](#fix-a-rare-crash-in-the-index-actor-on-startup) We fixed a rare crash on startup that would occur when starting the `tenzir-node` process was so slow that it would try to emit metrics before the component handling metrics was ready. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4846](https://github.com/tenzir/tenzir/pull/4846). #### Fix operator name for TQL2 `nics` [Section titled “Fix operator name for TQL2 nics”](#fix-operator-name-for-tql2-nics) The TQL2 `nics` operator had a bug causing the operator name to be `nic`. This has now been fixed and works as documented. By [@raxyte](https://github.com/raxyte) in [#4847](https://github.com/tenzir/tenzir/pull/4847).

# Tenzir Node v4.25.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.25.0). ### Features [Section titled “Features”](#features) #### Add `to_opensearch` and `to_elasticsearch` sink operators [Section titled “Add to\_opensearch and to\_elasticsearch sink operators”](#add-to_opensearch-and-to_elasticsearch-sink-operators) A new operator `to_opensearch` is now available for sending data to OpenSearch-compatible Bulk API providers including ElasticSearch. By [@raxyte](https://github.com/raxyte) in [#4871](https://github.com/tenzir/tenzir/pull/4871). #### Add `duration(string) -> duration` [Section titled “Add duration(string) -> duration”](#add-durationstring---duration) The new `duration` function now allows to parse expressions resulting in strings as duration values. By [@raxyte](https://github.com/raxyte) in [#4877](https://github.com/tenzir/tenzir/pull/4877). #### Introduce a TQL2-only mode [Section titled “Introduce a TQL2-only mode”](#introduce-a-tql2-only-mode) Start your Tenzir Node with `tenzir-node --tql2` or set the `TENZIR_TQL2=true` environment variable to enable TQL2-only mode for your node. In this mode, all pipelines will run as TQL2, with the old TQL1 pipelines only being available through the `legacy` operator. In Q1 2025, this option will be enabled by default, and later in 2025 the `legacy` operator and TQL1 support will be removed entirely. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4840](https://github.com/tenzir/tenzir/pull/4840). #### Parse `x not in y` as `not x in y` [Section titled “Parse x not in y as not x in y”](#parse-x-not-in-y-as-not-x-in-y) TQL2 now allows writing `x not in y` as an equivalent to `not (x in y)` for better readability. By [@raxyte](https://github.com/raxyte) in [#4844](https://github.com/tenzir/tenzir/pull/4844). #### Implement `ip in subnet` and `subnet in subnet` [Section titled “Implement ip in subnet and subnet in subnet”](#implement-ip-in-subnet-and-subnet-in-subnet) Whether an IP address is contained in a subnet can now be checked using expressions such as `1.2.3.4 in 1.2.0.0/16`. Similarly, to check whether a subnet is included in another subnet, use `1.2.0.0/16 in 1.0.0.0/8`. By [@jachris](https://github.com/jachris) in [#4841](https://github.com/tenzir/tenzir/pull/4841). #### Implement TQL2 `from` and `to` [Section titled “Implement TQL2 from and to”](#implement-tql2-from-and-to) We have added the `from` operator that allows you to easily onboard data from most sources. For example, you can now write `from "https://example.com/file.json.gz"` to automatically deduce the load operator, compression, and format. We have added the `to` operator that allows you to easily send data to most destinations. For example, you can now write `to "ftps://example.com/file.json.gz"` to automatically deduce the save operator, compression, and format. You can use the new `subnet(string)` function to parse strings as subnets. By [@IyeOnline](https://github.com/IyeOnline) in [#4805](https://github.com/tenzir/tenzir/pull/4805). #### Enhance HTTP connector controls [Section titled “Enhance HTTP connector controls”](#enhance-http-connector-controls) Several new options are now available for the `load_http` operator: `data`, `json`, `form`, `skip_peer_verification`, `skip_hostname_verification`, `chunked`, and `multipart`. The `skip_peer_verification` and `skip_hostname_verification` options are now also available for the `save_http` operator. By [@mavam](https://github.com/mavam) in [#4811](https://github.com/tenzir/tenzir/pull/4811). #### Custom quotes and doubled quote escaping [Section titled “Custom quotes and doubled quote escaping”](#custom-quotes-and-doubled-quote-escaping) The `read_csv`, `read_kv`, `read_ssv`, `read_tsv` and `read_xsv` operators now support custom quote characters. The `read_csv`, `read_ssv`, `read_tsv` and `read_xsv` operators support doubled quote escaping. The `read_csv`, `read_ssv`, `read_tsv` and `read_xsv` operators now accept multi-character strings as separators. The `list_sep` option for the `read_csv`, `read_ssv`, `read_tsv` and `read_xsv` operators can be set to an empty string, which will disable list parsing. The new `string.parse_leef()` function can be used to parse a string as a LEEF message. By [@IyeOnline](https://github.com/IyeOnline) in [#4837](https://github.com/tenzir/tenzir/pull/4837). #### Add Snowflake sink [Section titled “Add Snowflake sink”](#add-snowflake-sink) We have added a new `to_snowflake` sink operator, writing events into a [snowflake](https://www.snowflake.com/) table. By [@IyeOnline](https://github.com/IyeOnline) in [#4589](https://github.com/tenzir/tenzir/pull/4589). #### Implement `float(number|string)` [Section titled “Implement float(number|string)”](#implement-floatnumberstring) Numbers and string expressions containing numbers can now be converted into `float` type values using the `float` function. By [@raxyte](https://github.com/raxyte) in [#4882](https://github.com/tenzir/tenzir/pull/4882). #### Port `deduplicate` to TQL2 [Section titled “Port deduplicate to TQL2”](#port-deduplicate-to-tql2) The `deduplicate` operator in TQL2 to help you remove events with a common key. The operator provides more flexibility than its TQL1 pendant by letting the common key use any expression, not just a field name. You can also control timeouts with finer granularity. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4850](https://github.com/tenzir/tenzir/pull/4850). #### Add user-defined operators to TQL2 [Section titled “Add user-defined operators to TQL2”](#add-user-defined-operators-to-tql2) User-defined operators can now be written and used in TQL2. To use TQL2, start your definition with the comment `// tql2`, or use the `--tql2` flag to opt into TQL2 as the default. By [@jachris](https://github.com/jachris) in [#4884](https://github.com/tenzir/tenzir/pull/4884). #### Implement `context::erase` [Section titled “Implement context::erase”](#implement-contexterase) The `context::erase` operator allows you to selectively remove entries from contexts. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4864](https://github.com/tenzir/tenzir/pull/4864). #### `save_email` cleanup [Section titled “save\_email cleanup”](#save_email-cleanup) The `save_email` now accepts a `tls` option to specify TLS usage when establishing the SMTP connection. By [@raxyte](https://github.com/raxyte) in [#4848](https://github.com/tenzir/tenzir/pull/4848). ### Changes [Section titled “Changes”](#changes) #### Split `compress`/`decompress` into separate operators [Section titled “Split compress/decompress into separate operators”](#split-compressdecompress-into-separate-operators) The `compress` and `decompress` operators have been deprecated in favor of separate operators for each compression algorithm. These new operators expose additional options, such as `compress_gzip level=10, format="deflate"`. By [@IyeOnline](https://github.com/IyeOnline) in [#4876](https://github.com/tenzir/tenzir/pull/4876). #### Make the expression evaluator support heterogeneous results [Section titled “Make the expression evaluator support heterogeneous results”](#make-the-expression-evaluator-support-heterogeneous-results) Functions can now return values of different types for the same input types. For example, `x.otherwise(y)` no longer requires that `x` has the same type as `y`. By [@jachris](https://github.com/jachris) in [#4839](https://github.com/tenzir/tenzir/pull/4839). #### Implement TQL2 `from` and `to` [Section titled “Implement TQL2 from and to”](#implement-tql2-from-and-to-1) The `topic` argument for `load_kafka` and `save_kafka` is now a positional argument, instead of a named argument. The array version of `from` that allowed you to create multiple events has been removed. Instead, you can just pass multiple records to `from` now. By [@IyeOnline](https://github.com/IyeOnline) in [#4805](https://github.com/tenzir/tenzir/pull/4805). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix operator parenthesis continuation [Section titled “Fix operator parenthesis continuation”](#fix-operator-parenthesis-continuation) Operator invocations that directly use parenthesis but continue after the closing parenthesis are no longer rejected. For example, `where (x or y) and z` is now being parsed correctly. By [@jachris](https://github.com/jachris) in [#4885](https://github.com/tenzir/tenzir/pull/4885). #### Fix handling of empty records in `write_parquet` [Section titled “Fix handling of empty records in write\_parquet”](#fix-handling-of-empty-records-in-write_parquet) `write_parquet` now gracefully handles nested empty records by replacing them with nulls. The Apache Parquet format does fundamentally not support empty nested records. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4874](https://github.com/tenzir/tenzir/pull/4874). #### Make the expression evaluator support heterogeneous results [Section titled “Make the expression evaluator support heterogeneous results”](#make-the-expression-evaluator-support-heterogeneous-results-1) Metadata such as `@name` can now be set to a dynamically computed value that does not have to be a constant. For example, if the field `event_name` should be used as the event name, `@name = event_name` now correctly assigns the events their name instead of using the first value. By [@jachris](https://github.com/jachris) in [#4839](https://github.com/tenzir/tenzir/pull/4839). #### `save_email` cleanup [Section titled “save\_email cleanup”](#save_email-cleanup-1) The `endpoint` argument of the `save_email` operator was documented as optional but was not parsed as so. This has been fixed and the argument is now correctly optional. By [@raxyte](https://github.com/raxyte) in [#4848](https://github.com/tenzir/tenzir/pull/4848). #### Fix pipeline manager discarding parse-time warnings [Section titled “Fix pipeline manager discarding parse-time warnings”](#fix-pipeline-manager-discarding-parse-time-warnings) Warnings that happen very early during pipeline startup now correctly show up in the Tenzir Platform. By [@jachris](https://github.com/jachris) in [#4867](https://github.com/tenzir/tenzir/pull/4867). #### Validate legacy expressions when splitting for predicate pushdown [Section titled “Validate legacy expressions when splitting for predicate pushdown”](#validate-legacy-expressions-when-splitting-for-predicate-pushdown) Pipelines that begin with `export | where` followed by an expression that does not depend on the incoming events, such as `export | where 1 == 1`, no longer cause an internal error. By [@jachris](https://github.com/jachris) in [#4861](https://github.com/tenzir/tenzir/pull/4861).

# Tenzir Node v4.26.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.26.0). ### Features [Section titled “Features”](#features) #### Introduce CAF metrics [Section titled “Introduce CAF metrics”](#introduce-caf-metrics) `metrics "caf"` offers insights into Tenzir’s underlying actor system. This is primarily aimed at developers for performance benchmarking. The new `merge` function combines two records. `merge(foo, bar)` is a shorthand for `{...foo, ...bar}`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4897](https://github.com/tenzir/tenzir/pull/4897). #### TQL printer [Section titled “TQL printer”](#tql-printer) You can use the new `write_tql` operator to print events as TQL expressions. We added `strip` options to `write_json` and `write_ndjson`, allowing you to strip null fields as well as empty records or lists. By [@IyeOnline](https://github.com/IyeOnline) in [#4921](https://github.com/tenzir/tenzir/pull/4921). #### Implement `match_regex` [Section titled “Implement match\_regex”](#implement-match_regex) You can use the new `string.match_regex(regex:string)` function to check whether a string partially matches a regular expression. By [@IyeOnline](https://github.com/IyeOnline) in [#4917](https://github.com/tenzir/tenzir/pull/4917). #### Implement `to_asl` operator [Section titled “Implement to\_asl operator”](#implement-to_asl-operator) We added a `to_asl` operator that can be used to send OCSF normalized events to an Amazon Security Lake. By [@IyeOnline](https://github.com/IyeOnline) in [#4911](https://github.com/tenzir/tenzir/pull/4911). ### Changes [Section titled “Changes”](#changes) #### TQL printer [Section titled “TQL printer”](#tql-printer-1) The implicit sources and sinks that can be set via commandline options or configuration now use TQL2. The default implicit event sink now writes TQL values instead of JSON. By [@IyeOnline](https://github.com/IyeOnline) in [#4921](https://github.com/tenzir/tenzir/pull/4921). #### Fix overzealous parameter validation in `/pipeline/launch` [Section titled “Fix overzealous parameter validation in /pipeline/launch”](#fix-overzealous-parameter-validation-in-pipelinelaunch) Contexts persist less frequently now in the background, reducing their resource usage. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4919](https://github.com/tenzir/tenzir/pull/4919). #### Improve configured pipeline startup errors [Section titled “Improve configured pipeline startup errors”](#improve-configured-pipeline-startup-errors) Errors from the startup of configured pipelines, including those coming from configured packages, now have improved rendering. By [@jachris](https://github.com/jachris) in [#4886](https://github.com/tenzir/tenzir/pull/4886). #### Use adaptive resolution and `Z` suffix in timestamp printer [Section titled “Use adaptive resolution and Z suffix in timestamp printer”](#use-adaptive-resolution-and-z-suffix-in-timestamp-printer) Timestamps are now printed with a `Z` suffix to indicate that they are relative to UTC. Furthermore, the fractional part of the seconds is no longer always printed using 6 digits. Instead, timestamps that do not have sub-second information no longer have a fractional part. Other timestamps are either printed with 3, 6 or 9 fractional digits, depending on their resolution. Durations that are printed as minutes now use `min` instead of `m`. Additionally, the fractional part of durations is now printed with full precision instead of being rounded to two digits. By [@jachris](https://github.com/jachris) in [#4916](https://github.com/tenzir/tenzir/pull/4916). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix CONVERSION part for GROK patterns [Section titled “Fix CONVERSION part for GROK patterns”](#fix-conversion-part-for-grok-patterns) We fixed a bug which broke the CONVERSION part of the GROK pattern semantic. By [@IyeOnline](https://github.com/IyeOnline) in [#4939](https://github.com/tenzir/tenzir/pull/4939). #### Fix overzealous parameter validation in `/pipeline/launch` [Section titled “Fix overzealous parameter validation in /pipeline/launch”](#fix-overzealous-parameter-validation-in-pipelinelaunch-1) We fixed an overzealous parameter validation bug that prevented the use of the `/pipeline/launch` API endpoint when specifying a `cache_id` without a `serve_id` when `definition` contained a definition for a pipeline without a sink. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4919](https://github.com/tenzir/tenzir/pull/4919).

# Tenzir Node v4.27.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.27.0). ### Features [Section titled “Features”](#features) #### Add plugin options to enable self-signed platform certificates [Section titled “Add plugin options to enable self-signed platform certificates”](#add-plugin-options-to-enable-self-signed-platform-certificates) The `platform` plugin now understands the `skip-peer-verification` and `cacert` options in order to enable connections to self-hosted platform instances with self-signed TLS certificates. By [@lava](https://github.com/lava) in [#4918](https://github.com/tenzir/tenzir/pull/4918). #### Implement `chart_line`, `chart_area`, `chart_bar` and `chart_pie` [Section titled “Implement chart\_line, chart\_area, chart\_bar and chart\_pie”](#implement-chart_line-chart_area-chart_bar-and-chart_pie) Charting functionality is now available in TQL2 via the new `chart_area`, `chart_bar`, `chart_line` and `chart_pie` operators and the [Tenzir Platform](https://app.tenzir.com). By [@raxyte](https://github.com/raxyte) in [#4888](https://github.com/tenzir/tenzir/pull/4888). #### Implement `unroll` for records [Section titled “Implement unroll for records”](#implement-unroll-for-records) The `unroll` operator now works for record fields as well as lists. The operator duplicates the surrounding event for every field in the specified record. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4934](https://github.com/tenzir/tenzir/pull/4934). #### Implement AWS MSK IAM Authentication Mechanism for `{load,save}_kafka` [Section titled “Implement AWS MSK IAM Authentication Mechanism for {load,save}\_kafka”](#implement-aws-msk-iam-authentication-mechanism-for-loadsave_kafka) The `load_kafka` and `save_kafka` operators can now authenticate with AWS MSK using IAM via the new `aws_iam` options. By [@raxyte](https://github.com/raxyte) in [#4944](https://github.com/tenzir/tenzir/pull/4944). #### Add `batches` to input/output operator metrics [Section titled “Add batches to input/output operator metrics”](#add-batches-to-inputoutput-operator-metrics) `metrics "operator"` now includes a new `batches` field under the `input` and `output` records that counts how many batches of events or bytes the metric was generated from. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4962](https://github.com/tenzir/tenzir/pull/4962). #### Add `tenzir.retention` configuration [Section titled “Add tenzir.retention configuration”](#add-tenzirretention-configuration) The new `tenzir.retention.metrics` and `tenzir.retention.diagnostics` configuration options configure how long Tenzir Nodes retain metrics and diagnostics. The policies are checked once every hour. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4949](https://github.com/tenzir/tenzir/pull/4949). ### Changes [Section titled “Changes”](#changes) #### Deprecate TQL1 [Section titled “Deprecate TQL1”](#deprecate-tql1) TQL1 is now deprecated in favor of TQL2. Starting a TQL1 pipeline issues a warning on startup nudging towards upgrading to TQL2, which will become the default in the upcoming Tenzir v5.0 release. This warning cannot be turned off. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4954](https://github.com/tenzir/tenzir/pull/4954). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Implement AWS MSK IAM Authentication Mechanism for `{load,save}_kafka` [Section titled “Implement AWS MSK IAM Authentication Mechanism for {load,save}\_kafka”](#implement-aws-msk-iam-authentication-mechanism-for-loadsave_kafka-1) Operators such as `load_kafka`, `load_s3` etc can now correctly read their respective YAML configs. By [@raxyte](https://github.com/raxyte) in [#4944](https://github.com/tenzir/tenzir/pull/4944).

# Tenzir Node v4.28.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.28.0). ### Features [Section titled “Features”](#features) #### Implement `parse_syslog` [Section titled “Implement parse\_syslog”](#implement-parse_syslog) You can use the new `parse_syslog` function to parse a string as a syslog message. By [@IyeOnline](https://github.com/IyeOnline) in [#4980](https://github.com/tenzir/tenzir/pull/4980). #### Add explicit `tls` options to `to_opensearch` and `to_splunk` [Section titled “Add explicit tls options to to\_opensearch and to\_splunk”](#add-explicit-tls-options-to-to_opensearch-and-to_splunk) `to_opensearch` and `to_splunk` now feature an explicit `tls` option. By [@IyeOnline](https://github.com/IyeOnline) in [#4983](https://github.com/tenzir/tenzir/pull/4983). #### More parsing functions [Section titled “More parsing functions”](#more-parsing-functions) It is now possible to define additional patterns in the `parse_grok` function. The `read_xsv` family of parsers now accept the `header` as a list of strings as an alternative to a single delimited string. `read_grok` now accepts additional `pattern_definitions` as either a `record` mapping from pattern name to definition or a `string` of newline separated patterns definitions. We introduced the `parse_csv`, `parse_kv`, `parse_ssv`, `parse_tsv`, `parse_xsv` and `parse_yaml` functions, allowing you to parse strings as those formats. The `map` function now handles cases where list elements mapped to different types. By [@IyeOnline](https://github.com/IyeOnline) in [#4933](https://github.com/tenzir/tenzir/pull/4933). #### Implement `load_stdin` and `save_stdout` [Section titled “Implement load\_stdin and save\_stdout”](#implement-load_stdin-and-save_stdout) The new `load_stdin` operator accepts bytes from standard input, while `save_stdout` writes bytes to standard output. By [@IyeOnline](https://github.com/IyeOnline) in [#4969](https://github.com/tenzir/tenzir/pull/4969). ### Changes [Section titled “Changes”](#changes) #### Stop collecting metrics for hidden pipelines [Section titled “Stop collecting metrics for hidden pipelines”](#stop-collecting-metrics-for-hidden-pipelines) `metrics "operator"` no longer includes metrics from hidden pipelines, such as pipelines run under-the-hood by the Tenzir Platform. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4966](https://github.com/tenzir/tenzir/pull/4966). #### Evict old caches when exceeding capacity limits [Section titled “Evict old caches when exceeding capacity limits”](#evict-old-caches-when-exceeding-capacity-limits) Unless specified explicitly, the `cache` has no more default capacity in terms of number of events per cache. Instead, the node now tracks the global cache capacity in number of bytes. This is limited to 1GiB by default, and can be configured with the `tenzir.cache.capacity` option. For practical reasons, we require at least 64MiB of caches. The default `write_timeout` of caches increased from 1 minute to 10 minutes, and can now be configured with the `tenzir.cache.lifetime` option. The `/serve` endpoint now returns an additional field `state`, which can be one of `running`, `completed`, or `failed`, indicating the status of the pipeline with the corresponding `serve` operator at the time of the request. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4984](https://github.com/tenzir/tenzir/pull/4984). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### More parsing functions [Section titled “More parsing functions”](#more-parsing-functions-1) Re-defining a predefined grok pattern no longer terminates the application. The `string.parse_json()` function can now parse single numbers or strings instead of only objects. `read_leef` and `parse_leef` now include the `event_class_id` in their output. `read_yaml` now properly parses numbers as numbers. By [@IyeOnline](https://github.com/IyeOnline) in [#4933](https://github.com/tenzir/tenzir/pull/4933). #### Fix shutdown of the lookup helper actor [Section titled “Fix shutdown of the lookup helper actor”](#fix-shutdown-of-the-lookup-helper-actor) We sqashed a bug that prevented the `tenzir-node` process from exiting cleanly while the `lookup` operator was used in a pipeline. By [@tobim](https://github.com/tobim) in [#4978](https://github.com/tenzir/tenzir/pull/4978). #### Evict old caches when exceeding capacity limits [Section titled “Evict old caches when exceeding capacity limits”](#evict-old-caches-when-exceeding-capacity-limits-1) We fixed an up to 60 seconds hang in requests to the `/serve` endpoint when the request was issued after the pipeline with the corresponding `serve` operator was started and before it finished with an error and without results. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4984](https://github.com/tenzir/tenzir/pull/4984).

# Tenzir Node v4.28.2

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.28.2). ### Features [Section titled “Features”](#features) #### Add `fill` option to chart operators [Section titled “Add fill option to chart operators”](#add-fill-option-to-chart-operators) The new `fill` option on `chart_area`, `chart_bar` and `chart_line` allows you to specify a value to replace `null`s with and fill gaps. By [@raxyte](https://github.com/raxyte) in [#4967](https://github.com/tenzir/tenzir/pull/4967). #### Fix `from`/`to` not respecting default formats [Section titled “Fix from/to not respecting default formats”](#fix-fromto-not-respecting-default-formats) The `from` and `to` operators now assume `http` and `https` URLs to produce or accept JSON, unless the filename in the URL contains a known file extension. By [@IyeOnline](https://github.com/IyeOnline) in [#4990](https://github.com/tenzir/tenzir/pull/4990). #### Fix crash in AMQP and add JSON `arrays_of_objects` option [Section titled “Fix crash in AMQP and add JSON arrays\_of\_objects option”](#fix-crash-in-amqp-and-add-json-arrays_of_objects-option) The `write_json` and `write_ndjson` operators now have a `arrays_of_objects` option. By [@IyeOnline](https://github.com/IyeOnline) in [#4994](https://github.com/tenzir/tenzir/pull/4994). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix crash in AMQP and add JSON `arrays_of_objects` option [Section titled “Fix crash in AMQP and add JSON arrays\_of\_objects option”](#fix-crash-in-amqp-and-add-json-arrays_of_objects-option-1) We fixed a bug in `load_amqp` and `save_amqp` that prevented the node from starting if they were used in a pipeline configured as code and failed to connect. By [@IyeOnline](https://github.com/IyeOnline) in [#4994](https://github.com/tenzir/tenzir/pull/4994).

# Tenzir Node v4.29.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.29.0). ### Features [Section titled “Features”](#features) #### Implement sub-duration functions [Section titled “Implement sub-duration functions”](#implement-sub-duration-functions) New functions `years`, `months`, `weeks`, `days`, `hours`, `minutes`, `seconds`, `milliseconds`, `microseconds` and `nanoseconds` convert a numeric value to the equivalent duration. Their counterpart `count_*` functions calculate how many units can the duration be broken into, i.e. `duration / unit`. The `abs` function calculates the absolute value for a number or a duration. By [@raxyte](https://github.com/raxyte) in [#4985](https://github.com/tenzir/tenzir/pull/4985). #### Implement `base` option for `int()` and `uint()` [Section titled “Implement base option for int() and uint()”](#implement-base-option-for-int-and-uint) The new `base` option for `int` and `uint` functions allows parsing hexadecimal numbers in strings. By [@raxyte](https://github.com/raxyte) in [#5006](https://github.com/tenzir/tenzir/pull/5006). #### Implement some `print_*` functions [Section titled “Implement some print\_\* functions”](#implement-some-print_-functions) The `write_xsv` family of operators now accepts multi-character separators, instead of being restricted to a single character. We added the `write_kv` operator, allowing you to write events as Key-Value pairs. We added the functions `any.print_json()` and `any.print_yaml()` to print any value as a JSON or YAML string. We added the functions `record.print_kv()`, `record.print_csv()`, `record.print_ssv()`, `record.print_tsv()` and `record.print_xsv()` to print records as the respective format. By [@IyeOnline](https://github.com/IyeOnline) in [#5001](https://github.com/tenzir/tenzir/pull/5001). ### Changes [Section titled “Changes”](#changes) #### Compact NDJSON output [Section titled “Compact NDJSON output”](#compact-ndjson-output) The output of `write_ndjson` is now more compact and no longer includes unnecessary whitespace. Additionally, `write_json` no longer prints a trailing whitespace after each comma. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5015](https://github.com/tenzir/tenzir/pull/5015). #### Allow values to be `null` when charting [Section titled “Allow values to be null when charting”](#allow-values-to-be-null-when-charting) The `chart_area`, `chart_bar`, and `chart_pie` operators no longer reject null-values. Previously, gaps in charts were only supported for `chart_line`. By [@raxyte](https://github.com/raxyte) in [#5009](https://github.com/tenzir/tenzir/pull/5009). #### Implement some `print_*` functions [Section titled “Implement some print\_\* functions”](#implement-some-print_-functions-1) The `sep` argument on the `flatten` and `unflatten` functions is now a positional argument, allowing you to simply write `record.flatten("-")`. The `unflatten` option found on many `read_*` operators and `parse_*` functions is now called `unflatten_separator`. The `field_sep`, `list_sep` and `null_value` options on the XSV operators and functions (such as `read_xsv`, `write_csv` or `parse_tsv`) are now named arguments on all of them and are called `field_separator`, `list_separator` and `null_value`. The `field_split` and `list_split` arguments for the `read_kv` operator and `parse_kv` function are now named arguments. By [@IyeOnline](https://github.com/IyeOnline) in [#5001](https://github.com/tenzir/tenzir/pull/5001). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Add to\_splunk to the ce binary packages [Section titled “Add to\_splunk to the ce binary packages”](#add-to_splunk-to-the-ce-binary-packages) We now include the `to_splunk` operator in the Tenzir binary packages. By [@tobim](https://github.com/tobim) in [#5012](https://github.com/tenzir/tenzir/pull/5012). #### Normalize pushed-up predicates in `subscribe` [Section titled “Normalize pushed-up predicates in subscribe”](#normalize-pushed-up-predicates-in-subscribe) We fixed an optimization bug that caused pipelines of the form `subscribe <topic> | where <value> in <field>` to evaluate the predicate `<field> in <value>` instead, returning incorrect results from the pipeline. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5014](https://github.com/tenzir/tenzir/pull/5014). #### Respect `--color` option in default implicit events sink [Section titled “Respect --color option in default implicit events sink”](#respect---color-option-in-default-implicit-events-sink) The implicit events sink of the `tenzir` binary now respects the `--color=[always|never|auto]` option and the `NO_COLOR` environment variable. Previously, color usage was only determined based on whether `stdout` had a TTY attached. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5007](https://github.com/tenzir/tenzir/pull/5007). #### Fix a crash in `{parse,read}_grok` for invalid patterns [Section titled “Fix a crash in {parse,read}\_grok for invalid patterns”](#fix-a-crash-in-parseread_grok-for-invalid-patterns) The `read_grok` operator and `parse_grok` functions no longer crash when providing an invalid Grok expression. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5018](https://github.com/tenzir/tenzir/pull/5018). #### Fix compilation error handling inside `if` [Section titled “Fix compilation error handling inside if”](#fix-compilation-error-handling-inside-if) A compilation error within an `if` statement no longer causes pipelines to crash. By [@jachris](https://github.com/jachris) in [#5011](https://github.com/tenzir/tenzir/pull/5011). #### Remove type layering [Section titled “Remove type layering”](#remove-type-layering) We fixed a bug that caused `type_id(this)` to return inconsistent values for schemas with metadata attached, e.g., after assigning a schema name via `@name = "new_name"` or using operators like `chart_line` that add custom metadata to a schema for use of the Tenzir Platform. Unfortunately, this may cause charts or tables added to dashboards before Tenzir Platform v1.7 to break. To fix them, click on the action menu on the chart or table on the dashboard, click “Open in Explorer,” and re-add the chart or table to the dashboard. We are sorry about this inconvenience. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5008](https://github.com/tenzir/tenzir/pull/5008).

# Tenzir Node v4.29.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.29.1). ### Features [Section titled “Features”](#features) #### Allow assigning ids for pipelines manually [Section titled “Allow assigning ids for pipelines manually”](#allow-assigning-ids-for-pipelines-manually) The `/pipeline/create` and `/pipeline/launch` endpoints now accept an optional `id` parameter for assigning the pipeline’s ID manually. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5026](https://github.com/tenzir/tenzir/pull/5026). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Make `drop` not remove empty records [Section titled “Make drop not remove empty records”](#make-drop-not-remove-empty-records) Dropping all fields from a record with the `drop` operator no longer removes the record itself. For example, `from {x: {y: 0}} | drop x.y` now returns `{x: {}}` instead of `{}`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5021](https://github.com/tenzir/tenzir/pull/5021). #### Fix crash in the MSB in merging mode [Section titled “Fix crash in the MSB in merging mode”](#fix-crash-in-the-msb-in-merging-mode) We fixed a bug in the `read_xsv` and `parse_xsv` family of operators and functions that caused the parser to fail unexpectedly when the data contained a list (as specified through the list separator) for fields where the provided `schema` did not expect lists. By [@IyeOnline](https://github.com/IyeOnline) in [#5028](https://github.com/tenzir/tenzir/pull/5028). #### Fix `tls` option of `to_splunk` [Section titled “Fix tls option of to\_splunk”](#fix-tls-option-of-to_splunk) Using the `tls` option of the `to_splunk` operator no longer directly emits an error. By [@jachris](https://github.com/jachris) in [#5027](https://github.com/tenzir/tenzir/pull/5027). #### Make UDO resolution order-independent [Section titled “Make UDO resolution order-independent”](#make-udo-resolution-order-independent) The resolution of user-defined operator aliases in the `tenzir.operators` section is no longer order-dependent. Previously, an operator `foo` may have depended on an operator `bar`, but not the other way around. This limitation no longer exists. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5029](https://github.com/tenzir/tenzir/pull/5029). #### Fix startup delay in `from_fluent_bit` [Section titled “Fix startup delay in from\_fluent\_bit”](#fix-startup-delay-in-from_fluent_bit) We fixed a bug that caused pipelines with `from_fluent_bit` to not report their startup successfully, causing errors when deploying pipelines starting with the operator through the Tenzir Platform. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5025](https://github.com/tenzir/tenzir/pull/5025).

# Tenzir Node v4.29.2

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.29.2). ### Features [Section titled “Features”](#features) #### Make debugging `load_tcp` pipelines easier [Section titled “Make debugging load\_tcp pipelines easier”](#make-debugging-load_tcp-pipelines-easier) The newly added `max_buffered_chunks` for `load_tcp` controls how many reads the operator schedules in advance on the socket. The option defaults to 10. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5040](https://github.com/tenzir/tenzir/pull/5040). ### Changes [Section titled “Changes”](#changes) #### Improve panics to show stacktrace in diagnostics and logs [Section titled “Improve panics to show stacktrace in diagnostics and logs”](#improve-panics-to-show-stacktrace-in-diagnostics-and-logs) We have improved how internal errors are presented to the user, making it easier to report and analyze bugs. By [@jachris](https://github.com/jachris) in [#5023](https://github.com/tenzir/tenzir/pull/5023). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Ignore additional fields in package config [Section titled “Ignore additional fields in package config”](#ignore-additional-fields-in-package-config) Installing packages no longer fails when packages contain additional fields, and instead warns about the unexpected fields. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5031](https://github.com/tenzir/tenzir/pull/5031). #### Fix splitting logic for heterogeneous evaluation [Section titled “Fix splitting logic for heterogeneous evaluation”](#fix-splitting-logic-for-heterogeneous-evaluation) Expressions that have varying output types for the same input types (mostly the `parse_*` family of functions) no longer trigger an assertion on certain inputs. By [@jachris](https://github.com/jachris) in [#5043](https://github.com/tenzir/tenzir/pull/5043). #### Fix hang in `cache` when creating an empty cache [Section titled “Fix hang in cache when creating an empty cache”](#fix-hang-in-cache-when-creating-an-empty-cache) The `cache` operator no longer hangs indefinitely when creating a new cache from a pipeline that returned zero events. For example, the pipeline `from {} | head 0 | cache "whoops"` never exited before this fix. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5042](https://github.com/tenzir/tenzir/pull/5042). #### Avoid idle wakeups in `load_tcp` [Section titled “Avoid idle wakeups in load\_tcp”](#avoid-idle-wakeups-in-load_tcp) We fixed a bug that caused unnecessary idle wakeups in the `load_tcp` operator, throwing off scheduling of pipelines using it. Under rare circumstances, this could also lead to partially duplicated output of the operator’s nested pipeline. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5035](https://github.com/tenzir/tenzir/pull/5035). #### Fix cache eviction always happening on maximally large caches [Section titled “Fix cache eviction always happening on maximally large caches”](#fix-cache-eviction-always-happening-on-maximally-large-caches) We fixed a bug in the `cache` operator that caused caches that were capped just short of the `tenzir.cache.capacity` option to still get evicted immediately. By [@Avaq](https://github.com/Avaq) in [#5039](https://github.com/tenzir/tenzir/pull/5039). #### Fix mismatch in type metadata after assignments [Section titled “Fix mismatch in type metadata after assignments”](#fix-mismatch-in-type-metadata-after-assignments) We fixed a bug that caused a loss of type names for nested fields in assignments, causing field metadata in `write_feather` and `write_parquet` to be missing. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5033](https://github.com/tenzir/tenzir/pull/5033). #### Change how signed ints are rendered in logs [Section titled “Change how signed ints are rendered in logs”](#change-how-signed-ints-are-rendered-in-logs) We fixed a bug in the `from_fluent_bit` and `to_fluent_bit` operators that caused positive integer options to be forwarded with a leading `+`. For example, `options={port: 9200}` forwarded the option `port=+9200` to Fluent Bit. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5037](https://github.com/tenzir/tenzir/pull/5037).

# Tenzir Node v4.3.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.3.0). ### Features [Section titled “Features”](#features) #### Add support for reading and writing YAML documents [Section titled “Add support for reading and writing YAML documents”](#add-support-for-reading-and-writing-yaml-documents) The `yaml` format supports reading and writing YAML documents and streams. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3456](https://github.com/tenzir/tenzir/pull/3456). #### PRs 3461-fluent-bit [Section titled “PRs 3461-fluent-bit”](#prs-3461-fluent-bit) The new `fluent-bit` source and sink operator provide and interface to the Fluent Bit ecosystem. The source operator maps to a Fluent Bit *input* and the sink operator to a Fluent Bit *output*. By [@tobim](https://github.com/tobim) in [#3461](https://github.com/tenzir/tenzir/pull/3461). #### Add pipeline label support to the main repository [Section titled “Add pipeline label support to the main repository”](#add-pipeline-label-support-to-the-main-repository) The pipeline manager now supports user-provided labels for pipelines. By [@Dakostu](https://github.com/Dakostu) in [#3541](https://github.com/tenzir/tenzir/pull/3541). #### Improve `json` parser, add `null` type, and various fixes [Section titled “Improve json parser, add null type, and various fixes”](#improve-json-parser-add-null-type-and-various-fixes) The performance of the `json`, `suricata` and `zeek-json` parsers was improved. The `json` parser has a new `--raw` flag, which uses the raw type of JSON values instead of trying to infer one. For example, strings with ip addresses are given the type `string` instead of `ip`. A dedicated `null` type was added. Empty records are now allowed. Operators that previously discarded empty records (for example, `drop`) now preserve them. By [@jachris](https://github.com/jachris) in [#3503](https://github.com/tenzir/tenzir/pull/3503). ### Changes [Section titled “Changes”](#changes) #### Disable dense indexes [Section titled “Disable dense indexes”](#disable-dense-indexes) Tenzir no longer builds dense indexes for imported events. Dense indexes improved query performance at the cost of a higher memory usage. However, over time the performance improvement became smaller due to other improvements in the underlying storage engine. Tenzir no longer supports models in taxonomies. Since Tenzir v4.0 they were only supported in the deprecated `tenzir-ctl export` and `tenzir-ctl count` commands. We plan to bring the functionality back in the future with more powerful expressions in TQL. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3552](https://github.com/tenzir/tenzir/pull/3552). #### Disable 0mq socket lingering [Section titled “Disable 0mq socket lingering”](#disable-0mq-socket-lingering) We made it easier to reuse the default `zmq` socket endpoint by disabling *socket lingering*, and thereby immediately relinquishing resources when terminating a ZeroMQ pipeline. Changing the linger period from infinite to 0 no longer buffers pending messages in memory after closing a ZeroMQ socket. By [@mavam](https://github.com/mavam) in [#3536](https://github.com/tenzir/tenzir/pull/3536). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix timing-related crashes in the `web` plugin [Section titled “Fix timing-related crashes in the web plugin”](#fix-timing-related-crashes-in-the-web-plugin) The web server will not crash when receiving requests during shutdown anymore. By [@Dakostu](https://github.com/Dakostu) in [#3553](https://github.com/tenzir/tenzir/pull/3553). #### Change type of `version` in `suricata.quic` to `string` [Section titled “Change type of version in suricata.quic to string”](#change-type-of-version-in-suricataquic-to-string) The type of the `quic.version` field in the built-in `suricata.quic` schema was fixed. It now is a string instead of an integer. By [@jachris](https://github.com/jachris) in [#3533](https://github.com/tenzir/tenzir/pull/3533). #### Implement serialization\_plugins for store\_plugins [Section titled “Implement serialization\_plugins for store\_plugins”](#implement-serialization_plugins-for-store_plugins) The `parquet` and `feather` formats no longer throw assertions during normal usage anymore. By [@Dakostu](https://github.com/Dakostu) in [#3537](https://github.com/tenzir/tenzir/pull/3537). #### Fix the wrong type for the version record type in the `zeek.software` schema [Section titled “Fix the wrong type for the version record type in the zeek.software schema”](#fix-the-wrong-type-for-the-version-record-type-in-the-zeeksoftware-schema) The `zeek.software` does not contain an incomplete `version` record type anymore. The `version.minor` type in the `zeek.software` schema is now a `uint64` instead of a `double` to comply with Zeek’s version structure. By [@Dakostu](https://github.com/Dakostu) in [#3538](https://github.com/tenzir/tenzir/pull/3538). #### Improve `json` parser, add `null` type, and various fixes [Section titled “Improve json parser, add null type, and various fixes”](#improve-json-parser-add-null-type-and-various-fixes-1) The `json`, `suricata` and `zeek-json` parsers are now more stable and should now parse all inputs correctly. `null` records are no longer incorrectly transformed into records with `null` fields anymore. By [@jachris](https://github.com/jachris) in [#3503](https://github.com/tenzir/tenzir/pull/3503). #### Fix processing of http arguments [Section titled “Fix processing of http arguments”](#fix-processing-of-http-arguments) The `http` loader no longer ignores the value user-provided custom headers. By [@mavam](https://github.com/mavam) in [#3535](https://github.com/tenzir/tenzir/pull/3535).

# Tenzir Node v4.30.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.30.0). ### Features [Section titled “Features”](#features) #### Add a global ca-certificates config option [Section titled “Add a global ca-certificates config option”](#add-a-global-ca-certificates-config-option) We introduced common TLS settings for all operators that support TLS. The Tenzir config now has a key `cacert`, which will set the CA certificate file for all operators using it. The default for this will be chosen appropriately for the system. By [@tobim](https://github.com/tobim) in [#5022](https://github.com/tenzir/tenzir/pull/5022). #### Add `to_clickhouse` operator [Section titled “Add to\_clickhouse operator”](#add-to_clickhouse-operator) We have added a new `to_clickhouse` operator, which enables you to easily send events to ClickHouse. By [@IyeOnline](https://github.com/IyeOnline) in [#5032](https://github.com/tenzir/tenzir/pull/5032). #### Port `load_gcs` and `save_gcs` to TQL2 [Section titled “Port load\_gcs and save\_gcs to TQL2”](#port-load_gcs-and-save_gcs-to-tql2) The `load_gcs` and `save_gcs` operators are now available in TQL2 to interact with Google Cloud Storage. By [@raxyte](https://github.com/raxyte) in [#5054](https://github.com/tenzir/tenzir/pull/5054). #### Implement an `assert_throughput` operator [Section titled “Implement an assert\_throughput operator”](#implement-an-assert_throughput-operator) The new `assert_throughput` operators allows for checking whether a pipeline meets the minimum expected throughput at any place in the pipeline. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5055](https://github.com/tenzir/tenzir/pull/5055). #### Introduce `metrics "pipeline"` [Section titled “Introduce metrics "pipeline"”](#introduce-metrics-pipeline) `metrics "pipeline"` provides an easy way to view the ingress and egress of pipelines. The new metrics show the ingress and egress of every pipeline in windows of ten seconds. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5024](https://github.com/tenzir/tenzir/pull/5024). ### Changes [Section titled “Changes”](#changes) #### Add a global ca-certificates config option [Section titled “Add a global ca-certificates config option”](#add-a-global-ca-certificates-config-option-1) The `skip_host_verification` option has been removed from the `load_http`, `save_email` and `save_http` operators. Its functionality has been merged into the `skip_peer_verification` option. By [@tobim](https://github.com/tobim) in [#5022](https://github.com/tenzir/tenzir/pull/5022). #### Introduce `metrics "pipeline"` [Section titled “Introduce metrics "pipeline"”](#introduce-metrics-pipeline-1) `metrics "operator"` is now deprecated. Use `metrics "pipeline"` instead, which offers a pre-aggregated view of pipeline metrics. We plan to remove operator metrics in an upcoming release, as they are too expensive in large-scale deployments. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5024](https://github.com/tenzir/tenzir/pull/5024). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix passing string params to `{from,to}_fluent_bit` [Section titled “Fix passing string params to {from,to}\_fluent\_bit”](#fix-passing-string-params-to-fromto_fluent_bit) We fixed a regression that caused strings passed as options to the `from_fluent_bit` and `to_fluent_bit` operators to incorrectly be surrounded by double quotes. `to_fluent_bit` incorrectly reported zero bytes being pushed to the Fluent Bit engine as an error. This no longer happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5053](https://github.com/tenzir/tenzir/pull/5053). #### Fix bug that caused `read_zeek_tsv` to produce invalid fields [Section titled “Fix bug that caused read\_zeek\_tsv to produce invalid fields”](#fix-bug-that-caused-read_zeek_tsv-to-produce-invalid-fields) The `read_zeek_tsv` operator sometimes produced an invalid field with the name `\0` for types without a schema specified. This no longer happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5052](https://github.com/tenzir/tenzir/pull/5052). #### Fix crash in `from "path/to/file.ndjson"` [Section titled “Fix crash in from "path/to/file.ndjson"”](#fix-crash-in-from-pathtofilendjson) The `from` operator no longer incorrectly attempts to use parsers with a known file extension that is a suffix of the actual file extension. For example, `from "file.foojson"` will no longer attempt to use the `json` parser by default, while `from "file.foo.json"` and `from "file.json"` continue to work as expected. This fixes an error for `.ndjson` files, which could previously not decide between the `json` and `ndjson` parsers. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5050](https://github.com/tenzir/tenzir/pull/5050).

# Tenzir Node v4.30.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.30.1). ### Features [Section titled “Features”](#features) #### Move rebatching into the `importer` actor [Section titled “Move rebatching into the importer actor”](#move-rebatching-into-the-importer-actor) The import buffer timeout is now configurable via the `tenzir.import-buffer-timeout` option. The option defaults to 1 second, and controls how long the `import` operator buffers events for batching before forwarding them. Set the option to `0s` to enable an unbuffered mode with minimal latency, or to a higher value to increase performance. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5056](https://github.com/tenzir/tenzir/pull/5056). ### Changes [Section titled “Changes”](#changes) #### Move rebatching into the `importer` actor [Section titled “Move rebatching into the importer actor”](#move-rebatching-into-the-importer-actor-1) The default value for the `tenzir.active-partition-timeout` option increased from 30s to 5min. The option controls how long the `import` operators waits until flushing events to disk. In the past, this value was set so low because the `export` operator was only able to access already flushed events. This is no longer the case, removing the need for the low timeout. Note that the `import` operator always immediately flushes events after a pipeline with `import` completes, or when the node shuts down. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5056](https://github.com/tenzir/tenzir/pull/5056).

# Tenzir Node v4.30.2

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.30.2). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix fluentbit engine stop logic and disable TLS default [Section titled “Fix fluentbit engine stop logic and disable TLS default”](#fix-fluentbit-engine-stop-logic-and-disable-tls-default) Fixed an error in the `{from,to}_fluent_bit` operators that would cause it to fail to start successfully when using an input plugin (in particular the `elasticsearch` plugin) when the TLS setting was enabled without specifying a keyfile. By [@lava](https://github.com/lava) in [#5070](https://github.com/tenzir/tenzir/pull/5070).

# Tenzir Node v4.30.3

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.30.3). ### Features [Section titled “Features”](#features) #### Make schema definitions represent the type system exactly [Section titled “Make schema definitions represent the type system exactly”](#make-schema-definitions-represent-the-type-system-exactly) We introduced a new `type_of(x: any) -> record` function that returns the exact type definition of a TQL expression. For example, `this = type_of(this)` replaces an event with its schema’s definition. The `/serve` endpoint gained a new option `schema`, which can be set to `legacy` (default), `exact`, or `never`. The `legacy` option causes the schema definition to be rendered in a simplified way, which is the current default. The `exact` option causes the schema definitions to be rendered exactly without omitting any information. Set the option to `never` to omit schema definitions entirely. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5062](https://github.com/tenzir/tenzir/pull/5062). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix `engine::push` and co. for fluent-bit [Section titled “Fix engine::push and co. for fluent-bit”](#fix-enginepush-and-co-for-fluent-bit) The `to_fluent_bit` operator no longer crashes on larger inputs. By [@raxyte](https://github.com/raxyte) in [#5076](https://github.com/tenzir/tenzir/pull/5076). #### Fix up `to_azure_log_analytics` [Section titled “Fix up to\_azure\_log\_analytics”](#fix-up-to_azure_log_analytics) We fixed a hang in `to_azure_log_analytics` for pipelines that never exhausted their input. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5077](https://github.com/tenzir/tenzir/pull/5077).

# Tenzir Node v4.31.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.31.0). ### Features [Section titled “Features”](#features) #### Implement `if … else` expressions and short-circuiting for `and` / `or` [Section titled “Implement if … else expressions and short-circuiting for and / or”](#implement-if--else-expressions-and-short-circuiting-for-and--or) Tenzir now supports inline `if … else` expressions in the form `foo if pred`, which returns `foo` if `pred` evaluates to `true`, or `null` otherwise, and `foo if pred else bar`, which instead of falling back to `null` falls back to `bar`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5085](https://github.com/tenzir/tenzir/pull/5085). #### Implement `from_opensearch` [Section titled “Implement from\_opensearch”](#implement-from_opensearch) We added a `from_opensearch` operator that presents a OpenSearch-compatible REST API to enable easy interop with tools that can send data to OpenSearch or Elasticsearch, e.g. Filebeat, Winlogbeat etc. By [@raxyte](https://github.com/raxyte) in [#5075](https://github.com/tenzir/tenzir/pull/5075). #### Implement `write_syslog` [Section titled “Implement write\_syslog”](#implement-write_syslog) We added a new `write_syslog` operator to format events as syslog messages. By [@raxyte](https://github.com/raxyte) in [#5083](https://github.com/tenzir/tenzir/pull/5083). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Implement `if … else` expressions and short-circuiting for `and` / `or` [Section titled “Implement if … else expressions and short-circuiting for and / or”](#implement-if--else-expressions-and-short-circuiting-for-and--or-1) The binary operators `and` and `or` now skip evaluating their right-hand side when not necessary. For example, `where this.has("foo") and foo == 42` now avoids emitting a warning when `foo` does not exist. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5085](https://github.com/tenzir/tenzir/pull/5085). #### Hardcode the fluent-bit page size to 24576 [Section titled “Hardcode the fluent-bit page size to 24576”](#hardcode-the-fluent-bit-page-size-to-24576) The `from_fluent_bit` and `to_fluent_bit` operators no longer crash when trying to handle very large payloads. By [@tobim](https://github.com/tobim) in [#5084](https://github.com/tenzir/tenzir/pull/5084).

# Tenzir Node v4.31.2

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.31.2). ### Features [Section titled “Features”](#features) #### Add compression support to `to_hive` [Section titled “Add compression support to to\_hive”](#add-compression-support-to-to_hive) You can now specify an optional compression method for the files written by the `to_hive` operator. By [@tobim](https://github.com/tobim) in [#5088](https://github.com/tenzir/tenzir/pull/5088). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Remove 20k element limits from `data_builder` [Section titled “Remove 20k element limits from data\_builder”](#remove-20k-element-limits-from-data_builder) We removed the limit of 20,000 elements in lists and records for `read_*` operators and `parse_*` functions. By [@IyeOnline](https://github.com/IyeOnline) in [#5091](https://github.com/tenzir/tenzir/pull/5091).

# Tenzir Node v4.32.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.32.0). ### Features [Section titled “Features”](#features) #### Implement `to_google_secops` [Section titled “Implement to\_google\_secops”](#implement-to_google_secops) We now provide an integration for customers with a Google SecOps workspace via the `to_google_secops` operator. This new operator can send logs via the [Chronicle Ingestion API](https://cloud.google.com/chronicle/docs/reference/ingestion-api#unstructuredlogentries). By [@raxyte](https://github.com/raxyte) in [#5101](https://github.com/tenzir/tenzir/pull/5101). #### Implement `.?` and `get` for field access without warnings [Section titled “Implement .? and get for field access without warnings”](#implement--and-get-for-field-access-without-warnings) The `.?` operator is a new alternative to the `.` operator that allows field access without warnings when the field does not exist or the parent record is `null`. For example, both `foo.bar` and `foo.?bar` return `null` if `foo` is `null`, or if `bar` does not exist, but the latter does not warn about this. Functionally, `foo.?bar` is equivalent to `foo.bar if foo.has("bar")`. The `get` method on records or lists is an alternative to index expressions that allows for specifying a default value when the list index is out of bounds or the record field is missing. For example, `foo[bar]` is equivalent to `foo.get(bar)`, and `foo[bar] if foo.has(bar) else fallback` is equivalent to `foo.get(bar, fallback)`. This works for both records and lists. Indexing expressions on records now support numeric indices to access record fields. For example, `this[0]` returns the first field of the top-level record. The `has` method on records no longer requires the field name to be a constant. The `config` function replaces the previous `config` operator as a more flexible mechanism to access variables from the configuration file. If you rely on the previous behavior, use `from config()` as a replacement. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5099](https://github.com/tenzir/tenzir/pull/5099). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix a stack-use-after-move in `save_tcp` [Section titled “Fix a stack-use-after-move in save\_tcp”](#fix-a-stack-use-after-move-in-save_tcp) The `save_tcp` operator no longer panics or crashes on startup when it cannot connect to the provided hostname and port, and instead produces a helpful error message. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5103](https://github.com/tenzir/tenzir/pull/5103). #### Check array validity before iterating [Section titled “Check array validity before iterating”](#check-array-validity-before-iterating) The `parse_json` function no longer crashes in case it encounters invalid arrays. By [@tobim](https://github.com/tobim) in [#5100](https://github.com/tenzir/tenzir/pull/5100). #### Fix error response and lifetime issues in `from_opensearch` [Section titled “Fix error response and lifetime issues in from\_opensearch”](#fix-error-response-and-lifetime-issues-in-from_opensearch) We fixed a bug that caused the `from_opensearch` operator to crash on high volume input. Additionally, the operator now correctly responds to requests. By [@raxyte](https://github.com/raxyte) in [#5096](https://github.com/tenzir/tenzir/pull/5096).

# Tenzir Node v4.32.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.32.1). ### Features [Section titled “Features”](#features) #### Make `to_google_secops` max size configurable [Section titled “Make to\_google\_secops max size configurable”](#make-to_google_secops-max-size-configurable) The `to_google_secops` operator now has two additonal configuration options to set the `max_request_size` and the `batch_timeout`. By [@raxyte](https://github.com/raxyte) in [#5108](https://github.com/tenzir/tenzir/pull/5108). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Make `to_google_secops` max size configurable [Section titled “Make to\_google\_secops max size configurable”](#make-to_google_secops-max-size-configurable-1) The default max request size has been changed from `4MB` to `1MB` for `to_google_secops` to align with the API. By [@raxyte](https://github.com/raxyte) in [#5108](https://github.com/tenzir/tenzir/pull/5108).

# Tenzir Node v4.4.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.4.0). ### Features [Section titled “Features”](#features) #### Add `show serves` for debugging the `serve` operator [Section titled “Add show serves for debugging the serve operator”](#add-show-serves-for-debugging-the-serve-operator) `show serves` displays all currently active serve IDs in the `/serve` API endpoint, showing an overview of active pipelines with an on-demand API. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3596](https://github.com/tenzir/tenzir/pull/3596). #### Implement a RabbitMQ-based AMQP connector [Section titled “Implement a RabbitMQ-based AMQP connector”](#implement-a-rabbitmq-based-amqp-connector) The new `amqp` connector enables interaction with an AMQP 0-9-1 exchange, supporting working with messages as producer (saver) and consumer (loader). By [@mavam](https://github.com/mavam) in [#3546](https://github.com/tenzir/tenzir/pull/3546). #### Implement extended deployment options [Section titled “Implement extended deployment options”](#implement-extended-deployment-options) The new `ttl_expires_in_ns` shows the remaining time to live for a pipeline in the pipeline manager. By [@Dakostu](https://github.com/Dakostu) in [#3585](https://github.com/tenzir/tenzir/pull/3585). #### Add a `yara` operator [Section titled “Add a yara operator”](#add-a-yara-operator) The new `yara` operator matches Yara rules on byte streams, producing structured events when rules match. By [@mavam](https://github.com/mavam) in [#3594](https://github.com/tenzir/tenzir/pull/3594). #### Add `blob` type for arbitrary binary data [Section titled “Add blob type for arbitrary binary data”](#add-blob-type-for-arbitrary-binary-data) The new `blob` type can be used to represent arbitrary binary data. By [@jachris](https://github.com/jachris) in [#3581](https://github.com/tenzir/tenzir/pull/3581). #### Add a —live option to the export operator [Section titled “Add a —live option to the export operator”](#add-a-live-option-to-the-export-operator) The `export` operator now has a `--live` option to continuously emit events as they are imported instead of those that already reside in the database. By [@tobim](https://github.com/tobim) in [#3612](https://github.com/tenzir/tenzir/pull/3612). #### Add a `velociraptor` operator [Section titled “Add a velociraptor operator”](#add-a-velociraptor-operator) The new `velociraptor` source supports submitting VQL queries to a Velociraptor server. The operator communicates with the server via gRPC using a mutually authenticated and encrypted connection with client certificates. For example, `velociraptor -q "select * from pslist()"` lists processes and their running binaries. By [@mavam](https://github.com/mavam) in [#3556](https://github.com/tenzir/tenzir/pull/3556). #### Update the plugins submodule pointer to include extended & serialized pipeline states [Section titled “Update the plugins submodule pointer to include extended & serialized pipeline states”](#update-the-plugins-submodule-pointer-to-include-extended--serialized-pipeline-states) The new `completed` pipeline state in the pipeline manager shows when a pipeline has finished execution. If the node with running pipelines crashes, they will be marked as `failed` upon restarting. By [@Dakostu](https://github.com/Dakostu) in [#3554](https://github.com/tenzir/tenzir/pull/3554). #### Add `events` field to output of `show partitions` [Section titled “Add events field to output of show partitions”](#add-events-field-to-output-of-show-partitions) The output of `show partitions` includes a new `events` field that shows the number of events kept in that partition. E.g., the pipeline `show partitions | summarize events=sum(events) by schema` shows the number of events per schema stored at the node. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3580](https://github.com/tenzir/tenzir/pull/3580). ### Changes [Section titled “Changes”](#changes) #### Implement extended deployment options [Section titled “Implement extended deployment options”](#implement-extended-deployment-options-1) The new `autostart` and `autodelete` parameters for the pipeline manager supersede the `start_when_created` and `restart_with_node` parameters and extend restarting and deletion possibilities for pipelines. By [@Dakostu](https://github.com/Dakostu) in [#3585](https://github.com/tenzir/tenzir/pull/3585). #### Add `blob` type for arbitrary binary data [Section titled “Add blob type for arbitrary binary data”](#add-blob-type-for-arbitrary-binary-data-1) The `string` type is now restricted to valid UTF-8 strings. Use `blob` for arbitrary binary data. By [@jachris](https://github.com/jachris) in [#3581](https://github.com/tenzir/tenzir/pull/3581). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Detect and report incomplete object in JSON parser [Section titled “Detect and report incomplete object in JSON parser”](#detect-and-report-incomplete-object-in-json-parser) When using `read json`, incomplete objects (e.g., due to truncated files) are now reported as an error instead of silently discarded. By [@jachris](https://github.com/jachris) in [#3570](https://github.com/tenzir/tenzir/pull/3570). #### Fix `serve` exiting prematurely [Section titled “Fix serve exiting prematurely”](#fix-serve-exiting-prematurely) Pipelines ending with the `serve` operator no longer incorrectly exit 60 seconds after transferring all events to the `/serve` endpoint, but rather wait until all events were fetched from the endpoint. Shutting down a node immediately after starting it now no longer waits for all partitions to be loaded. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3562](https://github.com/tenzir/tenzir/pull/3562). #### Fix parsing of subnet columns in zeek-tsv [Section titled “Fix parsing of subnet columns in zeek-tsv”](#fix-parsing-of-subnet-columns-in-zeek-tsv) The `zeek-tsv` parser is now able to handle fields of type `subnet` correctly. By [@tobim](https://github.com/tobim) in [#3606](https://github.com/tenzir/tenzir/pull/3606). #### Check for duplicate field names in zeek\_tsv\_parser [Section titled “Check for duplicate field names in zeek\_tsv\_parser”](#check-for-duplicate-field-names-in-zeek_tsv_parser) Having duplicate field names in `zeek-tsv` data no longer causes a crash, but rather errors out gracefully. By [@eliaskosunen](https://github.com/eliaskosunen) in [#3578](https://github.com/tenzir/tenzir/pull/3578). #### Fix predicate pushdown in `export` and other small fixes [Section titled “Fix predicate pushdown in export and other small fixes”](#fix-predicate-pushdown-in-export-and-other-small-fixes) A regression in Tenzir v4.3 caused exports to often consider all partitions as candidates. Pipelines of the form `export | where <expr>` now work as expected again and only load relevant partitions from disk. The long option `--skip-empty` for `read lines` now works as documented. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3599](https://github.com/tenzir/tenzir/pull/3599). #### Upgrade remaining usages of the adaptive table slice builder [Section titled “Upgrade remaining usages of the adaptive table slice builder”](#upgrade-remaining-usages-of-the-adaptive-table-slice-builder) The `csv` parsed (or more generally, the `xsv` parser) now attempts to parse fields in order to infer their types. By [@jachris](https://github.com/jachris) in [#3582](https://github.com/tenzir/tenzir/pull/3582).

# Tenzir Node v4.5.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.5.0). ### Features [Section titled “Features”](#features) #### Flush implicitly in the `import` operator [Section titled “Flush implicitly in the import operator”](#flush-implicitly-in-the-import-operator) The `import` operator now flushes events to disk automatically before returning, ensuring that they are available immediately for subsequent uses of the `export` operator. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3638](https://github.com/tenzir/tenzir/pull/3638). #### Add an operator blocklist [Section titled “Add an operator blocklist”](#add-an-operator-blocklist) The `tenzir.disable-plugins` option is a list of names of plugins and builtins to explicitly forbid from being used in Tenzir. For example, adding `shell` will prohibit use of the `shell` operator builtin, and adding `kafka` will prohibit use of the `kafka` connector plugin. This allows for a more fine-grained control than the `tenzir.allow-unsafe-pipelines` option. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3642](https://github.com/tenzir/tenzir/pull/3642). #### Relax type restrictions for queries with numeric literals [Section titled “Relax type restrictions for queries with numeric literals”](#relax-type-restrictions-for-queries-with-numeric-literals) In `where <expression>`, the types of numeric literals and numeric fields in an equality or relational comparison must no longer match exactly. The literals `+42`, `42` or `42.0` now compare against fields of types `int64`, `uint64`, and `double` as expected. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3634](https://github.com/tenzir/tenzir/pull/3634). #### Improve `summarize` result for empty inputs [Section titled “Improve summarize result for empty inputs”](#improve-summarize-result-for-empty-inputs) If the `summarize` operator has no `by` clause, it now returns a result even if there is no input. For example, `summarize num=count(.)` returns an event with `{"num": 0}`. Aggregation functions which do not have a single default value, for example because it would depend on the input type, return `null`. By [@jachris](https://github.com/jachris) in [#3640](https://github.com/tenzir/tenzir/pull/3640). #### Always enable time and bool synopses [Section titled “Always enable time and bool synopses”](#always-enable-time-and-bool-synopses) Lookups against uint64, int64, double, and duration fields now always use sparse indexes, which improves the performance of `export | where <expression>` for some expressions. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3639](https://github.com/tenzir/tenzir/pull/3639). #### Add an `api` source operator [Section titled “Add an api source operator”](#add-an-api-source-operator) The `api` source operator interacts with Tenzir’s REST API without needing to spin up a web server, making all APIs accessible from within pipelines. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3630](https://github.com/tenzir/tenzir/pull/3630). ### Changes [Section titled “Changes”](#changes) #### Use prefix matching instead of suffix matching [Section titled “Use prefix matching instead of suffix matching”](#use-prefix-matching-instead-of-suffix-matching) The operators `drop`, `pseudonymize`, `put`, `extend`, `replace`, `rename` and `select` were converted from suffix matching to prefix matching and can therefore address records now. By [@jachris](https://github.com/jachris) in [#3616](https://github.com/tenzir/tenzir/pull/3616). #### Always enable time and bool synopses [Section titled “Always enable time and bool synopses”](#always-enable-time-and-bool-synopses-1) Sparse indexes for time and bool fields are now always enabled, accelerating lookups against them. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3639](https://github.com/tenzir/tenzir/pull/3639). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Ensure exporter metrics don’t get lost [Section titled “Ensure exporter metrics don’t get lost”](#ensure-exporter-metrics-dont-get-lost) The `exporter.*` metrics will now be emitted in case the exporter finishes early. By [@tobim](https://github.com/tobim) in [#3633](https://github.com/tenzir/tenzir/pull/3633). #### Rename `--appending` option for `save file` to `--append` [Section titled “Rename --appending option for save file to --append”](#rename---appending-option-for-save-file-to---append) The long option `--append` for the `file` and `directory` savers now works as documented. Previously, only the short option worked correctly. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3629](https://github.com/tenzir/tenzir/pull/3629).

# Tenzir Node v4.6.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.6.0). ### Features [Section titled “Features”](#features) #### Add `apply` operator [Section titled “Add apply operator”](#add-apply-operator) The new `apply` operator includes pipelines defined in other files. By [@jachris](https://github.com/jachris) in [#3677](https://github.com/tenzir/tenzir/pull/3677). #### Add `parse` operator [Section titled “Add parse operator”](#add-parse-operator) The new, experimental `parse` operator applies a parser to the string stored in a given field. By [@jachris](https://github.com/jachris) in [#3665](https://github.com/tenzir/tenzir/pull/3665). #### Add `from/load/to/save <uri/file>` [Section titled “Add from/load/to/save \<uri/file>”](#add-fromloadtosave-urifile) The operators `from`, `to`, `load`, and `save` support using URLs and file paths directly as their argument. For example, `load https://example.com` means `load https https://example.com`, and `save local-file.json` means `save file local-file.json`. By [@eliaskosunen](https://github.com/eliaskosunen) in [#3608](https://github.com/tenzir/tenzir/pull/3608). #### Add `syslog` parser [Section titled “Add syslog parser”](#add-syslog-parser) The `syslog` parser allows reading both RFC 5424 and RFC 3164 syslog messages. By [@eliaskosunen](https://github.com/eliaskosunen) in [#3645](https://github.com/tenzir/tenzir/pull/3645). #### Add `yield` operator [Section titled “Add yield operator”](#add-yield-operator) The new `yield` operator extracts nested records with the ability to unfold lists. By [@jachris](https://github.com/jachris) in [#3651](https://github.com/tenzir/tenzir/pull/3651). #### Introduce an experimental `python` pipeline operator [Section titled “Introduce an experimental python pipeline operator”](#introduce-an-experimental-python-pipeline-operator) The `python` operator adds the ability to perform arbitrary event to event transformations with the full power of Python 3. By [@lava](https://github.com/lava) in [#3592](https://github.com/tenzir/tenzir/pull/3592). #### Implement a TCP loader [Section titled “Implement a TCP loader”](#implement-a-tcp-loader) We added a new `tcp` connector that allows reading raw bytes from TCP or TLS connections. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3664](https://github.com/tenzir/tenzir/pull/3664). #### Add file extension detection to `from`/`to` [Section titled “Add file extension detection to from/to”](#add-file-extension-detection-to-fromto) When using `from <URL>` and `to <URL>` without specifying the format explicitly using a `read`/`write` argument, the default format is determined by the file extension for all loaders and savers, if possible. Previously, that was only done when using the `file` loader/saver. Additionally, if the file name would indicate some sort of compression (e.g. `.gz`), compression and decompression is performed automatically. For example, `from https://example.com/myfile.yml.gz` is expanded to `load https://example.com/myfile.yml.gz | decompress gzip | read yaml` automatically. By [@eliaskosunen](https://github.com/eliaskosunen) in [#3653](https://github.com/tenzir/tenzir/pull/3653). #### Support `show`-ing all aspects at once [Section titled “Support show-ing all aspects at once”](#support-show-ing-all-aspects-at-once) Use `show` without an aspect to return information about all aspects of a node. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3650](https://github.com/tenzir/tenzir/pull/3650). #### Implement context backends for the contextualizer [Section titled “Implement context backends for the contextualizer”](#implement-context-backends-for-the-contextualizer) The closed-source `context` plugin offers a backend functionality for finding matches between data sets. The new `lookup-table` built-in is a hashtable-based contextualization algorithm that enriches events based on a unique value. The JSON format has a new `--arrays-of-objects` parameter that allows for parsing a JSON array of JSON objects into an event for each object. By [@Dakostu](https://github.com/Dakostu) in [#3684](https://github.com/tenzir/tenzir/pull/3684). #### Add ‘min\_events’ parameters to /serve endpoint [Section titled “Add ‘min\_events’ parameters to /serve endpoint”](#add-min_events-parameters-to-serve-endpoint) We optimized the behavior of the ‘serve’ operator to respond quicker and cause less system load for pipelines that take a long time to generate the first result. The new `min_events` parameter can be used to implement long-polling behavior for clients of `/serve`. By [@lava](https://github.com/lava) in [#3666](https://github.com/tenzir/tenzir/pull/3666). #### Support comments in xsv parser [Section titled “Support comments in xsv parser”](#support-comments-in-xsv-parser) Use `--allow-comments` with the `xsv` parser (incl. `csv`, `tsv`, and `ssv`) to treat lines beginning with `'#'` as comments. By [@eliaskosunen](https://github.com/eliaskosunen) in [#3681](https://github.com/tenzir/tenzir/pull/3681). #### Add `export --internal` to access metrics [Section titled “Add export --internal to access metrics”](#add-export---internal-to-access-metrics) The new `--internal` flag for the `export` operators returns internal events collected by the system, for example pipeline metrics. By [@jachris](https://github.com/jachris) in [#3619](https://github.com/tenzir/tenzir/pull/3619). ### Changes [Section titled “Changes”](#changes) #### Rename pytenzir to tenzir [Section titled “Rename pytenzir to tenzir”](#rename-pytenzir-to-tenzir) We renamed the name of our python package from `pytenzir` to `tenzir`. By [@lava](https://github.com/lava) in [#3660](https://github.com/tenzir/tenzir/pull/3660). #### Implement a TCP loader [Section titled “Implement a TCP loader”](#implement-a-tcp-loader-1) We renamed the `--bind` option of the `zmq` connector to `--listen`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3664](https://github.com/tenzir/tenzir/pull/3664). #### Consider discard, export, and import as internal operators [Section titled “Consider discard, export, and import as internal operators”](#consider-discard-export-and-import-as-internal-operators) Ingress and egress metrics for pipelines now indicate whether the pipeline sent/received events to/from outside of the node with a new `internal` flag. For example, when using the `export` operator, data is entering the pipeline from within the node, so its ingress is considered internal. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3658](https://github.com/tenzir/tenzir/pull/3658). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Add `export --internal` to access metrics [Section titled “Add export --internal to access metrics”](#add-export---internal-to-access-metrics-1) `export --live` now respects a subsequent `where <expr>` instead of silently discarding the filter expression. By [@jachris](https://github.com/jachris) in [#3619](https://github.com/tenzir/tenzir/pull/3619). #### Support lists and null values and empty strings in XSV parser [Section titled “Support lists and null values and empty strings in XSV parser”](#support-lists-and-null-values-and-empty-strings-in-xsv-parser) The `csv`, `ssv`, and `tsv` parsers now correctly support empty strings, lists, and null values. The `tail` operator no longer hangs occasionally. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3687](https://github.com/tenzir/tenzir/pull/3687). #### Fix `sort` type check [Section titled “Fix sort type check”](#fix-sort-type-check) Using the `sort` operator with polymorphic inputs no longer leads to a failing assertion under some circumstances. By [@jachris](https://github.com/jachris) in [#3655](https://github.com/tenzir/tenzir/pull/3655).

# Tenzir Node v4.6.3

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.6.3). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix debian package installation when a vast state directory exists [Section titled “Fix debian package installation when a vast state directory exists”](#fix-debian-package-installation-when-a-vast-state-directory-exists) The Debian package sometimes failed to install, and the bundled systemd unit failed to start with Tenzir v4.6.2. This issue no longer exists. By [@tobim](https://github.com/tobim) in [#3705](https://github.com/tenzir/tenzir/pull/3705).

# Tenzir Node v4.6.4

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.6.4). ### Features [Section titled “Features”](#features) #### Add a `duration` field to operator metrics [Section titled “Add a duration field to operator metrics”](#add-a-duration-field-to-operator-metrics) The `tenzir.metrics.operator` metric now contains an additional `duration` field with the timespan over which the metric was collected. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3713](https://github.com/tenzir/tenzir/pull/3713). ### Changes [Section titled “Changes”](#changes) #### Use systemd provided default paths if available [Section titled “Use systemd provided default paths if available”](#use-systemd-provided-default-paths-if-available) When selecting default paths, the `tenzir-node` will now respect the systemd-provided variables `STATE_DIRECTORY`, `CACHE_DIRECTORY` and `LOGS_DIRECTORY` before falling back to `$PWD/tenzir.db`. By [@tobim](https://github.com/tobim) in [#3714](https://github.com/tenzir/tenzir/pull/3714). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix yaml printer enums [Section titled “Fix yaml printer enums”](#fix-yaml-printer-enums) The yaml printer no longer crashes when receiving enums. By [@jachris](https://github.com/jachris) in [#3719](https://github.com/tenzir/tenzir/pull/3719). #### Fix RFC3164 (legacy-syslog) parser expecting spaces after `<PRI>` [Section titled “Fix RFC3164 (legacy-syslog) parser expecting spaces after \<PRI>”](#fix-rfc3164-legacy-syslog-parser-expecting-spaces-after-pri) The RFC 3164 syslog parser no longer requires a whitespace after the `PRI`-field (part in angle brackets in the beginning of a message). By [@eliaskosunen](https://github.com/eliaskosunen) in [#3718](https://github.com/tenzir/tenzir/pull/3718).

# Tenzir Node v4.7.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.7.0). ### Features [Section titled “Features”](#features) #### Add file data to show partitions [Section titled “Add file data to show partitions”](#add-file-data-to-show-partitions) `show partitions` now contains location and size of the `store`, `index`, and `sketch` files of a partition, as well the aggregate size at `diskusage`. By [@tobim](https://github.com/tobim) in [#3675](https://github.com/tenzir/tenzir/pull/3675). #### Implement the `geoip` context [Section titled “Implement the geoip context”](#implement-the-geoip-context) The new `geoip` context is a built-in that reads MaxMind DB files and uses IP values in events to enrich them with the MaxMind DB geolocation data. By [@Dakostu](https://github.com/Dakostu) in [#3731](https://github.com/tenzir/tenzir/pull/3731). #### Show processes and sockets [Section titled “Show processes and sockets”](#show-processes-and-sockets) With the new `processes` and `sockets` source operators, you can now get a snapshot of the operating system processes and sockets as pipeline input. By [@mavam](https://github.com/mavam) in [#3521](https://github.com/tenzir/tenzir/pull/3521). #### Add `grok` parser [Section titled “Add grok parser”](#add-grok-parser) The `grok` parser, for use with the `parse` operator, enables powerful regex-based string dissection. By [@eliaskosunen](https://github.com/eliaskosunen) in [#3683](https://github.com/tenzir/tenzir/pull/3683). #### Add TCP saver [Section titled “Add TCP saver”](#add-tcp-saver) The `tcp` connector is now also a saver in addition to a loader. By [@mavam](https://github.com/mavam) in [#3727](https://github.com/tenzir/tenzir/pull/3727). #### Add support for macOS-style syslog messages [Section titled “Add support for macOS-style syslog messages”](#add-support-for-macos-style-syslog-messages) The `syslog` parser now supports macOS-style syslog messages. By [@eliaskosunen](https://github.com/eliaskosunen) in [#3692](https://github.com/tenzir/tenzir/pull/3692). #### Include UDOs in `show operators` [Section titled “Include UDOs in show operators”](#include-udos-in-show-operators) `show operators` now shows user-defined operators in addition to operators that ship with Tenzir or as plugins. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3723](https://github.com/tenzir/tenzir/pull/3723). #### Add `kv` parser [Section titled “Add kv parser”](#add-kv-parser) The `kv` parser splits strings into key-value pairs. By [@jachris](https://github.com/jachris) in [#3646](https://github.com/tenzir/tenzir/pull/3646). #### Implement the `slice` operator [Section titled “Implement the slice operator”](#implement-the-slice-operator) The `slice` operator keeps a range of events within a half-closed interval. Begin and end of the interval can be specified relative to the first or last event. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3703](https://github.com/tenzir/tenzir/pull/3703). ### Changes [Section titled “Changes”](#changes) #### Add support for macOS-style syslog messages [Section titled “Add support for macOS-style syslog messages”](#add-support-for-macos-style-syslog-messages-1) The events created by the RFC 3164 syslog parser no longer has a `tag` field, but `app_name` and `process_id`. By [@eliaskosunen](https://github.com/eliaskosunen) in [#3692](https://github.com/tenzir/tenzir/pull/3692). #### Allow empty field names [Section titled “Allow empty field names”](#allow-empty-field-names) Records can now have fields where the name is empty. By [@jachris](https://github.com/jachris) in [#3742](https://github.com/tenzir/tenzir/pull/3742). #### Show processes and sockets [Section titled “Show processes and sockets”](#show-processes-and-sockets-1) The `show` operator now always connects to and runs at a node. Consequently, the `version` and `nics` aspects moved into operators of their own. By [@mavam](https://github.com/mavam) in [#3521](https://github.com/tenzir/tenzir/pull/3521). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Prevent delays for blocking operators [Section titled “Prevent delays for blocking operators”](#prevent-delays-for-blocking-operators) Pipeline operators blocking in their execution sometimes caused results to be delayed. This is no longer the case. This bug fix also reduces the time to first result for pipelines with many operators. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3743](https://github.com/tenzir/tenzir/pull/3743).

# Tenzir Node v4.7.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.7.1). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Downtone push behavior of pipelines [Section titled “Downtone push behavior of pipelines”](#downtone-push-behavior-of-pipelines) We fixed a bug that caused operators that caused an increased memory usage for pipelines with slow operators immediately after a faster operator. We fixed a bug that caused short-running pipelines to sometimes hang. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3758](https://github.com/tenzir/tenzir/pull/3758).

# Tenzir Node v4.8.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.8.0). ### Features [Section titled “Features”](#features) #### Support concepts in more places [Section titled “Support concepts in more places”](#support-concepts-in-more-places) Concepts are now supported in more places than just the `where` operator: All operators and concepts that reference fields in events now support them transparently. For example, it is not possible to enrich with a lookup table against all source IP addresses defined in the concept `net.src.ip`, or to group by destination ports across different schemas with the concept `net.dst.port`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3812](https://github.com/tenzir/tenzir/pull/3812). #### Implement `timeshift` and `delay` operators [Section titled “Implement timeshift and delay operators”](#implement-timeshift-and-delay-operators) The new `timeshift` operator adjusts timestamps relative to a given start time, with an optional speedup. The new `delay` operator delays events relative to a given start time, with an optional speedup. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3701](https://github.com/tenzir/tenzir/pull/3701). #### Add GELF parser and document Graylog integration [Section titled “Add GELF parser and document Graylog integration”](#add-gelf-parser-and-document-graylog-integration) The new `gelf` parser reads a stream of NULL-byte terminated messages in Graylog Extended Log Format (GELF). By [@mavam](https://github.com/mavam) in [#3768](https://github.com/tenzir/tenzir/pull/3768). #### Update the main repository to include the pipeline manager autostart changes [Section titled “Update the main repository to include the pipeline manager autostart changes”](#update-the-main-repository-to-include-the-pipeline-manager-autostart-changes) Pipeline states in the `/pipeline` API will not change upon node shutdown anymore. When a node restarts afterwards, previously running pipelines will continue to run while paused pipelines will load in a stopped state. By [@Dakostu](https://github.com/Dakostu) in [#3785](https://github.com/tenzir/tenzir/pull/3785). #### Add node health metrics [Section titled “Add node health metrics”](#add-node-health-metrics) A Tenzir node will now automatically collect and store metrics about disk, cpu and memory usage of the host machine. By [@lava](https://github.com/lava) in [#3736](https://github.com/tenzir/tenzir/pull/3736). #### Add `xsv --no-header` [Section titled “Add xsv --no-header”](#add-xsv---no-header) The `csv`, `tsv`, `ssv` and `xsv` printers now support not printing a header line with the `--no-header` option. By [@eliaskosunen](https://github.com/eliaskosunen) in [#3821](https://github.com/tenzir/tenzir/pull/3821). #### Add savers for curl connectors [Section titled “Add savers for curl connectors”](#add-savers-for-curl-connectors) The `http` and `https` loaders now also have savers to send data from a pipeline to a remote API. The `http` and `https` connectors have a new flag `--form` to submit the request body URL-encoded. This also changes the Content-Type header to `application/x-www-form-urlencoded`. By [@mavam](https://github.com/mavam) in [#3539](https://github.com/tenzir/tenzir/pull/3539). #### Allow setting the header for csv, tsv, and ssv manually [Section titled “Allow setting the header for csv, tsv, and ssv manually”](#allow-setting-the-header-for-csv-tsv-and-ssv-manually) The `csv`, `tsv`, `ssv` and `xsv` parsers now support setting the header line manually with the `--header` option. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3778](https://github.com/tenzir/tenzir/pull/3778). #### Implement the `diagnostics` operator [Section titled “Implement the diagnostics operator”](#implement-the-diagnostics-operator) The new `diagnostics` operator provides information about diagnostics that a pipeline may encounter during its lifetime. By [@Dakostu](https://github.com/Dakostu) in [#3828](https://github.com/tenzir/tenzir/pull/3828). #### Fix `export --live` and introduce `metrics` [Section titled “Fix export --live and introduce metrics”](#fix-export---live-and-introduce-metrics) The `metrics` operator returns internal metrics events generated in a Tenzir node. Use `metrics --live` to get a feed of metrics as they are being generated. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3790](https://github.com/tenzir/tenzir/pull/3790). #### Add support for Cisco Firepower syslog messages [Section titled “Add support for Cisco Firepower syslog messages”](#add-support-for-cisco-firepower-syslog-messages) The RFC 3164 syslog parser now supports years in the message timestamp. By [@eliaskosunen](https://github.com/eliaskosunen) in [#3833](https://github.com/tenzir/tenzir/pull/3833). #### Improve handling of open file descriptors [Section titled “Improve handling of open file descriptors”](#improve-handling-of-open-file-descriptors) On Linux systems, the process metrics now have an additional value `open_fds` showing the number of file descriptors opened by the node. By [@lava](https://github.com/lava) in [#3784](https://github.com/tenzir/tenzir/pull/3784). #### Implement the `lookup` operator [Section titled “Implement the lookup operator”](#implement-the-lookup-operator) The new `lookup` operator performs live filtering of the import feed using a context, and translates context updates into historical queries. This effectively enables live and retro matching in a single operator. By [@Dakostu](https://github.com/Dakostu) in [#3721](https://github.com/tenzir/tenzir/pull/3721). #### Add time parser [Section titled “Add time parser”](#add-time-parser) The `time` parser allows parsing datetimes and timestamps from arbitrary strings using a `strptime`-like format string. By [@eliaskosunen](https://github.com/eliaskosunen) in [#3738](https://github.com/tenzir/tenzir/pull/3738). ### Changes [Section titled “Changes”](#changes) #### Switch from JSON to MsgPack data transport [Section titled “Switch from JSON to MsgPack data transport”](#switch-from-json-to-msgpack-data-transport) The `fluent-bit` source operator no longer performs JSON conversion from Fluent Bit prior to processing an event. Instead, it directly processes the MsgPack data that Fluent Bit uses internally for more robust and quicker event delivery. By [@mavam](https://github.com/mavam) in [#3770](https://github.com/tenzir/tenzir/pull/3770). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Print Zeek TSV metadata when schema changes [Section titled “Print Zeek TSV metadata when schema changes”](#print-zeek-tsv-metadata-when-schema-changes) The `zeek-tsv` printer incorrectly emitted metadata too frequently. It now only writes opening and closing tags when it encounters a new schema. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3836](https://github.com/tenzir/tenzir/pull/3836). #### Optimize pipeline when using `/pipeline/launch` [Section titled “Optimize pipeline when using /pipeline/launch”](#optimize-pipeline-when-using-pipelinelaunch) The `/pipeline/launch` endpoint now optimizes the pipeline before starting it. By [@jachris](https://github.com/jachris) in [#3801](https://github.com/tenzir/tenzir/pull/3801). #### Fail properly when transfer breaks [Section titled “Fail properly when transfer breaks”](#fail-properly-when-transfer-breaks) Failing transfers using `http(s)` and `ftp(s)` connectors now properly return an error when the transfer broke. For example, `from http://does.not.exist` no longer returns silently a success. By [@mavam](https://github.com/mavam) in [#3842](https://github.com/tenzir/tenzir/pull/3842). #### Fix blob parsing with padding [Section titled “Fix blob parsing with padding”](#fix-blob-parsing-with-padding) When reading Base64-encoded JSON strings with the `blob` type, `=` padding is now accepted. By [@jachris](https://github.com/jachris) in [#3765](https://github.com/tenzir/tenzir/pull/3765). #### Fix the `tenzir/tenzir:latest-slim` image [Section titled “Fix the tenzir/tenzir:latest-slim image”](#fix-the-tenzirtenzirlatest-slim-image) The `tenzir/tenzir:latest-slim` Docker image now sets a default `TENZIR_CACHE_DIRECTORY` automatically. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3764](https://github.com/tenzir/tenzir/pull/3764). #### Display failing pipeline diagnostics in `/serve` [Section titled “Display failing pipeline diagnostics in /serve”](#display-failing-pipeline-diagnostics-in-serve) The `/serve` API now displays why a pipeline became unavailable in an error case instead of showing a generic error message. This causes runtime errors in pipelines to show up in the Explorer on app.tenzir.com. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3788](https://github.com/tenzir/tenzir/pull/3788). #### Fix `export --live` and introduce `metrics` [Section titled “Fix export --live and introduce metrics”](#fix-export---live-and-introduce-metrics-1) `export --live` sometimes got stuck, failing to deliver events. This no longer happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3790](https://github.com/tenzir/tenzir/pull/3790). #### Override lookup-table context entries for duplicate keys [Section titled “Override lookup-table context entries for duplicate keys”](#override-lookup-table-context-entries-for-duplicate-keys) Updating entries of a `lookup-table` context now overrides values with duplicate keys instead of ignoring them. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3808](https://github.com/tenzir/tenzir/pull/3808).

# Tenzir Node v4.8.1

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.8.1). ### Features [Section titled “Features”](#features) #### Support setting profiles in the Velociraptor config [Section titled “Support setting profiles in the Velociraptor config”](#support-setting-profiles-in-the-velociraptor-config) The `velociraptor` operator gained a new `--profile <profile>` option to support multiple configured Velociraptor instances. To opt into using profiles, move your Velociraptor configuration in `<configdir>/tenzir/plugin/velociraptor.yaml` from `<config>` to `profiles.<profile>.<config>`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3848](https://github.com/tenzir/tenzir/pull/3848). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Enable the AMQP plugin in the static binary [Section titled “Enable the AMQP plugin in the static binary”](#enable-the-amqp-plugin-in-the-static-binary) The `amqp` connector plugin was incorrectly packaged and unavailable in some build configurations. The plugin is now available in all builds. Failing to create the virtualenv of the `python` operator caused subsequent uses of the `python` operator to silently fail. This no longer happens. The Debian package now depends on `python3-venv`, which is required for the `python` operator to create its virtualenv. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3854](https://github.com/tenzir/tenzir/pull/3854).

# Tenzir Node v4.8.2

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.8.2). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Remove restriction for unflattening into empty field names [Section titled “Remove restriction for unflattening into empty field names”](#remove-restriction-for-unflattening-into-empty-field-names) The `unflatten` operator no longer ignores fields that begin or end with the separator. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3814](https://github.com/tenzir/tenzir/pull/3814). #### Schedule idle operators less aggressively [Section titled “Schedule idle operators less aggressively”](#schedule-idle-operators-less-aggressively) Some idle source operators and loaders, e.g., `from tcp://localhost:3000` where no data arrives via TCP, consumed excessive amounts of CPU. This no longer happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3865](https://github.com/tenzir/tenzir/pull/3865).

# Tenzir Node v4.9.0

Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v4.9.0). ### Features [Section titled “Features”](#features) #### Implement `context load`, `context save`, and `context reset` [Section titled “Implement context load, context save, and context reset”](#implement-context-load-context-save-and-context-reset) The `context reset` operator allows for clearing the state of a context. The `context save` and `context load` operators allow serializing and deserializing the state of a context to/from bytes. By [@eliaskosunen](https://github.com/eliaskosunen) in [#3908](https://github.com/tenzir/tenzir/pull/3908). #### Add new ‘—file’ option to the python operator [Section titled “Add new ‘—file’ option to the python operator”](#add-new-file-option-to-the-python-operator) The `python` operator gained a new `--file` flag that allows loading python code from a file instead of providing it as part of the pipeline definition. By [@lava](https://github.com/lava) in [#3901](https://github.com/tenzir/tenzir/pull/3901). #### Add Bloom filter context [Section titled “Add Bloom filter context”](#add-bloom-filter-context) The new `bloom-filter` context represents large sets in a space-efficient manner. By [@mavam](https://github.com/mavam) in [#3834](https://github.com/tenzir/tenzir/pull/3834). #### Improve the `export` operator [Section titled “Improve the export operator”](#improve-the-export-operator) The `export` operator gained a `--low-priority` option, which causes it to interfere less with regular priority exports at the cost of potentially running slower. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3909](https://github.com/tenzir/tenzir/pull/3909). #### Handle nested fields and integers as selectors in JSON parser [Section titled “Handle nested fields and integers as selectors in JSON parser”](#handle-nested-fields-and-integers-as-selectors-in-json-parser) The `--selector` option of the `json` parser now works with nested fields, and integer fields. By [@jachris](https://github.com/jachris) in [#3900](https://github.com/tenzir/tenzir/pull/3900). #### Add `lines` printer [Section titled “Add lines printer”](#add-lines-printer) The `lines` printer enables simple line-delimited formatting of events. By [@eliaskosunen](https://github.com/eliaskosunen) in [#3847](https://github.com/tenzir/tenzir/pull/3847). #### Add the `openapi` operator [Section titled “Add the openapi operator”](#add-the-openapi-operator) The `openapi` source operator generates Tenzir’s OpenAPI specification. Use `openapi | to ./openapi.yaml` to generate a file with the canonical format. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3898](https://github.com/tenzir/tenzir/pull/3898). #### Add structured\_data to syslog output [Section titled “Add structured\_data to syslog output”](#add-structured_data-to-syslog-output) The `structured_data` field in RFC 5424-style syslog messages is now parsed and included in the output. By [@eliaskosunen](https://github.com/eliaskosunen) in [#3871](https://github.com/tenzir/tenzir/pull/3871). #### Implement a context content dumping mechanism [Section titled “Implement a context content dumping mechanism”](#implement-a-context-content-dumping-mechanism) The new `context inspect <context-name>` command dumps a specific context’s user-provided data, usually the context’s content. By [@Dakostu](https://github.com/Dakostu) in [#3893](https://github.com/tenzir/tenzir/pull/3893). #### Support parsing numeric timestamps since epoch [Section titled “Support parsing numeric timestamps since epoch”](#support-parsing-numeric-timestamps-since-epoch) When specifying a schema with a field typed as `time #unit=<unit>`, numeric values will be interpreted as offsets from the epoch. By [@jachris](https://github.com/jachris) in [#3927](https://github.com/tenzir/tenzir/pull/3927). #### Add running and paused times to pipeline metrics [Section titled “Add running and paused times to pipeline metrics”](#add-running-and-paused-times-to-pipeline-metrics) Operator metrics now separately track the time that an operator was paused or running in the `time_paused` and `time_running` values in addition to the wall-clock time in `time_total`. Throughput rates now exclude the paused time from their calculation. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3940](https://github.com/tenzir/tenzir/pull/3940). #### Rewrite `chart` and `set-attributes` operators [Section titled “Rewrite chart and set-attributes operators”](#rewrite-chart-and-set-attributes-operators) The `chart` operator adds metadata to the schema of the input events, enabling rendering events as bar, area, line, or pie charts on app.tenzir.com. By [@eliaskosunen](https://github.com/eliaskosunen) in [#3866](https://github.com/tenzir/tenzir/pull/3866). #### Update the main repository to include timestamped pipelines [Section titled “Update the main repository to include timestamped pipelines”](#update-the-main-repository-to-include-timestamped-pipelines) `show pipelines` and the `/pipeline` API endpoints now include `created_at` and `last_modified` fields that track the pipeline’s creation and last manual modification time, respectively. Pipelines created with older versions of Tenzir will use the start time of the node as their creation time. By [@Dakostu](https://github.com/Dakostu) in [#3869](https://github.com/tenzir/tenzir/pull/3869). #### Implement more malleable lookup data for contexts [Section titled “Implement more malleable lookup data for contexts”](#implement-more-malleable-lookup-data-for-contexts) The context match events now contain a new field `mode` that states the lookup mode of this particular match. The `enrich` operator gained a `--filter` option, which causes it to exclude enriched events that do not contain a context. By [@Dakostu](https://github.com/Dakostu) in [#3920](https://github.com/tenzir/tenzir/pull/3920). #### Update the main repository to include the pipeline run ID [Section titled “Update the main repository to include the pipeline run ID”](#update-the-main-repository-to-include-the-pipeline-run-id) Managed pipelines now contain a new `total_runs` parameter that counts all started runs. The new `run` field is available in the events delivered by the `metrics` and `diagnostics` operators. By [@Dakostu](https://github.com/Dakostu) in [#3883](https://github.com/tenzir/tenzir/pull/3883). ### Changes [Section titled “Changes”](#changes) #### Context versioning [Section titled “Context versioning”](#context-versioning) The binary format used by contexts for saving on disk on node shutdown is now versioned. A node can support loading of multiple different versions, and automigrate between them. By [@eliaskosunen](https://github.com/eliaskosunen) in [#3945](https://github.com/tenzir/tenzir/pull/3945). #### Remove reader, writer, and language plugin types [Section titled “Remove reader, writer, and language plugin types”](#remove-reader-writer-and-language-plugin-types) We removed the `tenzir-ctl start` subcommand. Users should switch to the `tenzir-node` command instead, which accepts the same arguments and presents the same command-line interface. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3899](https://github.com/tenzir/tenzir/pull/3899). #### Disable colors if `NO_COLOR` or not a terminal [Section titled “Disable colors if NO\_COLOR or not a terminal”](#disable-colors-if-no_color-or-not-a-terminal) Color escape codes are no longer emitted if `NO_COLOR` is set to a non-empty value, or when the output device is not a terminal. By [@jachris](https://github.com/jachris) in [#3952](https://github.com/tenzir/tenzir/pull/3952). #### Allow plugins to bundle further builtins [Section titled “Allow plugins to bundle further builtins”](#allow-plugins-to-bundle-further-builtins) Plugins may now depend on other plugins. Plugins with unmet dependencies are automatically disabled. For example, the `lookup` and `enrich` plugins now depend on the `context` plugin. Run `show plugins` to see all available plugins and their dependencies. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3877](https://github.com/tenzir/tenzir/pull/3877). #### Replace `tenzir.db-directory` with `tenzir.state-directory` [Section titled “Replace tenzir.db-directory with tenzir.state-directory”](#replace-tenzirdb-directory-with-tenzirstate-directory) The option `tenzir.db-directory` is deprecated in favor of the `tenzir.state-directory` option and will be removed in the future. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3889](https://github.com/tenzir/tenzir/pull/3889). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Add support for commas in seconds in the time data parser [Section titled “Add support for commas in seconds in the time data parser”](#add-support-for-commas-in-seconds-in-the-time-data-parser) Commas are now allowed as subsecond separators in timestamps in TQL. Previously, only dots were allowed, but ISO 8601 allows for both. By [@eliaskosunen](https://github.com/eliaskosunen) in [#3903](https://github.com/tenzir/tenzir/pull/3903). #### Update the repository to include lookup lifetime fixes [Section titled “Update the repository to include lookup lifetime fixes”](#update-the-repository-to-include-lookup-lifetime-fixes) Retroactive lookups will now properly terminate when they have finished. By [@Dakostu](https://github.com/Dakostu) in [#3910](https://github.com/tenzir/tenzir/pull/3910). #### Make `/serve` more consistent [Section titled “Make /serve more consistent”](#make-serve-more-consistent) The `/serve` API sometimes returned an empty string for the next continuation token instead of `null` when there are no further results to fetch. It now consistently returns `null`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3885](https://github.com/tenzir/tenzir/pull/3885). #### Prevent duplicate fields in schema [Section titled “Prevent duplicate fields in schema”](#prevent-duplicate-fields-in-schema) Invalid schema definitions, where a record contains the same key multiple times, are now detected and rejected. By [@jachris](https://github.com/jachris) in [#3929](https://github.com/tenzir/tenzir/pull/3929). #### Gracefully handle misaligned header and values in `xsv` parser [Section titled “Gracefully handle misaligned header and values in xsv parser”](#gracefully-handle-misaligned-header-and-values-in-xsv-parser) The `xsv` parser (and by extension the `csv`, `tsv`, and `ssv` parsers) skipped lines that had a mismatch between the number of values contained and the number of fields defined in the header. Instead, it now fills in `null` values for missing values and, if the new `--auto-expand` option is set, also adds new header fields for excess values. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3874](https://github.com/tenzir/tenzir/pull/3874). #### Fix restart on failure [Section titled “Fix restart on failure”](#fix-restart-on-failure) The option to automatically restart on failure did not correctly trigger for pipelines that failed an operator emitted an error diagnostic, a new mechanism for improved error messages introduced with Tenzir v4.8. Such pipelines now restart automatically as expected. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3947](https://github.com/tenzir/tenzir/pull/3947). #### Fix logger deadlock in python tests [Section titled “Fix logger deadlock in python tests”](#fix-logger-deadlock-in-python-tests) We fixed a rare deadlock by changing the internal logger behavior from blocking until the oldest messages were consumed to overwriting them. By [@lava](https://github.com/lava) in [#3911](https://github.com/tenzir/tenzir/pull/3911). #### Improve the `export` operator [Section titled “Improve the export operator”](#improve-the-export-operator-1) We fixed a bug that under rare circumstances led to an indefinite hang when using a high-volume source followed by a slow transformation and a fast sink. By [@dominiklohmann](https://github.com/dominiklohmann) in [#3909](https://github.com/tenzir/tenzir/pull/3909).

# TQL2, Always

Tenzir Node v5.0 makes TQL2 the default and only option throughout Tenzir. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.0.0). ### Features [Section titled “Features”](#features) #### Implement `from_http` [Section titled “Implement from\_http”](#implement-from_http) `from_http <host:port>, server=true` creates an HTTP/1.1 server that listens on a specified hostname and port. In the future, the `load_http` operator’s HTTP client will be integrated with this operator as well, eventually superseding `load_http`. By [@raxyte](https://github.com/raxyte) in [#5114](https://github.com/tenzir/tenzir/pull/5114). #### Add optimizations for `if` [Section titled “Add optimizations for if”](#add-optimizations-for-if) The `mo` suffix allows for specifying durations in terms of months. For example, `3mo` returns a duration equivalent to three months. The unit has alternative spellings `month` and `months`, and is defined as one twelfth of a year. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5110](https://github.com/tenzir/tenzir/pull/5110). #### Fix panic in `head 0 | write_json arrays_of_objects=true` [Section titled “Fix panic in head 0 | write\_json arrays\_of\_objects=true”](#fix-panic-in-head-0--write_json-arrays_of_objectstrue) `write_json arrays_of_objects=true` now works correctly with an empty input, returning an empty JSON array instead of running into a panic. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5115](https://github.com/tenzir/tenzir/pull/5115). #### Implement `move` operator [Section titled “Implement move operator”](#implement-move-operator) We added a new `move` operator that moves a field into another, effectively a smart renaming such as `ctx.message=status.msg` moves the values from `status.msg` into the field `message` of a record `ctx` and drops `status.msg`. By [@raxyte](https://github.com/raxyte) in [#5117](https://github.com/tenzir/tenzir/pull/5117). #### Add a `hidden` field to `diagnostics` [Section titled “Add a hidden field to diagnostics”](#add-a-hidden-field-to-diagnostics) The output of the `diagnostics` operator now includes an additional `hidden` field that is set to `true` for pipelines that are not visible on the Pipelines page of the Tenzir Platform, e.g., because they’re run under-the-hood by the platform or interactively in the Explorer. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5119](https://github.com/tenzir/tenzir/pull/5119). ### Changes [Section titled “Changes”](#changes) #### Make TQL2 the default [Section titled “Make TQL2 the default”](#make-tql2-the-default) TQL2 is now the default and only option for writing pipelines with Tenzir. The environment variable `TENZIR_TQL2`, the configuration option `tenzir.tql2` have no more effect. Using the command-line option `--tql2` results in an error. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5086](https://github.com/tenzir/tenzir/pull/5086). #### Implement `file_content(path:string)` [Section titled “Implement file\_content(path:string)”](#implement-file_contentpathstring) We added a new function `file_contents` to read bytes from a file with an absolute path. By [@raxyte](https://github.com/raxyte) in [#5111](https://github.com/tenzir/tenzir/pull/5111). #### Add optimizations for `if` [Section titled “Add optimizations for if”](#add-optimizations-for-if-1) `1y` in TQL now equals 365.2425 days, which is the average length of a year in the Gregorian calendar. This aligns the duration literal with the `years` function and how the Tenzir Platform renders durations. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5110](https://github.com/tenzir/tenzir/pull/5110). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Add optimizations for `if` [Section titled “Add optimizations for if”](#add-optimizations-for-if-2) Operators that interact with state in the node that is not local to the pipeline, e.g., `context::update`, now properly work when used inside an `if` statement. Previously, pipelines of the form `if … { context::update … }` failed at runtime. Branches in `if` statement no longer run on a single thread, and instead properly participate in the thread pool. This fixes performance problems when running complex pipelines inside branches. Note that this causes the output of the `if` operator to be unordered between its branches. Literal values of type `time` in expressions failed to parse when they used subsecond prevision or a time-zone offset. This no longer happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5110](https://github.com/tenzir/tenzir/pull/5110).

# ClickHouse Fixes

This release improves the integration with ClickHouse. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.0.1). ### Features [Section titled “Features”](#features) #### Fix bugs in `to_clickhouse` and improve diagnostics [Section titled “Fix bugs in to\_clickhouse and improve diagnostics”](#fix-bugs-in-to_clickhouse-and-improve-diagnostics) The `to_clickhouse` operator now supports `blob`s, which will be sent as an `Array(UInt8)`. By [@IyeOnline](https://github.com/IyeOnline) in [#5122](https://github.com/tenzir/tenzir/pull/5122). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix bugs in `to_clickhouse` and improve diagnostics [Section titled “Fix bugs in to\_clickhouse and improve diagnostics”](#fix-bugs-in-to_clickhouse-and-improve-diagnostics-1) We fixed multiple bugs that caused unexpected internal failures and the creation of potentially empty `Tuple`s in ClickHouse. By [@IyeOnline](https://github.com/IyeOnline) in [#5122](https://github.com/tenzir/tenzir/pull/5122). #### Keep the y-axis order for `chart_*` as specified [Section titled “Keep the y-axis order for chart\_\* as specified”](#keep-the-y-axis-order-for-chart_-as-specified) The `chart_*` operators no longer sort y-axes by their names. Instead, the user-provided order is used. For example, in `metrics "pipeline" | chart_bar x=timestamp, resolution=1d, y={"Ingress": ingress.bytes.sum(), "Egress": egress.bytes.sum()}` the field order is now “Ingress” followed by “Egress” as specified instead of the other way around. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5131](https://github.com/tenzir/tenzir/pull/5131).

# Moving Fields

Tenzir Node v5.1 adds more flexible ways to access and move fields, bitwise functions, and a native integration with Google Cloud Logging. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.1.0). ### Features [Section titled “Features”](#features) #### Experiment with a trailing `?` for field access [Section titled “Experiment with a trailing ? for field access”](#experiment-with-a-trailing--for-field-access) The `.?field` operator for field access with suppressed warnings is now deprecated in favor of `.field?`. We added the `.?` operator just recently, and it quickly gained a lot of popularity. However, suppressing warnings in top-level fields required writing `this.?field`, which is a mouthful. Now, with the trailing questionmark, this is just `field?` instead. Additionally, the trailing `?` operator works for index-based access, e.g., `field[index]?`. The `.?` operator will be removed in the near future. We’re sorry for the inconvenience. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5128](https://github.com/tenzir/tenzir/pull/5128). #### Implement the `move` keyword [Section titled “Implement the move keyword”](#implement-the-move-keyword) The `move` keyword may be used in front of fields anywhere in assignments to automatically drop fields after the assignment. For example, `foo = {bar: move bar, baz: move baz}` moves the top-level fields `bar` and `baz` into a new record under the top-level field `foo`. The `move`, `drop`, and `unroll` operators now support the `?` field access notation to suppress warnings when the accessed field does not exist or the parent record is `null`. For example, `drop foo?` only drops the field `foo` if it exists, and does not warn if it doesn’t. This also works with the newly introduced `move` keyword. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5127](https://github.com/tenzir/tenzir/pull/5127). #### Add a `split_at_regex` option to `read_lines` [Section titled “Add a split\_at\_regex option to read\_lines”](#add-a-split_at_regex-option-to-read_lines) We added a `split_at_regex` option allows for the use of regular expressions to split events with the `read_lines` operator. By [@tobim](https://github.com/tobim) in [#5123](https://github.com/tenzir/tenzir/pull/5123). #### Implement `to_google_cloud_logging` [Section titled “Implement to\_google\_cloud\_logging”](#implement-to_google_cloud_logging) We added a `to_google_cloud_logging` operator that can send events to [Google Cloud Logging](https://cloud.google.com/logging). By [@raxyte](https://github.com/raxyte) in [#5135](https://github.com/tenzir/tenzir/pull/5135). #### Try and switch the Docker Image to `debian::trixie` [Section titled “Try and switch the Docker Image to debian::trixie”](#try-and-switch-the-docker-image-to-debiantrixie) The `to_snowflake` operator is now available in the arm64 Docker image. By [@IyeOnline](https://github.com/IyeOnline) in [#5113](https://github.com/tenzir/tenzir/pull/5113). #### Expose Arrow’s bit-wise compute functions [Section titled “Expose Arrow’s bit-wise compute functions”](#expose-arrows-bit-wise-compute-functions) We added bit-wise functions to TQL, including `bit_and`, `bit_or`, `bit_xor`, `bit_not`, `shift_left`, and `shift_right`. These functions enable performing bit-level operations on numeric values. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5129](https://github.com/tenzir/tenzir/pull/5129). ### Changes [Section titled “Changes”](#changes) #### Assume UTF8 in `file_contents` [Section titled “Assume UTF8 in file\_contents”](#assume-utf8-in-file_contents) The `file_contents` function now returns contents as `string` by default. Non-UTF-8 files can be read by specifying the `binary=true` option. By [@raxyte](https://github.com/raxyte) in [#5135](https://github.com/tenzir/tenzir/pull/5135). #### Try and switch the Docker Image to `debian::trixie` [Section titled “Try and switch the Docker Image to debian::trixie”](#try-and-switch-the-docker-image-to-debiantrixie-1) The `tenzir/tenzir` and `tenzir/tenzir-node` Docker images now use `debian:trixie-slim` instead of `debian:bookworm-slim` as a base image. By [@IyeOnline](https://github.com/IyeOnline) in [#5113](https://github.com/tenzir/tenzir/pull/5113). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Use a proper subpipeline for `fork` [Section titled “Use a proper subpipeline for fork”](#use-a-proper-subpipeline-for-fork) Operators that interact with state in the node that is not local to the pipeline, e.g., `context::update`, now properly work when used inside the nested pipeline of the `fork` operator. Previously, pipelines of the form `fork { context::update … }` failed at runtime. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5133](https://github.com/tenzir/tenzir/pull/5133). #### Fix edge case when parsing nullable lists with type conflicts [Section titled “Fix edge case when parsing nullable lists with type conflicts”](#fix-edge-case-when-parsing-nullable-lists-with-type-conflicts) Parsing of nullable lists with type conflicts could previously lead to an error under very rare circumstances. This now works as expected. By [@jachris](https://github.com/jachris) in [#5134](https://github.com/tenzir/tenzir/pull/5134). #### Fix TLS options in `from_http` [Section titled “Fix TLS options in from\_http”](#fix-tls-options-in-from_http) We fixed a bug in parsing the TLS options for the `from_http` operator, preventing disabling of TLS. By [@raxyte](https://github.com/raxyte) in [#5135](https://github.com/tenzir/tenzir/pull/5135).

# Fix Move Edge Cases

Fix edge cases for moving fields when using the `move` keyword in the `where` and `map` functions. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.1.1). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix `map(move foo, name, expr)` [Section titled “Fix map(move foo, name, expr)”](#fix-mapmove-foo-name-expr) The `move` keyword now works as expected for the first positional argument of the `map` and `where` functions. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5151](https://github.com/tenzir/tenzir/pull/5151). #### Enable `to_gogle_cloud_logging` for the Nix builds [Section titled “Enable to\_gogle\_cloud\_logging for the Nix builds”](#enable-to_gogle_cloud_logging-for-the-nix-builds) The `to_google_cloud_logging` operator was not available in static binary builds due to an oversight. This is now fixed. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5154](https://github.com/tenzir/tenzir/pull/5154).

# Google Cloud Logging Improvements

This release improves the integration with Google Cloud Logging. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.1.2). ### Changes [Section titled “Changes”](#changes) #### Split out `name` option and use metadata server when unset [Section titled “Split out name option and use metadata server when unset”](#split-out-name-option-and-use-metadata-server-when-unset) We split the `name` option of `to_google_cloud_logging`, no longer requiring user to construct the ID manually. By [@raxyte](https://github.com/raxyte) in [#5160](https://github.com/tenzir/tenzir/pull/5160). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Delay catalog lookups until catalog is ready [Section titled “Delay catalog lookups until catalog is ready”](#delay-catalog-lookups-until-catalog-is-ready) The `export`, `metrics`, `diagnostics` and `partitions` operators returned an empty result when used before the node had successfully loaded its persisted data. They now wait correctly. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5156](https://github.com/tenzir/tenzir/pull/5156). #### Always shut down the pipeline manager first [Section titled “Always shut down the pipeline manager first”](#always-shut-down-the-pipeline-manager-first) We fixed a very rare bug that on shutdown could mark running pipelines as stopped, completed, or failed, causing the pipelines not to restart alongside the node. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5163](https://github.com/tenzir/tenzir/pull/5163). #### Do not refuse startup when `pid.lock` is invalid [Section titled “Do not refuse startup when pid.lock is invalid”](#do-not-refuse-startup-when-pidlock-is-invalid) The node no longer refuses to start when its last shutdown happened in the brief period on startup after its PID file was created and before it was flushed. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5164](https://github.com/tenzir/tenzir/pull/5164). #### Split out `name` option and use metadata server when unset [Section titled “Split out name option and use metadata server when unset”](#split-out-name-option-and-use-metadata-server-when-unset-1) The `to_google_cloud_logging` operator is now available in both Docker and static builds. The operator had earlier been missing due to a configuration issue. By [@raxyte](https://github.com/raxyte) in [#5160](https://github.com/tenzir/tenzir/pull/5160).

# URL Encoding

This release adds support for URL encoding and decoding, and fixes the handling of user-defined operators in TQL2. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.1.3). ### Features [Section titled “Features”](#features) #### Implement `strict { ... }` [Section titled “Implement strict { ... }”](#implement-strict--) We added a new `strict` operator that takes a pipeline and treats all warnings emitted by that pipeline as errors, i.e., effectively stopping the pipeline at the first diagnostic. This is useful when you to ensure want a critical piece of your pipeline does not continue in unexpected scenarios. By [@raxyte](https://github.com/raxyte) in [#5174](https://github.com/tenzir/tenzir/pull/5174). #### Add `encode_url` and `decode_url` functions [Section titled “Add encode\_url and decode\_url functions”](#add-encode_url-and-decode_url-functions) The `encode_url` and `decode_url` functions encode and decode URLs. For example, `"Hello%20World".decode_url()` returns `b"Hello World"`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5168](https://github.com/tenzir/tenzir/pull/5168). ### Changes [Section titled “Changes”](#changes) #### Remove `pipeline::internal_parse()` from `to_azure_log_analytics` [Section titled “Remove pipeline::internal\_parse() from to\_azure\_log\_analytics”](#remove-pipelineinternal_parse-from-to_azure_log_analytics) The `table` option of the `to_azure_log_analytics` has been renamed to `stream` to better reflect the expected value. Additionally, a new option `batch_timeout` has been added to configure the max duration to wait before finishing a batch. By [@raxyte](https://github.com/raxyte) in [#5166](https://github.com/tenzir/tenzir/pull/5166). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix user-defined operators for TQL2 [Section titled “Fix user-defined operators for TQL2”](#fix-user-defined-operators-for-tql2) User-defined operators still required the `// tql2` comment at the start or the `tenzir.tql2` option to be set, despite TQL2 being the default since Tenzir Node v5.0. They now work as expected. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5169](https://github.com/tenzir/tenzir/pull/5169).

# Compression Fixes

This PR restores the ability to customize the `import` operator’s compression level. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.1.4). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Do not ignore the `tenzir.zstd-compression-level` option [Section titled “Do not ignore the tenzir.zstd-compression-level option”](#do-not-ignore-the-tenzirzstd-compression-level-option) The `tenzir.zstd-compression-level` option now works again as advertised for setting the Zstd compression level for the partitions written by the `import` operator. For the past few releases, newly written partitions unconditionally used the default compression level. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5183](https://github.com/tenzir/tenzir/pull/5183). #### Fix lifetime issues and small bugs in `write_syslog` [Section titled “Fix lifetime issues and small bugs in write\_syslog”](#fix-lifetime-issues-and-small-bugs-in-write_syslog) We fixed a crash in `write_syslog` when receiving unexpected inputs and improved some diagnostics. By [@raxyte](https://github.com/raxyte) in [#5180](https://github.com/tenzir/tenzir/pull/5180).

# Escape Sequences

This release adds support for escape sequences in string literals. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.1.5). ### Features [Section titled “Features”](#features) #### Support escape sequences in string literals [Section titled “Support escape sequences in string literals”](#support-escape-sequences-in-string-literals) String literals in TQL now support Unicode escape sequences like `\xHH`, `\uHHHH`, `\UHHHHHHHH`, and `\u{...}`. Additionally, the named escape sequences `\r`, `\b`, `\f`, `\v`, `\a`, and `\e`, are now supported in addition to the previously supported `\n`, `\t`, and `\0`. TQL now supports literals for blobs through the `b"..."` syntax (or alternatively `br#"..."#`). Blobs are a sequence of bytes that unlike strings do not need to hold valid UTF-8, and can as such represent any binary data. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5187](https://github.com/tenzir/tenzir/pull/5187).

# Timestamp Components

This release adds the ability to extract hour, minute, and day components from timestamps. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.1.6). ### Features [Section titled “Features”](#features) #### Add `hour`, `minute`, and `second` time component extraction [Section titled “Add hour, minute, and second time component extraction”](#add-hour-minute-and-second-time-component-extraction) The `hour`, `minute`, and `second` functions extract the respective components of a `time` value, and compliment the existing `year`, `month`, and `day` functions. The `second` function includes subsecond precision. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5190](https://github.com/tenzir/tenzir/pull/5190). #### Add prototype for static platform config [Section titled “Add prototype for static platform config”](#add-prototype-for-static-platform-config) Users of the Sovereign Edition of Tenzir can now use workspace tokens to connect their Tenzir Nodes to the Tenzir Platform. By [@lava](https://github.com/lava) in [#5149](https://github.com/tenzir/tenzir/pull/5149). ### Changes [Section titled “Changes”](#changes) #### Remove deprecated `as_secs()` function [Section titled “Remove deprecated as\_secs() function”](#remove-deprecated-as_secs-function) We removed the deprecated `<duration>.as_secs()` function which has been superseded by `<duration>.count_seconds()` quite some time ago. The `count_seconds()` function provides the same functionality with a more consistent naming convention that aligns with other duration-related functions like `count_minutes()`, `count_hours()`, etc. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5190](https://github.com/tenzir/tenzir/pull/5190). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix a hang in `if` for stalled inputs [Section titled “Fix a hang in if for stalled inputs”](#fix-a-hang-in-if-for-stalled-inputs) We fixed a regression in the `if` statement that caused it to indefinitely withhold the last batch of events when its input stalled. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5196](https://github.com/tenzir/tenzir/pull/5196). #### Handle assert gracefully in `write_syslog` [Section titled “Handle assert gracefully in write\_syslog”](#handle-assert-gracefully-in-write_syslog) We now gracefully handle a panic in `write_syslog`, when `structured_data` does not have the expected shape. By [@raxyte](https://github.com/raxyte) in [#5191](https://github.com/tenzir/tenzir/pull/5191).

# Disabling Packages

This release adds the ability to disable entire packages. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.1.7). ### Features [Section titled “Features”](#features) #### Allow packages to be disabled properly [Section titled “Allow packages to be disabled properly”](#allow-packages-to-be-disabled-properly) Packages gained a new `config.disabled` option that causes all pipelines and contexts in the package to be disabled. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5161](https://github.com/tenzir/tenzir/pull/5161). #### Add option to `load_tcp` for storing sender information [Section titled “Add option to load\_tcp for storing sender information”](#add-option-to-load_tcp-for-storing-sender-information) The `peer_field` option for `load_tcp` allows for setting a field for the IP address, port, and hostname of the connected peer. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5173](https://github.com/tenzir/tenzir/pull/5173). #### Implement `<record>.keys()` [Section titled “Implement \<record>.keys()”](#implement-recordkeys) The `keys` function returns a list of strings representing the field names of a record. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5202](https://github.com/tenzir/tenzir/pull/5202). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Make the run loop of exec nodes cheaper [Section titled “Make the run loop of exec nodes cheaper”](#make-the-run-loop-of-exec-nodes-cheaper) Fixed a bug in the `load_tcp` operator that would cause it to require server certificates for incoming connections. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5193](https://github.com/tenzir/tenzir/pull/5193). #### Allow packages to be disabled properly [Section titled “Allow packages to be disabled properly”](#allow-packages-to-be-disabled-properly-1) For configured pipelines, the `tenzir.pipelines.<pipeline>.disabled` configuration option was silently ignored unless the pipeline was part of a package. This no longer happens, and disabling the pipelines through the option now works correctly. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5161](https://github.com/tenzir/tenzir/pull/5161). #### Fix URL check in `to_hive` [Section titled “Fix URL check in to\_hive”](#fix-url-check-in-to_hive) The `to_hive` operator no longer incorrectly rejects URLs, which was due to a bug introduced by Tenzir v5.1.6. By [@jachris](https://github.com/jachris) in [#5204](https://github.com/tenzir/tenzir/pull/5204).

# Fixed AMQP Integration

This release fixes a bug that sometimes prevented the `save_amqp` operator from sending messages. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.1.8). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Make amqp saver/loader detached [Section titled “Make amqp saver/loader detached”](#make-amqp-saverloader-detached) We fixed a bug in `save_amqp` that caused the operator to not send any messages. By [@IyeOnline](https://github.com/IyeOnline) in [#5206](https://github.com/tenzir/tenzir/pull/5206). #### Fix config parsing bug [Section titled “Fix config parsing bug”](#fix-config-parsing-bug) We fixed a bug that caused the 101st entry in objects by alphabetical order in `tenzir.yaml` configuration files to be ignored. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5210](https://github.com/tenzir/tenzir/pull/5210).

# OCSF Trim & Derive

This release introduces two new powerful OCSF operators that automate enum derivation and provide intelligent field trimming. The update also includes string padding functions, better HTTP requests, IP categorization and much more! Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.10.0). ### Features [Section titled “Features”](#features) #### Improved node robustness [Section titled “Improved node robustness”](#improved-node-robustness) We added an experimental feature to run node-independent operators of a pipeline in dedicated subprocesses. This brings improved error resilience and resource utilization. You can opt-in to this feature with the setting `tenzir.disable-pipeline-subprocesses: false` in `tenzir.yaml`. We plan to enable this feature by default in the future. By [@tobim](https://github.com/tobim) in [#5233](https://github.com/tenzir/tenzir/pull/5233). #### Operations on concatenated secrets [Section titled “Operations on concatenated secrets”](#operations-on-concatenated-secrets) You can now arbitrarily nest operations on secrets. This is useful for APIs that expect authentication is an encoded blob: ```tql let $headers = { auth: f"{secret("user")}:{secret("password")}".encode_base64() } ``` By [@IyeOnline](https://github.com/IyeOnline) in [#5324](https://github.com/tenzir/tenzir/pull/5324). #### New string padding functions [Section titled “New string padding functions”](#new-string-padding-functions) Ever tried aligning threat actor names in your incident reports? Or formatting CVE IDs with consistent spacing for your vulnerability dashboard? We’ve all been there, fighting with inconsistent string lengths that make our security tools output look like alphabet soup. 🍲 Meet your new formatting friends: `pad_start()` and `pad_end()`! #### Live Threat Feed Dashboard [Section titled “Live Threat Feed Dashboard”](#live-threat-feed-dashboard) Create a real-time threat indicator board with perfectly aligned columns: ```tql from {time: "14:32", actor: "APT29", target: "energy", severity: 9}, {time: "14:35", actor: "Lazarus", target: "finance", severity: 10}, {time: "14:41", actor: "APT1", target: "defense", severity: 8} select threat_line = time + " │ " + actor.pad_end(12) + " │ " + target.pad_end(10) + " │ " + severity.string().pad_start(2, "0") write_lines ``` ```plaintext 14:32 │ APT29 │ energy │ 09 14:35 │ Lazarus │ finance │ 10 14:41 │ APT1 │ defense │ 08 ``` #### CVE Priority Matrix [Section titled “CVE Priority Matrix”](#cve-priority-matrix) Format CVE IDs and CVSS scores for your vulnerability management system: ```tql from {cve: "CVE-2024-1337", score: 9.8, vector: "network", status: "🔴"}, {cve: "CVE-2024-42", score: 7.2, vector: "local", status: "🟡"}, {cve: "CVE-2024-31415", score: 5.4, vector: "physical", status: "🟢"} select priority = status + " " + cve.pad_end(16) + " [" + score.string().pad_start(4) + "] " + vector.pad_start(10, "·") write_lines ``` ```plaintext 🔴 CVE-2024-1337 [ 9.8] ···network 🟡 CVE-2024-42 [ 7.2] ·····local 🟢 CVE-2024-31415 [ 5.4] ··physical ``` #### Network Flow Analysis [Section titled “Network Flow Analysis”](#network-flow-analysis) Build clean firewall logs with aligned source/destination pairs: ```tql from {src: "10.0.0.5", dst: "8.8.8.8", proto: "DNS", bytes: 234}, {src: "192.168.1.100", dst: "13.107.42.14", proto: "HTTPS", bytes: 8924}, {src: "172.16.0.50", dst: "185.199.108.153", proto: "SSH", bytes: 45812} select flow = src.pad_start(15) + " → " + dst.pad_start(15) + " [" + proto.pad_end(5) + "] " + bytes.string().pad_start(7) + " B" write_lines ``` ```plaintext 10.0.0.5 → 8.8.8.8 [DNS ] 234 B 192.168.1.100 → 13.107.42.14 [HTTPS] 8924 B 172.16.0.50 → 185.199.108.153 [SSH ] 45812 B ``` Both padding functions accept three parameters: * **String to pad** (required) * **Target length** (required) * **Padding character** (optional, defaults to space) If your string is already longer than the target length, it returns unchanged. Multi-character padding? That’s a paddlin’ (returns an error). Your SOC dashboards never looked so clean! 🎯 By [@mavam](https://github.com/mavam) in [#5344](https://github.com/tenzir/tenzir/pull/5344). #### Sinks in HTTP Parsing Pipelines [Section titled “Sinks in HTTP Parsing Pipelines”](#sinks-in-http-parsing-pipelines) Parsing pipeline in the `from_http` and `http` operators now support sinks. This worked already in `from_file` parsing pipelines and now works, as expected, also in the HTTP parsing pipelines. For example, you can now write: ```tql from_http "https://cra.circl.lu/opendata/geo-open/mmdb-country-asn/latest.mmdb" { context::load "geo-open-country-asn" } ``` By [@mavam](https://github.com/mavam) in [#5343](https://github.com/tenzir/tenzir/pull/5343). #### HTTP request body encoding [Section titled “HTTP request body encoding”](#http-request-body-encoding) The `from_http` and `http` operators now support using `record` values for the request `body` parameter. By default, the record is serialized as JSON. You can also specify `encode="form"` to send the body as URL-encoded form data. When using `form` encoding, nested fields are flattened using dot notation (e.g., `foo: {bar: "baz"}` => `foo.bar=baz`). This supersedes the `payload` parameter, which therefore is now deprecated. ###### Examples [Section titled “Examples”](#examples) By default, setting `body` to a record will JSON-encode it: ```tql http "https://api.example.com/data", body={foo: "bar", count: 42} ``` ```http POST /data HTTP/1.1 Host: api.example.com Content-Type: application/json Content-Length: 33 { "foo": "bar", "count": 42 } ``` To change the encoding, you can use the `encode` option: ```tql http "https://api.example.com/data", body={foo: {bar: "baz"}, count: 42}, encode="form" ``` ```http POST /data HTTP/1.1 Host: api.example.com Content-Type: application/x-www-form-urlencoded Content-Length: 20 foo.bar=baz&count=42 ``` Arbitrary body contents can be sent by using a string or blob: ```tql http "https://api.example.com/data", body="hello world!" ``` ```http POST /data HTTP/1.1 Host: api.example.com Content-Length: 12 hello world! ``` By [@raxyte](https://github.com/raxyte) in [#5305](https://github.com/tenzir/tenzir/pull/5305). #### IP address categorization functions [Section titled “IP address categorization functions”](#ip-address-categorization-functions) Ever wondered if that suspicious traffic is coming from inside the corporate network? 🏢 We’ve got you covered with a new suite of IP address classification functions that make network analysis a breeze. **`is_private()`** - Quickly spot internal RFC 1918 addresses in your logs. Perfect for identifying lateral movement or distinguishing between internal and external threats: ```tql where src_ip.is_private() and dst_ip.is_global() // Catch data exfiltration attempts from your internal network ``` **`is_global()`** - Find publicly routable addresses. Essential for tracking external attackers or monitoring outbound connections: ```tql where src_ip.is_global() and failed_login_count > 5 // Detect brute force attempts from the internet ``` **`is_multicast()`** - Identify multicast traffic (224.0.0.0/4, ff00::/8). Great for spotting mDNS, SSDP, and other broadcast protocols that shouldn’t cross network boundaries: ```tql where dst_ip.is_multicast() and src_ip.is_global() // Flag suspicious multicast from external sources ``` **`is_link_local()`** - Detect link-local addresses (169.254.0.0/16, fe80::/10). Useful for identifying misconfigurations or APIPA fallback: ```tql where server_ip.is_link_local() // Find services accidentally binding to link-local addresses ``` **`is_loopback()`** - Spot loopback addresses (127.0.0.0/8, ::1). Hunt for suspicious local connections or tunneled traffic: ```tql where src_ip != dst_ip and dst_ip.is_loopback() // Unusual loopback connections might indicate malware ``` **`ip_category()`** - Get the complete classification in one shot. Returns: “global”, “private”, “multicast”, “link\_local”, “loopback”, “broadcast”, or “unspecified”: ```tql where src_ip.ip_category() == "private" and dst_ip.ip_category() == "multicast" // Analyze traffic patterns by IP category ``` These functions work seamlessly with both IPv4 and IPv6 addresses, making them future-proof for your dual-stack environments. Happy hunting! 🔍 By [@mavam](https://github.com/mavam) in [#5336](https://github.com/tenzir/tenzir/pull/5336). #### `ocsf::trim` and `ocsf::derive` [Section titled “ocsf::trim and ocsf::derive”](#ocsftrim-and-ocsfderive) Tenzir now provides two new operators for processing OCSF events: **`ocsf::derive`** automatically assigns enum strings from their integer counterparts and vice versa. It performs bidirectional enum derivation for OCSF events and validates consistency between existing enum values. ```tql from { activity_id: 1, class_uid: 1001, metadata: {version: "1.5.0"}, } ocsf::derive ``` This transforms the event to include the derived `activity_name: "Create"` and `class_name: "File System Activity"` fields. **`ocsf::trim`** intelligently removes fields from OCSF events to reduce data size while preserving essential information. You can also have explicit control over optional and recommended field removal. ```tql from { class_uid: 3002, class_name: "Authentication", user: { name: "alice", display_name: "Alice", }, status: "Success", } ocsf::trim ``` This removes non-essential fields like `class_name` and `user.display_name` while keeping critical information intact. By [@jachris](https://github.com/jachris) in [#5330](https://github.com/tenzir/tenzir/pull/5330). #### Compression for `write_bitz` [Section titled “Compression for write\_bitz”](#compression-for-write_bitz) Tenzir’s internal wire format, which is accessible through the `read_bitz` and `write_bitz` operators, now uses Zstd compression internally, resulting in a significantly smaller output size. This change is backwards-compatible. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5335](https://github.com/tenzir/tenzir/pull/5335). ### Changes [Section titled “Changes”](#changes) #### Better query optimization [Section titled “Better query optimization”](#better-query-optimization) Previously, queries that used `export` followed by a `where` that used fields such as `this["field name"]` were not optimized. Now, the same optimizations apply as with normal fields, improving the performance of such queries. By [@jachris](https://github.com/jachris) in [#5362](https://github.com/tenzir/tenzir/pull/5362). #### Improved `join` behavior [Section titled “Improved join behavior”](#improved-join-behavior) The `join` function now also works with empty lists that are typed as `list<null>`. Furthermore, it now emits more helpful warnings. By [@jachris](https://github.com/jachris) in [#5356](https://github.com/tenzir/tenzir/pull/5356). #### Respecting error responses from Azure Log Analytics [Section titled “Respecting error responses from Azure Log Analytics”](#respecting-error-responses-from-azure-log-analytics) The `to_azure_log_analytics` operator now emits an error when it receives any response considering an internal error. Those normally indicate configuration errors and the pipeline will now stop with an error instead of continuing to send data that will not be received correctly. By [@tobim](https://github.com/tobim) in [#5314](https://github.com/tenzir/tenzir/pull/5314). #### Renamed `to_asl` [Section titled “Renamed to\_asl”](#renamed-to_asl) We renamed our Amazon Security Lake integration operator from `to_asl` to `to_amazon_security_lake`. The old name is now deprecated and will be removed in the future. By [@IyeOnline](https://github.com/IyeOnline) in [#5340](https://github.com/tenzir/tenzir/pull/5340). #### `kv` parser no longer produces empty fields [Section titled “kv parser no longer produces empty fields”](#kv-parser-no-longer-produces-empty-fields) Our Key-Value parsers (the `read_kv` operator and `parse_kv` function) previously produced empty values if the `value_split` was not found. With this change, a “field” missing a `value_split` is considered an extension of the previous fields value instead: ```tql from \ {input: "x=1 y=2 z=3 4 5 a=6"}, this = { ...input.parse_kv() } ``` Previous result: ```tql {x:1, y:2, z:"3", "4":"", "5":"", a:6} ``` New result: ```tql {x:1, y:2, z:"3 4 5", a:6} ``` By [@IyeOnline](https://github.com/IyeOnline) in [#5313](https://github.com/tenzir/tenzir/pull/5313). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Non-default databases in `to_clickhouse` [Section titled “Non-default databases in to\_clickhouse”](#non-default-databases-in-to_clickhouse) The `to_clickhouse` operator erroneously rejected `table` arguments of the form `database_name.table_name`. This is now fixed, allowing you to write to non-default databases. By [@IyeOnline](https://github.com/IyeOnline) in [#5355](https://github.com/tenzir/tenzir/pull/5355). #### Remove file size limit from Amazon Security Lake Integration [Section titled “Remove file size limit from Amazon Security Lake Integration”](#remove-file-size-limit-from-amazon-security-lake-integration) We removed the 256MB file size limit from the Amazon Security Lake integration. By [@IyeOnline](https://github.com/IyeOnline) in [#5340](https://github.com/tenzir/tenzir/pull/5340). #### Newlines before `else` [Section titled “Newlines before else”](#newlines-before-else) Previously, the `if … { … } else { … }` construct required that there was no newline before `else`. This restriction is now lifted, which allows placing `else` at the beginning of the line: ```tql if x { … } else if y { … } else { … } ``` By [@jachris](https://github.com/jachris) in [#5348](https://github.com/tenzir/tenzir/pull/5348). #### Fixed `encrypt_cryptopan` function [Section titled “Fixed encrypt\_cryptopan function”](#fixed-encrypt_cryptopan-function) We fixed a bug that sometimes caused the `encrypt_cryptopan` function to fail with the error “got `ip`, expected `ip`”, which was caused by an incorrect type check. The function now works as expected again. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5345](https://github.com/tenzir/tenzir/pull/5345). #### Fixed `list_separator` option name in `print_csv` [Section titled “Fixed list\_separator option name in print\_csv”](#fixed-list_separator-option-name-in-print_csv) The `print_csv`, `print_ssv` and `print_tsv` functions had an option incorrectly named `field_separator`. Instead, these functions have an option `list_separator` now, allowing you to change the list separator. You cannot set a custom `field_separator` on these functions. If you want to print with custom `field_separator`s, use `print_xsv` instead. By [@IyeOnline](https://github.com/IyeOnline) in [#5357](https://github.com/tenzir/tenzir/pull/5357). #### Fix `context::create_geoip` without `db_path` [Section titled “Fix context::create\_geoip without db\_path”](#fix-contextcreate_geoip-without-db_path) The `context::create_geoip` operator failed with a `message_mismatch` error when no `db_path` option was provided. This was caused by an internal serialization error, which we now fixed. This is the only known place where this error occurred. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5342](https://github.com/tenzir/tenzir/pull/5342). #### Fix `http` operator pagination [Section titled “Fix http operator pagination”](#fix-http-operator-pagination) The `http` operator dropped all provided HTTP headers after the first request when performing paginated requests. The operator now preserves the headers for all requests. By [@mavam](https://github.com/mavam) in [#5332](https://github.com/tenzir/tenzir/pull/5332).

# Better Performance

This release delivers significant performance improvements for situations with many concurrent pipelines, making Tenzir more robust under high-load scenarios. New features include AWS role assumption support, enhanced string trimming functionality, and improved HTTP error handling capabilities. Additionally, this release adds several new operators and comes with various bug fixes. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.11.0). ### Features [Section titled “Features”](#features) #### Roles in `save_s3` and `to_amazon_security_lake` [Section titled “Roles in save\_s3 and to\_amazon\_security\_lake”](#roles-in-save_s3-and-to_amazon_security_lake) We have added new options to assume a role to the `save_s3` and `to_amazon_security_lake` operators. You can specify an AWS `role` and the operator(s) will assume this role for authorization and optionally. Additionally you can specify an `external_id` to use alongside the role. By [@raxyte](https://github.com/raxyte), [@IyeOnline](https://github.com/IyeOnline) in [#5391](https://github.com/tenzir/tenzir/pull/5391). #### Trimming custom characters [Section titled “Trimming custom characters”](#trimming-custom-characters) The `trim()`, `trim_start()`, and `trim_end()` functions can now remove specific characters from strings, not just whitespace. Pass a second argument containing a string where each character represents a character to remove: ```tql from { path: "/path/to/file/".trim("/"), decorated: "--hello--world--".trim("-"), complex: "/-/data/-/".trim("/-") } ``` ```tql { path: "path/to/file", decorated: "hello--world", complex: "data" } ``` Each character in the second argument is treated individually, not as a complete string to match: ```tql from { // Removes 'a', 'e', and 'g' from both ends chars: "abcdefg".trim("aeg"), // Removes any 'o', 'l', 'e', or 'h' from both ends word: "helloworldhello".trim("olleh") } ``` ```tql { chars: "bcdf", word: "wr" } ``` This also works with `trim_start()` and `trim_end()` for one-sided trimming: ```tql from { start: "///api/v1/users".trim_start("/"), end: "data.csv.tmp.....".trim_end(".") } ``` ```tql { start: "api/v1/users", end: "data.csv" } ``` By [@mavam](https://github.com/mavam) in [#5389](https://github.com/tenzir/tenzir/pull/5389). #### Handling HTTP error status codes [Section titled “Handling HTTP error status codes”](#handling-http-error-status-codes) The `from_http` and `http` operators now provide an `error_field` option that lets you specify a field to receive the error response as a `blob`. When you set this option, the operators keep events with status codes outside the 200–399 range so you can handle them manually. By [@raxyte](https://github.com/raxyte) in [#5358](https://github.com/tenzir/tenzir/pull/5358). #### Versioned sources in `to_amazon_security_lake` operator [Section titled “Versioned sources in to\_amazon\_security\_lake operator”](#versioned-sources-in-to_amazon_security_lake-operator) The `to_amazon_security_lake` operator now supports versioned custom sources, such as ```tql let $lake_url = "s3://aws-security-data-lake-eu-west-2-lake-abcdefghijklmnopqrstuvwxyz1234/ext/tnz-ocsf-dns/1.0/" to_amazon_security_lake $lake_url, … ``` By [@IyeOnline](https://github.com/IyeOnline) in [#5369](https://github.com/tenzir/tenzir/pull/5369). #### Dropping null fields [Section titled “Dropping null fields”](#dropping-null-fields) The new `drop_null_fields` operator removes fields containing null values from events. Without arguments, it drops all fields with null values. With field arguments, it drops the specified fields if they contain null values, and for record fields, it also recursively drops all null fields within them. Drop all null fields: ```tql from { id: 42, user: {name: "alice", email: null}, status: null, tags: ["security", "audit"] } drop_null_fields ``` ```tql { id: 42, user: { name: "alice", }, tags: [ "security", "audit", ], } ``` Drop specific null fields: ```tql from { id: 42, user: {name: "alice", email: null}, status: null, tags: ["security", "audit"] } drop_null_fields user.email ``` ```tql { id: 42, user: { name: "alice", }, status: null, tags: [ "security", "audit", ], } ``` Note that `status` remains because it wasn’t specified in the field list. When specifying a record field, all null fields within it are removed: ```tql from { user: {name: "alice", email: null, role: null}, settings: {theme: "dark", notifications: null} } drop_null_fields user ``` ```tql { user: { name: "alice", }, settings: { theme: "dark", notifications: null, }, } ``` The `user.email` and `user.role` fields are removed because they are null fields within the specified `user` record. The `settings.notifications` field remains because `settings` was not specified. By [@mavam](https://github.com/mavam) in [#5370](https://github.com/tenzir/tenzir/pull/5370). #### More supported types in `read_parquet` [Section titled “More supported types in read\_parquet”](#more-supported-types-in-read_parquet) Tenzir’s does not support all types that Parquet supports. We have enabled the `read_parquet` operator to accept more types that are convertible to supported types. It will convert integer, floating point, and time types to the appropriate (wider) Tenzir type. For example, if your Parquet file contains a column of type `int32`, it will now be read in as `int64` instead of rejecting the entire file. By [@IyeOnline](https://github.com/IyeOnline) in [#5373](https://github.com/tenzir/tenzir/pull/5373). #### Dynamic `log_type` for `to_google_secops` [Section titled “Dynamic log\_type for to\_google\_secops”](#dynamic-log_type-for-to_google_secops) The `to_google_secops` operator now supports dynamic `log_type`s. You can set the option to any expression evaluating to a string, e.g.: ```tql from {type: "CUSTOM_DNS", text: "..."}, {type: "BIND_DNS", text: "..."} to_google_secops log_type=type, log_text=text, ... ``` By [@raxyte](https://github.com/raxyte) in [#5365](https://github.com/tenzir/tenzir/pull/5365). #### New `read_all` operator [Section titled “New read\_all operator”](#new-read_all-operator) The `read_all` operator produces a single event for its entire input stream. By [@jachris](https://github.com/jachris) in [#5368](https://github.com/tenzir/tenzir/pull/5368). #### Account key authentication for Azure Blob Storage [Section titled “Account key authentication for Azure Blob Storage”](#account-key-authentication-for-azure-blob-storage) The `load_azure_blob_storage` and `save_azure_blob_storage` operators now support account key (shared key) authentication via a new `account_key` option. This provides an additional method for accessing Azure Blob Storage, alongside existing authentication options. By [@raxyte](https://github.com/raxyte) in [#5380](https://github.com/tenzir/tenzir/pull/5380). ### Changes [Section titled “Changes”](#changes) #### Performance improvements [Section titled “Performance improvements”](#performance-improvements) Tenzir can now handle significantly more concurrent pipelines without becoming unresponsive. These improvements make the system significantly more robust under high load, with response times remaining stable even with thousands of concurrent pipelines. By [@jachris](https://github.com/jachris) in [#5382](https://github.com/tenzir/tenzir/pull/5382). #### Improvements to `context::enrich` [Section titled “Improvements to context::enrich”](#improvements-to-contextenrich) The `context::enrich` operator now allows using `mode="append"` even if the enrichment does not have the exact same type as the existing type, as long as they are compatible. Furthermore, `mode="ocsf"` now returns `null` if no enrichment took place instead of a record with a `null` data field. By [@jachris](https://github.com/jachris) in [#5388](https://github.com/tenzir/tenzir/pull/5388). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Context operator metrics [Section titled “Context operator metrics”](#context-operator-metrics) The data flowing through the `context::` family of operators is no longer counted as actual ingress and egress. By [@jachris](https://github.com/jachris) in [#5383](https://github.com/tenzir/tenzir/pull/5383). #### Fixed secrets in `headers` argument in `from_http` [Section titled “Fixed secrets in headers argument in from\_http”](#fixed-secrets-in-headers-argument-in-from_http) We fixed a crash when using a secret in the `headers` argument of the `from_http` operator. By [@IyeOnline](https://github.com/IyeOnline) in [#5376](https://github.com/tenzir/tenzir/pull/5376). #### Fixed crash in `read_parquet` [Section titled “Fixed crash in read\_parquet”](#fixed-crash-in-read_parquet) Tenzir and the `read_parquet` operator only support a subset of all Parquet types. Reading an unsupported Parquet file could previously crash Tenzir in some situations. This is now fixed and the operator instead raises an error. By [@IyeOnline](https://github.com/IyeOnline) in [#5373](https://github.com/tenzir/tenzir/pull/5373). #### Fixed issue with table creation in `to_clickhouse` [Section titled “Fixed issue with table creation in to\_clickhouse”](#fixed-issue-with-table-creation-in-to_clickhouse) Multiple `to_clickhouse` operators can now attempt to create the same ClickHouse table at the same time without an error. By [@IyeOnline](https://github.com/IyeOnline) in [#5360](https://github.com/tenzir/tenzir/pull/5360). #### Fixed `to_amazon_security_lake` partitioning [Section titled “Fixed to\_amazon\_security\_lake partitioning”](#fixed-to_amazon_security_lake-partitioning) The `to_amazon_security_lake` incorrectly partitioned as `…/accountID=…`. It now uses the correct `…/accountId=…`. By [@IyeOnline](https://github.com/IyeOnline) in [#5369](https://github.com/tenzir/tenzir/pull/5369). #### Return type of `map` for empty lists [Section titled “Return type of map for empty lists”](#return-type-of-map-for-empty-lists) Previously, the `map` function would return the input list when the input was empty, possibly producing type warnings downstream. It now correctly returns `list<null>` instead. By [@jachris](https://github.com/jachris) in [#5385](https://github.com/tenzir/tenzir/pull/5385). #### Formatting `ip` and `subnet` values in `to_amazon_security_lake` [Section titled “Formatting ip and subnet values in to\_amazon\_security\_lake”](#formatting-ip-and-subnet-values-in-to_amazon_security_lake) The `to_amazon_security_lake` operator now correctly formats `ip` and `subnet` values as strings and formats timestamps using millisecond precision, similar to the Security Lake built-in sources. By [@raxyte](https://github.com/raxyte) in [#5387](https://github.com/tenzir/tenzir/pull/5387).

# HTTP Fix and Compression for Azure Log Analytics

This release introduces payload compression for Azure Log Analytics to reduce bandwidth usage, as well as an important fix for a `from_http` bug that was introduced with the previous release. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.11.1). ### Changes [Section titled “Changes”](#changes) #### `to_azure_log_analytics` compression [Section titled “to\_azure\_log\_analytics compression”](#to_azure_log_analytics-compression) The `to_azure_log_analytics` operator now compresses the sent payload, significantly reducing the bandwidth consumed. By [@raxyte](https://github.com/raxyte) in [#5394](https://github.com/tenzir/tenzir/pull/5394). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fixed `from_http` default port [Section titled “Fixed from\_http default port”](#fixed-from_http-default-port) Using the `from_http` operator as a client without explicitly specifying a port resulted in an error complaining that the port cannot be zero. This now works as expected, meaning that the default port is derived correctly from the URL scheme, i.e., 80 for HTTP and 443 for HTTPS. By [@jachris](https://github.com/jachris) in [#5398](https://github.com/tenzir/tenzir/pull/5398).

# OCSF 1.6.0

This release adds support for OCSF 1.6.0 and introduces the `replace` operator. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.12.0). ### Features [Section titled “Features”](#features) #### Check if your data is truly empty [Section titled “Check if your data is truly empty”](#check-if-your-data-is-truly-empty) Ever stared at your security logs wondering if that suspicious-looking field is actually empty or just pretending? We’ve all been there. That’s why we added `is_empty()` - a universal emptiness detector that works on strings, lists, and records. ```tql from { id: "evt-12345", tags: ["malware", "c2"], metadata: {}, description: "", iocs: [] } has_metadata = not metadata.is_empty() has_description = not description.is_empty() has_iocs = not iocs.is_empty() ``` ```tql { id: "evt-12345", tags: [ "malware", "c2", ], metadata: {}, description: "", iocs: [], has_metadata: false, has_description: false, has_iocs: false, } ``` No more checking `length() == 0` or wondering if that field exists but is empty. Just ask `is_empty()` and move on with your threat hunting! By [@mavam](https://github.com/mavam) in [#5403](https://github.com/tenzir/tenzir/pull/5403). #### Replacing values [Section titled “Replacing values”](#replacing-values) The new `replace` operator allows you to find and replace all occurrences of a specific value across all fields (but not in lists) in your data with another value. This is particularly useful for data sanitization, redacting sensitive information, or normalizing values across datasets. The operator scans every field in each input event and replaces any value that equals the `what` parameter with the value specified by `with`. Replace all occurrences of the string `"-"` with null: ```tql from { status: "-", data: {result: "-", count: 42}, items: ["-", "valid", "-"] } replace what="-", with=null ``` ```tql { status: null, data: {result: null, count: 42}, items: ["-", "valid", "-"] } ``` Redact a specific IP address across all fields: ```tql from { src_ip: 192.168.1.1, dst_ip: 10.0.0.1, metadata: {source: 192.168.1.1} } replace what=192.168.1.1, with="REDACTED" ``` ```tql { src_ip: "REDACTED", dst_ip: 10.0.0.1, metadata: {source: "REDACTED"} } ``` By [@raxyte](https://github.com/raxyte) in [#5372](https://github.com/tenzir/tenzir/pull/5372). #### `role` and `external_id` options for \`load\_s3 [Section titled “role and external\_id options for \`load\_s3”](#role-and-external_id-options-for-load_s3) We added `role` and `external_id` options to the `load_s3` operator, bringing it in line with `save_s3`, which already features these options. By [@IyeOnline](https://github.com/IyeOnline) in [#5406](https://github.com/tenzir/tenzir/pull/5406). #### Support for OCSF 1.6.0 [Section titled “Support for OCSF 1.6.0”](#support-for-ocsf-160) The `ocsf::` family of operators now supports OCSF 1.6.0. Furthermore, the version `1.7.0-dev` is also supported now. By [@jachris](https://github.com/jachris) in [#5407](https://github.com/tenzir/tenzir/pull/5407). ### Changes [Section titled “Changes”](#changes) #### Handling of type conflicts when reading data [Section titled “Handling of type conflicts when reading data”](#handling-of-type-conflicts-when-reading-data) Tenzir requires all items of a list to have the same type. As a result, items in lists that contain different types (such as `[1, "test"]`) are cast to the common type `string`. Previously, all items were stored with their JSON representation, leading to the result `["1", "\"test\""]`. Now, only lists and record are stored as JSON, and strings are preserved without extra quotes. Thus, the new output is `["1", "test"]`. By [@jachris](https://github.com/jachris) in [#5405](https://github.com/tenzir/tenzir/pull/5405). #### Automatic integer casting in `ocsf::apply` [Section titled “Automatic integer casting in ocsf::apply”](#automatic-integer-casting-in-ocsfapply) The `ocsf::apply` operator now automatically casts `uint64` values to `int64` when the OCSF schema expects an integer field. This is important because the exact integer type is mostly considered an implementation detail. Unsigned integers are mainly produced when reading events for which a schema has been defined. This change makes sure that OCSF mappings that use the resulting events can successfully pass through `ocsf::apply`. **Example:** ```tql from { class_uid: 4001, metadata: { version: "1.5.0" }, severity_id: uint(3) } ocsf::apply ``` Previously, this would result in a type mismatch warning and the `severity_id` field would be set to null. Now the `uint64` value 3 is automatically cast to `int64`, preserving the data. Values that exceed the maximum `int64` value will still generate a warning and be set to null. By [@jachris](https://github.com/jachris) in [#5401](https://github.com/tenzir/tenzir/pull/5401). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Metadata handling of `ocsf::derive` and `ocsf::trim` [Section titled “Metadata handling of ocsf::derive and ocsf::trim”](#metadata-handling-of-ocsfderive-and-ocsftrim) The `ocsf::derive` and `ocsf::trim` operators now correctly preserve the metadata (such as `@name`) of the incoming event instead of overwriting it with the internal metadata used to encode OCSF schemas. By [@jachris](https://github.com/jachris) in [#5402](https://github.com/tenzir/tenzir/pull/5402). #### Optimization of the `delay` operator [Section titled “Optimization of the delay operator”](#optimization-of-the-delay-operator) The `delay` operator optimization routine incorrectly declared that the behavior of the operator does not depend on the order of its input. As a result, chains such as `sort -> delay -> publish` did not correctly delay events. By [@jachris](https://github.com/jachris) in [#5399](https://github.com/tenzir/tenzir/pull/5399).

# SecOps & SecurityLake Fixes

We fixed two bugs in the `to_google_secops` and `to_amazon_security_lake` operators. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.12.1). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Assertion failures in `to_google_secops` [Section titled “Assertion failures in to\_google\_secops”](#assertion-failures-in-to_google_secops) The `to_google_secops` operator failed assertions when a batch of data was missing `log_type` or if no input was received for longer than `batch_timeout`. By [@raxyte](https://github.com/raxyte) in [#5411](https://github.com/tenzir/tenzir/pull/5411). #### Fixed handling of `time` in `to_amazon_security_lake` [Section titled “Fixed handling of time in to\_amazon\_security\_lake”](#fixed-handling-of-time-in-to_amazon_security_lake) Previously events with a `null` value for the OCSF `time` field would incorrectly be written to some partition in the lake. In rare circumstances, this could also cause a crash. The operator now correctly skips events without a valid `time`. By [@IyeOnline](https://github.com/IyeOnline) in [#5409](https://github.com/tenzir/tenzir/pull/5409).

# Enhanced UDP Source

This release enhances UDP ingestion with the new `from_udp` operator that produces structured events with sender metadata. We also improved the execution model for `every` and `cron` subpipelines, added DNS lookup capabilities, and made the Syslog parser more flexible. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.13.0). ### Features [Section titled “Features”](#features) #### Receive UDP datagrams as events [Section titled “Receive UDP datagrams as events”](#receive-udp-datagrams-as-events) The new `from_udp` operator receives UDP datagrams and outputs structured events containing both the data and peer information. Unlike `load_udp` which outputs raw bytes, `from_udp` produces events with metadata about the sender, making it ideal for security monitoring and network analysis where knowing the source of each datagram is important. Each received datagram becomes an event with this structure: ```tql from_udp "0.0.0.0:1234" ``` ```tql { data: "Hello, UDP!\n", peer: { ip: 192.168.1.100, port: 54321, }, } ``` Enable hostname resolution for DNS lookups (disabled by default for performance): ```tql from_udp "0.0.0.0:1234", resolve_hostnames=true ``` ```tql { data: "Hello, UDP!\n", peer: { ip: 192.168.1.100, port: 54321, hostname: "client.example.com", }, } ``` By [@mavam](https://github.com/mavam) in [#5375](https://github.com/tenzir/tenzir/pull/5375). #### Perform inline DNS lookups [Section titled “Perform inline DNS lookups”](#perform-inline-dns-lookups) The new `dns_lookup` operator enables DNS resolution for both IP addresses and domain names. It performs reverse PTR lookups for IP addresses and forward A/AAAA lookups for hostnames, returning structured results with hostnames or IP addresses with their types and TTLs. Resolve a domain name to IP addresses: ```tql from { host: "example.com" } dns_lookup host ``` ```tql { host: "example.com", dns_lookup: { records: [ { address: 2600:1406:3a00:21::173e:2e65, type: "AAAA", ttl: 58s, }, { address: 23.215.0.136, type: "A", ttl: 2.433333333333333min, }, // ... more records ], }, } ``` Resolve an IP address to a hostname: ```tql from { ip: 8.8.8.8 } dns_lookup ip ``` ```tql { ip: 8.8.8.8, dns_lookup: { hostname: "dns.google", }, } ``` By [@mavam](https://github.com/mavam), [@IyeOnline](https://github.com/IyeOnline) in [#5379](https://github.com/tenzir/tenzir/pull/5379). #### `contains_null(x:any)` [Section titled “contains\_null(x:any)”](#contains_nullxany) We added a new `contains_null` function that checks if the input value contains any `null` values. By [@raxyte](https://github.com/raxyte) in [#5419](https://github.com/tenzir/tenzir/pull/5419). #### Context for `assert` operator [Section titled “Context for assert operator”](#context-for-assert-operator) The `assert` operator now has a `message` option that can be used to provide context about the event failing the assertion. By [@raxyte](https://github.com/raxyte) in [#5433](https://github.com/tenzir/tenzir/pull/5433). #### More lenient RFC 3164 Syslog parsing [Section titled “More lenient RFC 3164 Syslog parsing”](#more-lenient-rfc-3164-syslog-parsing) Our syslog parser now allows for a `.` character in the tag/app\_name field and any character in the `process_id` field. This allows you to parse the log: ```plaintext <21>Aug 18 12:00:00 hostname_redacted .NetRuntime[-]: content... ``` ```tql { facility: 2, severity: 5, timestamp: "Aug 18 12:00:00", hostname: "hostname_redacted", app_name: ".NetRuntime", process_id: "-", content: "content...", } ``` By [@IyeOnline](https://github.com/IyeOnline) in [#5426](https://github.com/tenzir/tenzir/pull/5426). ### Changes [Section titled “Changes”](#changes) #### `every` and `cron` subpipelines [Section titled “every and cron subpipelines”](#every-and-cron-subpipelines) We changed the execution model for `every` and `cron` subpipelines, resulting in: * operators such as `context::load` now execute properly. * subpipelines can contain both `remote` and `local` operators. * subpipelines must not accept or output bytes. By [@raxyte](https://github.com/raxyte) in [#5410](https://github.com/tenzir/tenzir/pull/5410). #### Deprecation of `split_at_null` option of `read_lines` [Section titled “Deprecation of split\_at\_null option of read\_lines”](#deprecation-of-split_at_null-option-of-read_lines) The `split_at_null` option of the `read_lines` operator is now deprecated. Use `read_delimited "\0"` instead. By [@jachris](https://github.com/jachris) in [#5431](https://github.com/tenzir/tenzir/pull/5431). #### Amazon Security Lake [Section titled “Amazon Security Lake”](#amazon-security-lake) We have made two convenience changes to the `to_amazon_security_lake` operator: * The `role` parameter now defaults to the automatically generated role for the custom source in Security Lake. If you are using a different role, you can still specify it. * The operator now uses UUIDv7 for the names of the files written into the Security Lake’s blob storage. Since UUIDv7 is time ordered, inspecting the files in the lake becomes slightly easier. By [@mavam](https://github.com/mavam), [@IyeOnline](https://github.com/IyeOnline) in [#5412](https://github.com/tenzir/tenzir/pull/5412). #### Sorting Improvements [Section titled “Sorting Improvements”](#sorting-improvements) We have re-done the internals of the `sort` operator. You will now be able to more reliably sort events using lists or records as keys. Lists are compared lexicographically between their values, while records are compared by their sorted key-value pairs. By [@IyeOnline](https://github.com/IyeOnline) in [#5425](https://github.com/tenzir/tenzir/pull/5425). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Rare crash in `save_tcp` operator [Section titled “Rare crash in save\_tcp operator”](#rare-crash-in-save_tcp-operator) We fixed a rare shutdown crash in the `save_tcp` operator. By [@jachris](https://github.com/jachris) in [#5420](https://github.com/tenzir/tenzir/pull/5420).

# Azure Blob Storage & Stability Improvements

This release adds a new Azure Blob Storage operator with account key authentication and improves Google Security Operations retry handling. It also contains various small fixes and improvements. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.13.1). ### Features [Section titled “Features”](#features) #### `from_azure_blob_storage` operator [Section titled “from\_azure\_blob\_storage operator”](#from_azure_blob_storage-operator) The new `from_azure_blob_storage` operator works similarly to `from_file` but supports additional Azure Blob Storage specific options. For example, you can set the `account_key`: ```tql from_azure_blob_storage "abfs://container/data/*.csv", account_key="your-account-key" ``` By [@raxyte](https://github.com/raxyte) in [#5429](https://github.com/tenzir/tenzir/pull/5429). #### Dynamic `namespace` and retry logic for `to_google_secops` [Section titled “Dynamic namespace and retry logic for to\_google\_secops”](#dynamic-namespace-and-retry-logic-for-to_google_secops) The `to_google_secops` operator now retries requests which fail with a `5XX` or a `429` status code. Additionally, the `namespace` option of the operator now supports all expressions that evaluate to a `string`. By [@raxyte](https://github.com/raxyte) in [#5446](https://github.com/tenzir/tenzir/pull/5446). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Misleading `from_file remove=true` warning [Section titled “Misleading from\_file remove=true warning”](#misleading-from_file-removetrue-warning) The `from_file` operator emits a warning when using `remove=true` if the file could not be removed. When deleting the last file inside an S3 directory, we keep that directory around by inserting a zero-sized object. However, this failed when the necessary `PutObject` permissions were not granted, thus emitting a warning even though the file was removed successfully. For this specific case, we thus no longer emit a warning. Other issues during file deletion are still reported. By [@jachris](https://github.com/jachris) in [#5438](https://github.com/tenzir/tenzir/pull/5438). #### Timezone troubles from `parse_time()` [Section titled “Timezone troubles from parse\_time()”](#timezone-troubles-from-parse_time) We fixed assertion failures when using the `parse_time` function with the `%z` or `%Z` specifiers. By [@raxyte](https://github.com/raxyte) in [#5435](https://github.com/tenzir/tenzir/pull/5435). #### Fixed crash when writing out enumerations [Section titled “Fixed crash when writing out enumerations”](#fixed-crash-when-writing-out-enumerations) We fixed a rare crash that could occur when writing/printing enumeration values in various formats. By [@IyeOnline](https://github.com/IyeOnline) in [#5434](https://github.com/tenzir/tenzir/pull/5434). #### Buffering in the `fork` operator [Section titled “Buffering in the fork operator”](#buffering-in-the-fork-operator) We fixed an issue in the `fork` operator where the last event would get stuck. By [@raxyte](https://github.com/raxyte) in [#5436](https://github.com/tenzir/tenzir/pull/5436).

# New S3 Operator & Fork Operator Bugfix

This release adds a new S3 operator and fixes a bug within the `fork` operator. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.13.2). ### Features [Section titled “Features”](#features) #### `from_s3` operator [Section titled “from\_s3 operator”](#from_s3-operator) The `from_s3` operator reads files from Amazon S3 with support for glob patterns, automatic format detection, and file monitoring. ```tql from_s3 "s3://my-bucket/data/**.json" ``` The operator supports multiple authentication methods including default AWS credentials, explicit access keys, IAM role assumption, and anonymous access for public buckets: ```tql from_s3 "s3://my-bucket/data.csv", access_key=secret("AWS_ACCESS_KEY"), secret_key=secret("AWS_SECRET_KEY") ``` For S3-compatible services, specify custom endpoints via URL parameters: ```tql from_s3 "s3://my-bucket/data/**.json?endpoint_override=minio.example.com:9000&scheme=http" ``` Additional features include file watching for continuous ingestion, automatic file removal or renaming after processing, and path field injection to track source files in events. By [@raxyte](https://github.com/raxyte) in [#5449](https://github.com/tenzir/tenzir/pull/5449). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix `fork` operator stopping after initial events [Section titled “Fix fork operator stopping after initial events”](#fix-fork-operator-stopping-after-initial-events) We fixed a bug where the `fork` operator would stop processing events after handling only the first few events, causing data loss in downstream pipeline stages. By [@raxyte](https://github.com/raxyte) in [#5450](https://github.com/tenzir/tenzir/pull/5450).

# SentinelOne Data Lake

This release introduces an integration fo SentinelOne Singularity™ Data Lake and a new message based `to_kafka` operator that features a one to one event to message relation. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.14.0). ### Features [Section titled “Features”](#features) #### Send data to Kafka topics with `to_kafka` [Section titled “Send data to Kafka topics with to\_kafka”](#send-data-to-kafka-topics-with-to_kafka) The new `to_kafka` operator allows you to send one Kafka message per event, making it easier to integrate Tenzir with tools that rely on the 1:1 correlation between messages and events. **Examples** Use `to_kafka` to send JSON events to a topic: ```tql subscribe "logs" to_kafka "events", message=this.print_json() ``` Send specific field values with custom keys for partitioning: ```tql subscribe "alerts" to_kafka "metrics", message=alert_msg, key="server-01" ``` By [@raxyte](https://github.com/raxyte) in [#5460](https://github.com/tenzir/tenzir/pull/5460). #### SentinelOne Singularity Data Lake Integration [Section titled “SentinelOne Singularity Data Lake Integration”](#sentinelone-singularity-data-lake-integration) We have added an integration for the SentinelOne Singularity™ Data Lake! The new `to_sentinelone_data_lake` operator allows you to easily send structured and unstructured events to the data lake: ```tql subscribe "sentinelone-data-lake" to_sentinelone_data_lake "https://ingest.eu1.sentinelone.net", token=secret("sentinelone-token") ``` By [@IyeOnline](https://github.com/IyeOnline) in [#5455](https://github.com/tenzir/tenzir/pull/5455). #### `insert_separator` option for `load_zmq` [Section titled “insert\_separator option for load\_zmq”](#insert_separator-option-for-load_zmq) The `load_zmq` operator now supports an optional `insert_separator` parameter to append a custom string to each received ZeroMQ message. This enables better message separation and parsing for downstream operators. By [@raxyte](https://github.com/raxyte) in [#5456](https://github.com/tenzir/tenzir/pull/5456). ### Changes [Section titled “Changes”](#changes) #### Use UUIDv7 for file naming in `to_hive` operator [Section titled “Use UUIDv7 for file naming in to\_hive operator”](#use-uuidv7-for-file-naming-in-to_hive-operator) The `to_hive` operator now uses UUIDv7 instead of consecutive numbers for file naming within partitions. This change provides guaranteed uniqueness across concurrent processes and natural time-based ordering of files, preventing filename conflicts when multiple processes write to the same partition simultaneously. Example output paths changed from: * `/partition/1.json` * `/partition/2.json` To: * `/partition/01234567-89ab-cdef-0123-456789abcdef.json` * `/partition/01234568-cd01-2345-6789-abcdef012345.json` UUIDv7 combines the benefits of timestamp-based ordering with collision resistance, making it ideal for distributed data processing scenarios. By [@jachris](https://github.com/jachris) in [#5464](https://github.com/tenzir/tenzir/pull/5464).

# Lambda Captures

This release enhances TQL’s data transformation capabilities with lambda expressions that can capture surrounding fields in `map` and `where` functions, plus grouped enumeration for separate event counting. We’ve also improved operator composability with enhanced `to_splunk` parameters, added octet counting support for syslog messages, and fixed critical issues in Kafka message handling and HTTP request processing. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.15.0). ### Features [Section titled “Features”](#features) #### Grouped enumeration [Section titled “Grouped enumeration”](#grouped-enumeration) The `enumerate` operator now supports a `group` option to enumerate events separately based on a value. For example, to have a field act as a counter for a value, use the following pipeline: ```tql from {x: 1}, {x: 2}, {x: "1"}, {x: 2} enumerate count, group=x count = count + 1 ``` ```tql { count: 1, x: 1, } { count: 1, x: 2, } { count: 1, x: "1", } { count: 2, x: 2, } ``` By [@raxyte](https://github.com/raxyte) in [#5475](https://github.com/tenzir/tenzir/pull/5475). #### Flag for preventing automatic pipeline starts [Section titled “Flag for preventing automatic pipeline starts”](#flag-for-preventing-automatic-pipeline-starts) When the node starts, pipelines that were previously running are immediately started. The new `--no-autostart` flag can be used to disable this behavior. By [@jachris](https://github.com/jachris) in [#5470](https://github.com/tenzir/tenzir/pull/5470). #### Lambdas in `map` and `where` can capture surrounding fields [Section titled “Lambdas in map and where can capture surrounding fields”](#lambdas-in-map-and-where-can-capture-surrounding-fields) Lambda expressions in the `map` and `where` functions can now capture and access fields from the surrounding context, enabling more powerful data transformations. For example: ```tql from { host: "server1", ports: [80, 443, 8080] } ports = ports.map(p => {host: host, port: p}) ``` ```tql { host: "server1", ports: [ { host: "server1", port: 80, }, { host: "server1", port: 443, }, { host: "server1", port: 8080, }, ], } ``` By [@raxyte](https://github.com/raxyte) in [#5457](https://github.com/tenzir/tenzir/pull/5457). #### Improve `to_splunk` composability [Section titled “Improve to\_splunk composability”](#improve-to_splunk-composability) We have improved the composability of the `to_splunk` operator. The `host` and `source` parameters now accept a `string`-expression instead of only a constant. Further, there is a new `event` parameter that can be used to specify what should be send as the event to the Splunk HTTP Event Collector. The combination of these options improves the composability of the operator, allowing you to set event-specific Splunk parameters, while not also transmitting them as part of the actual event: ```tql from { host: "my-host", a: 42, b: 0 } // move the entire event into `event` this = { event: this } // hoist the splunk specific field back out move host = event.host to_splunk "https://localhost:8088", hec_token=secret("splunk-hec-token"), host=host, event=event ``` By [@IyeOnline](https://github.com/IyeOnline) in [#5478](https://github.com/tenzir/tenzir/pull/5478). #### Octet Counting in `read_syslog` [Section titled “Octet Counting in read\_syslog”](#octet-counting-in-read_syslog) We have added a new option `octet_counting` to the `read_syslog` operator. Enabling this option will determine messages boundaries according to [RFC6587](https://datatracker.ietf.org/doc/html/rfc6587#section-3.4.1) instead of our heuristic. By [@IyeOnline](https://github.com/IyeOnline) in [#5472](https://github.com/tenzir/tenzir/pull/5472). ### Changes [Section titled “Changes”](#changes) #### Dedicated Syslog Schema Names [Section titled “Dedicated Syslog Schema Names”](#dedicated-syslog-schema-names) The `read_syslog` operator now produces dedicated schemas `syslog.rfc5425`, `syslog.rfc3164` and `syslog.unknown` instead of an unspecific `tenzir.syslog`. By [@IyeOnline](https://github.com/IyeOnline) in [#5472](https://github.com/tenzir/tenzir/pull/5472). #### Keep zeek TSV logs as-is in `read_zeek_tsv` [Section titled “Keep zeek TSV logs as-is in read\_zeek\_tsv”](#keep-zeek-tsv-logs-as-is-in-read_zeek_tsv) Parsing Zeek TSV logs no longer attempts to cast the parsed events to a shipped Zeek schema. By [@tobim](https://github.com/tobim) in [#5461](https://github.com/tenzir/tenzir/pull/5461). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Explicit Commits in `load_kafka` [Section titled “Explicit Commits in load\_kafka”](#explicit-commits-in-load_kafka) The `load_kafka` operator now explicitly commits messages it has consumed. By default, it will commit every 1000 messages or every 10 seconds, with the behavior being customizable via two new operator arguments. Previously, the operator would commit every message asynchronously loaded by the backing library automatically, which may have included messages that were never accepted by the pipeline. By [@IyeOnline](https://github.com/IyeOnline) in [#5465](https://github.com/tenzir/tenzir/pull/5465). #### `http` operator stalling [Section titled “http operator stalling”](#http-operator-stalling) The `http` operator now correctly handles its internal waiting state, fixing an intermittent issue where HTTP requests could hang unexpectedly. By [@raxyte](https://github.com/raxyte) in [#5479](https://github.com/tenzir/tenzir/pull/5479). #### Improved Syslog Output Schema [Section titled “Improved Syslog Output Schema”](#improved-syslog-output-schema) We have improved our `read_syslog` operator and `parse_syslog` function. They no longer re-order fields if the syslog format changes mid-stream and produce correctly typed null values for the special `-` value. By [@IyeOnline](https://github.com/IyeOnline) in [#5472](https://github.com/tenzir/tenzir/pull/5472). #### Fixed `to_kafka` crash [Section titled “Fixed to\_kafka crash”](#fixed-to_kafka-crash) The recently released `to_kafka` operator would fail with an internal error when used without specifying the `message` argument. The operator now works as expected, sending the entire event if the argument is not specified. By [@IyeOnline](https://github.com/IyeOnline) in [#5465](https://github.com/tenzir/tenzir/pull/5465).

# Stability Improvements

This release brings forth stability improvements under high load that could cause platform unresponsiveness, fixes API request isolation problems, better kafka diagnostics and more. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.16.0). ### Features [Section titled “Features”](#features) #### Subscribe to multiple topics at once [Section titled “Subscribe to multiple topics at once”](#subscribe-to-multiple-topics-at-once) The `subscribe` operator now accepts multiple topics to subscribe to. For example, `subscribe "notices", "alerts"` subscribes to both the `notices`, and the `alerts` topic. This makes it easier to build pipelines that join multiple topics back together. By [@jachris](https://github.com/jachris) in [#5494](https://github.com/tenzir/tenzir/pull/5494). #### `from_gcs` operator [Section titled “from\_gcs operator”](#from_gcs-operator) The new `from_gcs` operator reads files from Google Cloud Storage with support for glob patterns, authentication via Application Default Credentials, and all standard file processing features like monitoring and path tracking. By [@raxyte](https://github.com/raxyte) in [#5491](https://github.com/tenzir/tenzir/pull/5491). ### Changes [Section titled “Changes”](#changes) #### Better kafka diagnostics [Section titled “Better kafka diagnostics”](#better-kafka-diagnostics) The `kafka` related operators now emit more diagnostics in unexpected situations, providing more information to diagnose problems. By [@raxyte](https://github.com/raxyte) in [#5490](https://github.com/tenzir/tenzir/pull/5490). #### Better defaults for `load_kafka` [Section titled “Better defaults for load\_kafka”](#better-defaults-for-load_kafka) The `load_kafka` operators previously used `offset="end"` as the default, which meant that it always started from the end of the topic. This default was now changed to `"stored"`, such that the previously commited offset is used instead. By [@jachris](https://github.com/jachris) in [#5485](https://github.com/tenzir/tenzir/pull/5485). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Pipeline execution under high loads [Section titled “Pipeline execution under high loads”](#pipeline-execution-under-high-loads) Previously, the execution of certain pipelines under high load scenarios could lead to general unresponsiveness. In extreme cases, this meant that the platform wasn’t able to reach the node. This issue has now been resolved, leading to a more reliable and responsive experience. By [@jachris](https://github.com/jachris) in [#5486](https://github.com/tenzir/tenzir/pull/5486). #### API request isolation [Section titled “API request isolation”](#api-request-isolation) Requests to the `/pipeline` API are now properly isolated and sequentialized. Before, it could happen that certain requests that should not be executed concurrently were interleaved. This could lead to unpredictable results when interacting with pipelines through the platform. By [@jachris](https://github.com/jachris) in [#5486](https://github.com/tenzir/tenzir/pull/5486). #### `session_name` and `external_id` in `aws_iam` options [Section titled “session\_name and external\_id in aws\_iam options”](#session_name-and-external_id-in-aws_iam-options) The `load_kafka`, `save_kafka` and `to_kafka` operators now accept configuring `session_name` and `external_id` for `aws_iam` options. By [@raxyte](https://github.com/raxyte) in [#5481](https://github.com/tenzir/tenzir/pull/5481). #### Behavior of the `throttle` operator [Section titled “Behavior of the throttle operator”](#behavior-of-the-throttle-operator) The `throttle` operator now correctly forwards its data in a timely manner. By [@jachris](https://github.com/jachris) in [#5488](https://github.com/tenzir/tenzir/pull/5488). #### Hang in `every` and `cron` [Section titled “Hang in every and cron”](#hang-in-every-and-cron) We fixed a bug in `every` and `cron` operators that could cause them to hang and panic with assertions failures. By [@raxyte](https://github.com/raxyte) in [#5483](https://github.com/tenzir/tenzir/pull/5483).

# Package UDOs

This release introduces user-defined operators in packages, allowing you to extend Tenzir with custom operators defined in TQL files. It also adds list manipulation functions, a recursive search function, and improved memory management. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.17.0). ### Features [Section titled “Features”](#features) #### Checking if a value exists in another value [Section titled “Checking if a value exists in another value”](#checking-if-a-value-exists-in-another-value) The new `contains()` function recursively searches for a value within data structures and returns `true` if found, `false` otherwise. By [@raxyte](https://github.com/raxyte) in [#5493](https://github.com/tenzir/tenzir/pull/5493). #### Improved list manipulation [Section titled “Improved list manipulation”](#improved-list-manipulation) We have added two new functions that make managing set-like lists easier. The `add` function ensures uniqueness when building lists. Perfect for maintaining deduplicated threat intel feeds or collecting unique user sessions: ```tql from {xs: [1]}, {xs: [2]}, {xs: []} select result = xs.add(2) ``` ```tql {result: [1,2]} {result: [2]} {result: [2]} ``` The `remove` function cleans up your lists by eliminating all occurrences of unwanted elements. Ideal for filtering out known-good domains from suspicious activity logs or removing false positives from alert lists: ```tql from {xs: [1, 2, 1, 3], y: 1}, {xs: [4, 5], y: 1}, select result = xs.remove(y) ``` ```tql {result: [2, 3]} {result: [4, 5]} ``` By [@mavam](https://github.com/mavam), [@IyeOnline](https://github.com/IyeOnline) in [#5471](https://github.com/tenzir/tenzir/pull/5471). #### User-defined operators in packages [Section titled “User-defined operators in packages”](#user-defined-operators-in-packages) This extends the package format with user-defined operators. A packaged operator can be used from a pipeline after the package is installed on a node. Package operators are defined in `.tql` files the `operators` subdirectory of a package. Once installed, the operators can be called by its ID, which is constructed from the filesystem path. Here is an example from a hypothetical MISP package. This is the directory structure with an operator: ```plaintext └── misp └── operators └── event └── to_ocsf.tql ``` And you can use the operator in TQL: ```dart misp::event::to_ocsf ``` By [@tobim](https://github.com/tobim) in [#5496](https://github.com/tenzir/tenzir/pull/5496). ### Changes [Section titled “Changes”](#changes) #### Memory usage when importing many different schemas at once [Section titled “Memory usage when importing many different schemas at once”](#memory-usage-when-importing-many-different-schemas-at-once) Previously, importing a high volume of highly heterogeneous events could lead to memory usage issues because of internal buffering that was only limited on a per-schema basis. With the introduction of a global limit across all schemas, this issue has now been fixed. The configuration option `tenzir.max-buffered-events` can be used to tune the new buffering limits. By [@tobim](https://github.com/tobim), [@jachris](https://github.com/jachris) in [#5508](https://github.com/tenzir/tenzir/pull/5508). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fixed spawning of demo nodes [Section titled “Fixed spawning of demo nodes”](#fixed-spawning-of-demo-nodes) Fixed an issue that would cause demo nodes on <https://app.tenzir.com> to fail when spawning. By [@lava](https://github.com/lava) in [#5504](https://github.com/tenzir/tenzir/pull/5504). #### Handle spaces in filesystem paths [Section titled “Handle spaces in filesystem paths”](#handle-spaces-in-filesystem-paths) File paths containing spaces are now properly handled by operators. By [@raxyte](https://github.com/raxyte) in [#5499](https://github.com/tenzir/tenzir/pull/5499).

# Performance Improvements

This release focuses on improving performance and memory usage. Pipelines are now faster, especially when using if conditions or parsing highly heterogeneous events. Memory usage has also been substantially reduced. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.18.0). ### Changes [Section titled “Changes”](#changes) #### Periodically release unused memory in server mode [Section titled “Periodically release unused memory in server mode”](#periodically-release-unused-memory-in-server-mode) Tenzir Node now calls malloc\_trim every 10 minutes to release unused memory back to the operating system, reducing memory fragmentation in long-running instances. By [@lava](https://github.com/lava) in [#5524](https://github.com/tenzir/tenzir/pull/5524). #### Improved `export` memory management [Section titled “Improved export memory management”](#improved-export-memory-management) The database partitions opened by the `export` operator previously read and forwarded their entire contents to `export` without waiting for the operator to forward them. This circumvented the usual backpressure mechanism and could lead to unexpectedly high memory usage. Now, the backpressure is propagated to the underlying storage layer. By [@jachris](https://github.com/jachris) in [#5520](https://github.com/tenzir/tenzir/pull/5520). #### Improved pipeline execution [Section titled “Improved pipeline execution”](#improved-pipeline-execution) We fine-tuned the scheduling logic responsible for the execution of pipelines. In particular, certain pipelines that invoke parsing functions now take significantly less memory to run. Furthermore, `if` runs much faster in situations with many small batches, preventing pipeline congestion and therefore also lower memory usage. By [@jachris](https://github.com/jachris) in [#5519](https://github.com/tenzir/tenzir/pull/5519), [#5525](https://github.com/tenzir/tenzir/pull/5525). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fixed record sorting [Section titled “Fixed record sorting”](#fixed-record-sorting) Calling `sort` on records may have caused a crash for more involved objects. This no longer happens. By [@mavam](https://github.com/mavam) in [#5526](https://github.com/tenzir/tenzir/pull/5526).

# Watching Directories

Tenzir Node v5.2 brings our most requested feature to life, adding the ability to watch a local filesystem directory or a blob storage bucket for new files within a pipeline. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.2.0). ### Features [Section titled “Features”](#features) #### Add `from_file` operator [Section titled “Add from\_file operator”](#add-from_file-operator) The new `from_file` operator can be used to read multiple files from a potentially remote filesystem using globbing expressions. It also supports watching for new files and deletion after a file has been read. `read_lines` now has an additional `binary=true` option which should be used if the incoming byte stream is not valid UTF-8. By [@jachris](https://github.com/jachris) in [#5203](https://github.com/tenzir/tenzir/pull/5203). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Handle empty files in `read_xsv` & friends [Section titled “Handle empty files in read\_xsv & friends”](#handle-empty-files-in-read_xsv--friends) We fixed a bug that caused `read_xsv` & friends to crash when trying to read an empty file. By [@IyeOnline](https://github.com/IyeOnline) in [#5215](https://github.com/tenzir/tenzir/pull/5215). #### Fix hang for operators with infinite idle timeout [Section titled “Fix hang for operators with infinite idle timeout”](#fix-hang-for-operators-with-infinite-idle-timeout) We fixed a hang in the `cache` and `buffer` operators when their input finished. This also prevented the node from shutting down cleanly. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5219](https://github.com/tenzir/tenzir/pull/5219). #### Fix a crash in `to_clickhouse` and bump `clickhouse-cpp` [Section titled “Fix a crash in to\_clickhouse and bump clickhouse-cpp”](#fix-a-crash-in-to_clickhouse-and-bump-clickhouse-cpp) We fixed a bug in `to_clickhouse` that caused the operator to crash when encountering lists. By [@IyeOnline](https://github.com/IyeOnline) in [#5221](https://github.com/tenzir/tenzir/pull/5221). #### Add `from_file` operator [Section titled “Add from\_file operator”](#add-from_file-operator-1) The `read_lines` operator now validates that the incoming lines are UTF-8. By [@jachris](https://github.com/jachris) in [#5203](https://github.com/tenzir/tenzir/pull/5203).

# Talking HTTP

This release brings forth improvements to HTTP support in Tenzir, supporting requests as transformations and paginating APIs. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.3.0). ### Features [Section titled “Features”](#features) #### Implement `http` operator [Section titled “Implement http operator”](#implement-http-operator) We implemented the `http` operator that allows making HTTP/1.1 requests to a URL. The operator also allows paginate APIs based on the responses. By [@raxyte](https://github.com/raxyte) in [#5188](https://github.com/tenzir/tenzir/pull/5188). #### Introduce lambda functions [Section titled “Introduce lambda functions”](#introduce-lambda-functions) TQL now supports lambda expressions. They are supported in the `where` and `map` functions on list, and on the newly added `count_if` aggregation function. Instead of `[1, 2, 3].map(x, x + 1)`, use `[1, 2, 3].map(x => x + 1)`. This subtle change makes it obvious that the expression is not evaluated on the entire list, but rather on each element individually. The `count_if` aggregation function counts the number of elements in a list that satisfy a given predicate. For example, `[1, 2, 3].count_if(x => x > 1)` returns `2`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5150](https://github.com/tenzir/tenzir/pull/5150). #### Implement `from_http` client [Section titled “Implement from\_http client”](#implement-from_http-client) The `from_http` operator now supports HTTP client functionality. This allows sending HTTP/1.1 requests, including support for custom methods, headers, payloads, pagination, retries, and connection timeouts. The operator can be used to fetch data from HTTP APIs and ingest it directly into pipelines. Make a simple GET request auto-selecting the parser: ```tql from_http "https://api.example.com/data" ``` Post data to some API: ```tql from_http "https://api.example.com/submit", payload={foo: "bar"}.print_json(), headers={"Content-Type": "application/json"} ``` Paginating APIs: ```tql from_http "https://api.example.com/items", paginate=(x => x.next_url if x.has_more? == true) ``` By [@raxyte](https://github.com/raxyte) in [#5177](https://github.com/tenzir/tenzir/pull/5177). ### Changes [Section titled “Changes”](#changes) #### `load_http` deprecated [Section titled “load\_http deprecated”](#load_http-deprecated) The `from` operator now dispatches to `from_http` for `http[s]` URLs. The `load_http` operator is now deprecated in favor of `from_http`. By [@raxyte](https://github.com/raxyte) in [#5177](https://github.com/tenzir/tenzir/pull/5177). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix a segfault in `save_amqp` on connection loss [Section titled “Fix a segfault in save\_amqp on connection loss”](#fix-a-segfault-in-save_amqp-on-connection-loss) We fixed a crash in `save_amqp` when trying to send a message after the connection was lost. By [@IyeOnline](https://github.com/IyeOnline) in [#5226](https://github.com/tenzir/tenzir/pull/5226). #### Fix overflow warning for `-9223372036854775808` [Section titled “Fix overflow warning for -9223372036854775808”](#fix-overflow-warning-for--9223372036854775808) The lowest 64-bit integer, `-9223372036854775808`, no longer causes an overflow warning. By [@jachris](https://github.com/jachris) in [#5223](https://github.com/tenzir/tenzir/pull/5223). #### Fix a crash in `to_clickhouse` [Section titled “Fix a crash in to\_clickhouse”](#fix-a-crash-in-to_clickhouse) We fixed an issue when trying to send lists in `to_clickhouse` that would cause the ClickHouse server to drop the connection. By [@IyeOnline](https://github.com/IyeOnline) in [#5231](https://github.com/tenzir/tenzir/pull/5231). #### Fix evaluation of `null if true else …` [Section titled “Fix evaluation of null if true else …”](#fix-evaluation-of-null-if-true-else) The expression `null if true else 42` previously returned `42`. It now correctly returns `null`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5150](https://github.com/tenzir/tenzir/pull/5150).

# Fixed Python Operator

This release fixes a regression in the Python operator, which was not working correctly in v5.3.0. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.3.1). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix `python` operator [Section titled “Fix python operator”](#fix-python-operator) Tenzir Node v5.3.0 contained a mismatched version of the Python operator, causing the operator to fail to start. This no longer happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5258](https://github.com/tenzir/tenzir/pull/5258).

# Fix Python Operator

Tenzir Node v5.3.1 updated the pyproject version but did not actually commit it, causing the Python operator to fail to start. This release fixes the issue. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.3.2). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix `python` operator [Section titled “Fix python operator”](#fix-python-operator) Tenzir Node v5.3.0 contained a mismatched version of the Python operator, causing the operator to fail to start. This no longer happens. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5258](https://github.com/tenzir/tenzir/pull/5258).

# HTTP fixes

The from\_http and http operators now support response sizes upto 2GiB Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.3.3). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Handle large HTTP responses [Section titled “Handle large HTTP responses”](#handle-large-http-responses) The HTTP client operators `from_http` and `http` now support response sizes upto 2 GiB. By [@raxyte](https://github.com/raxyte) in [#5269](https://github.com/tenzir/tenzir/pull/5269).

# Fix Demo Node Packages

This release fixes a bug that caused package installation outside of the Tenzir Library to fail, which caused Demo Nodes in the Tenzir Platform to not have any packages installed. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.3.4). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix `package::add` [Section titled “Fix package::add”](#fix-packageadd) The `package::add` operator did not correctly handle the switch to `from_http` in the previous release and as a result errored when installing packages manually. This has now been fixed. However, package installation via Tenzir Platform was still functional. This was also the cause of the demo node not having any pipelines or pre-installed packages when launched. By [@raxyte](https://github.com/raxyte) in [#5271](https://github.com/tenzir/tenzir/pull/5271).

# Format Strings

With the introduction of format strings to TQL, this release makes string construction from multiple parts easier than ever before. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.4.0). ### Features [Section titled “Features”](#features) #### Format strings [Section titled “Format strings”](#format-strings) TQL now supports format strings as you might know them from other languages like Python. Format strings allow you to flexibly construct strings in a very succinct way by using a pair of braces within an `f"…"` string. For example, assume that you have events with two integer fields, `found` and `total`. We can construct a message from this as follows: ```tql percent = round(found / total * 100).string() message = "Found " + found.string() + "/" + total.string() + " => " + percent + "%" ``` Using the new format strings, this simply becomes ```tql percent = round(found / total * 100) message = f"Found {found}/{total} => {percent}%" ``` You can also use arbitrary expressions inside `{` to simplify this even further: ```tql message = f"Found {found}/{total} => {round(found / total * 100)}%" ``` If you ever need an actual `{` in your format string, you can use `{{`. The same goes for the closing brace `}`, which needs to be written as `}}` within format strings. By [@jachris](https://github.com/jachris), [@IyeOnline](https://github.com/IyeOnline) in [#5254](https://github.com/tenzir/tenzir/pull/5254). ### Changes [Section titled “Changes”](#changes) #### Remove `meta` keyword [Section titled “Remove meta keyword”](#remove-meta-keyword) The identifier `meta` is no longer a keyword and can thus now be used as a normal field name. By [@jachris](https://github.com/jachris) in [#5275](https://github.com/tenzir/tenzir/pull/5275), [#5276](https://github.com/tenzir/tenzir/pull/5276). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Gracefully handle null values when charting with resolution [Section titled “Gracefully handle null values when charting with resolution”](#gracefully-handle-null-values-when-charting-with-resolution) The `chart_bar` and `chart_pie` operators had a bug when the x-axis had a `null` value and the `resolution` option was specified. The unfortunate panic due to this bug has now been fixed. By [@raxyte](https://github.com/raxyte) in [#5273](https://github.com/tenzir/tenzir/pull/5273). #### Pipeline activity refresh without running pipelines [Section titled “Pipeline activity refresh without running pipelines”](#pipeline-activity-refresh-without-running-pipelines) The `pipeline::activity` operator now always yields new events, even when all running pipelines are hidden. By [@jachris](https://github.com/jachris) in [#5278](https://github.com/tenzir/tenzir/pull/5278). #### Invalid scientific notation when using `write_json` [Section titled “Invalid scientific notation when using write\_json”](#invalid-scientific-notation-when-using-write_json) When using `write_json` with large floating-point numbers, the resulting JSON was ill-formed. For example, the number `5483819555176798000.0` was previously printed as `5.483819555176798e+18.0`. The extra `.0` at the end is not valid JSON. Thus, the output was rejected by some parsers. Now, `write_json` renders this number as `5.483819555176798e+18` instead. This bug was also observable on the Tenzir Platform, where it could lead to request timeouts. Now, large numbers are shown correctly. By [@jachris](https://github.com/jachris) in [#5274](https://github.com/tenzir/tenzir/pull/5274). #### Unreliable `where` diagnostics [Section titled “Unreliable where diagnostics”](#unreliable-where-diagnostics) The `where` operator now correctly produces diagnostics also for simple expressions, which was previously not the case in some situations. By [@jachris](https://github.com/jachris) in [#5277](https://github.com/tenzir/tenzir/pull/5277).

# JSON Printer Fix

This release fixes a bug within the JSON printer that could lead to invalid JSON being produced, and also led to response timeouts when using the Tenzir Platform. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.4.1). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Incorrect values when charting [Section titled “Incorrect values when charting”](#incorrect-values-when-charting) The charting operators did not update aggregations correctly, which resulted in out-of-sync or `null` values. By [@raxyte](https://github.com/raxyte) in [#5281](https://github.com/tenzir/tenzir/pull/5281). #### Fixed invalid JSON for small numbers [Section titled “Fixed invalid JSON for small numbers”](#fixed-invalid-json-for-small-numbers) Operators such as `write_json` previously emitted invalid JSON for small numbers. This also affected the Tenzir Platform as it invalidated some responses, which could lead to no data showing up in the Explorer. By [@jachris](https://github.com/jachris) in [#5282](https://github.com/tenzir/tenzir/pull/5282).

# OCSF Support

Built-in support for normalizing OCSF events to their upstream schema makes normalizations easier than ever with Tenzir Node v5.5. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.5.0). ### Features [Section titled “Features”](#features) #### Entropy Calculation [Section titled “Entropy Calculation”](#entropy-calculation) TQL now supports calculating the Shannon entropy of data using the new `entropy` aggregation function. This function measures the amount of uncertainty or randomness in your data, which is particularly useful for analyzing data distributions and information content. The entropy function calculates Shannon entropy using the formula `H(x) = -sum(p(x[i]) \* log(p(x[i])))`, where `p(x[i])` is the probability of each unique value. Higher entropy values indicate more randomness, while lower values indicate more predictability in your data. For example, if you have a dataset with different categories and want to measure how evenly distributed they are: ```tql from {category: "A"}, {category: "A"}, {category: "B"}, {category: "C"} summarize entropy_value = category.entropy() ``` This will return an entropy value of approximately 1.04, indicating moderate randomness in the distribution. The function also supports normalization via an optional `normalize` parameter. When set to `true`, the entropy is normalized between 0 and 1 by dividing by the logarithm of the number of unique values: ```tql from {category: "A"}, {category: "A"}, {category: "B"}, {category: "C"} summarize normalized_entropy = category.entropy(normalize=true) ``` This returns a normalized entropy value of approximately 0.95, making it easier to compare entropy across datasets with different numbers of unique values. By [@dominiklohmann](https://github.com/dominiklohmann) in [#4852](https://github.com/tenzir/tenzir/pull/4852). #### Rename files after reading them [Section titled “Rename files after reading them”](#rename-files-after-reading-them) The `from_file` operator now supports moving files after reading them. For example, `from_file "logs/*.log", rename=path => f"{path}.done"` reads all `.log` files in the `logs` directory, and after reading them renames the files to have the extension `.log.done`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5285](https://github.com/tenzir/tenzir/pull/5285). #### Dedicated OCSF operator [Section titled “Dedicated OCSF operator”](#dedicated-ocsf-operator) The new operator `ocsf::apply` converts events to the OCSF schema, making sure that all events have the same type. It supports all OCSF versions (including `-dev` versions), all OCSF classes and all OCSF profiles. The schema to use is determined by `class_uid`, `metadata.version` and `metadata.profiles` (if it exists). The operator emits warnings if it finds unexpected fields or mismatched types. Expect more OCSF-native functionality coming to Tenzir soon! By [@jachris](https://github.com/jachris) in [#5220](https://github.com/tenzir/tenzir/pull/5220). #### Writing CEF and LEEF [Section titled “Writing CEF and LEEF”](#writing-cef-and-leef) We have added two new functions `print_leef` and `print_cef`. With these and the already existing `write_syslog`, you are now able to write nested CEF or LEEF in a syslog frame. In combination with the already existing ability to read nested CEF and LEEF, this enables you to transparently forward firewall logs. For example, you can read in CEF messages, enrich them, and send them out again: ```tql // Accept syslog over TCP load_tcp "127.0.0.1:1234" { read_syslog } // Parse the nested message as structured CEF data message = message.parse_cef() // Enrich the message, if its a high severity message if message.severity in ["High", "Very High", "7", "8", "9"] { context::enrich "my-context", key=message.extension.source_ip, into=message.extension } // Re-write the message as CEF message = message.extension.print_cef( cef_version=message.cef_version, device_vendor=message.device_vendor, device_product=message.device_product, device_version=message.device_version, signature_id=signature_id, severity=message.severity, name=r#"enriched via "my-context": "# + message.name ) // Write as syslog again write_syslog // Send the bytestream to some destination ``` By [@IyeOnline](https://github.com/IyeOnline) in [#5280](https://github.com/tenzir/tenzir/pull/5280). ### Changes [Section titled “Changes”](#changes) #### Updated OCSF functions [Section titled “Updated OCSF functions”](#updated-ocsf-functions) The functions available under `ocsf::` were updated to fully reflect the newest OCSF schema. Additionally, the functions `ocsf::type_uid` and `ocsf::type_name` were added. By [@jachris](https://github.com/jachris) in [#5220](https://github.com/tenzir/tenzir/pull/5220). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fixed panic in `parent_dir` [Section titled “Fixed panic in parent\_dir”](#fixed-panic-in-parent_dir) The `parent_dir` function no longer panics on some inputs. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5285](https://github.com/tenzir/tenzir/pull/5285). #### SNI support in `from_http` [Section titled “SNI support in from\_http”](#sni-support-in-from_http) The `from_http` operator now correctly sets the domain for TLS SNI (Server Name Indication). By [@tobim](https://github.com/tobim) in [#5288](https://github.com/tenzir/tenzir/pull/5288). #### CPU limits in containers [Section titled “CPU limits in containers”](#cpu-limits-in-containers) Nodes now correctly respect cgroup CPU limits on Linux. Previously, such limits were ignored, and the node always used the physical number of cores available, unless a lower number was explicitly configured through the `caf.scheduler.max-threads` option. This bug fix may improve performance and resource utilization for nodes running in environments with such limitations. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5288](https://github.com/tenzir/tenzir/pull/5288). #### Fixed stack traces in Docker images [Section titled “Fixed stack traces in Docker images”](#fixed-stack-traces-in-docker-images) Backtraces no longer miss function identifiers when running the official Docker images. By [@tobim](https://github.com/tobim) in [#5283](https://github.com/tenzir/tenzir/pull/5283).

# Dynamic Publish

The operator now supports event-dependent topics, making routing between pipelines more flexible. Additionally, new and operators make taking apart custom logs easier than before. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.6.0). ### Features [Section titled “Features”](#features) #### `read_delimited` and `read_delimited_regex` [Section titled “read\_delimited and read\_delimited\_regex”](#read_delimited-and-read_delimited_regex) TQL now supports two new operators for parsing data streams with custom delimiters: `read_delimited` and `read_delimited_regex`. These operators provide a more intuitive and discoverable way to split data on custom separators compared to the deprecated `split_at_regex` option in `read_lines`. The `read_delimited` operator splits input on exact string or blob matches: ```tql load_file "data.txt" read_delimited "||" ``` The `read_delimited_regex` operator splits input using regular expression patterns: ```tql load_tcp "0.0.0.0:514" { read_delimited_regex "(?=<[0-9]+>)" } ``` Both operators support binary data processing and optionally including the separator in the output. The `split_at_regex` option in `read_lines` is now deprecated in favor of these dedicated operators. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5291](https://github.com/tenzir/tenzir/pull/5291). #### Publishing to dynamic topics [Section titled “Publishing to dynamic topics”](#publishing-to-dynamic-topics) The `publish` operator now allows for dynamic topics to be derived from each individual event. For example, assuming Suricata logs, `publish f"suricata.{event_type}"` now publishes to the topic `suricata.alert` for alert events and `suricata.flow` for flow events. This works with any expression that evaluates to a string, including `publish @name` to use the schema name of the event. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5294](https://github.com/tenzir/tenzir/pull/5294). #### HTTP request metadata [Section titled “HTTP request metadata”](#http-request-metadata) The `from_http` operator now supports the `metadata_field` option when using the server mode and not just client mode. The request metadata has the following schema: | Field | Type | Description | | :--------- | :------- | :----------------------------------- | | `headers` | `record` | The request headers. | | `query` | `record` | The query parameters of the request. | | `path` | `string` | The path requested. | | `fragment` | `string` | The URI fragment of the request. | | `method` | `string` | The HTTP method of the request. | | `version` | `string` | The HTTP version of the request. | By [@raxyte](https://github.com/raxyte) in [#5295](https://github.com/tenzir/tenzir/pull/5295). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### OCSF `-dev` versions [Section titled “OCSF -dev versions”](#ocsf--dev-versions) The `ocsf::apply` operator can now be used with the newest development version of OCSF (v1.6.0-dev). Previously, it claimed that this version does not exist. By [@jachris](https://github.com/jachris) in [#5296](https://github.com/tenzir/tenzir/pull/5296). #### Fixed panic in `write_parquet` [Section titled “Fixed panic in write\_parquet”](#fixed-panic-in-write_parquet) The `write_parquet` operator no longer panics when specifying `compression_type="snappy"` without a `compression_level`. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5293](https://github.com/tenzir/tenzir/pull/5293).

# Fixed Distinct Counts

This release restores an aggregation function that was accidentally made unavailable in Tenzir Node v5.6.0. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.6.1). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix `count_distinct` being missing [Section titled “Fix count\_distinct being missing”](#fix-count_distinct-being-missing) We fixed a bug that caused `count_distinct` to be unavailable in Tenzir Node v5.6.0. By [@dominiklohmann](https://github.com/dominiklohmann) in [#5298](https://github.com/tenzir/tenzir/pull/5298).

# Secret Secrets

Tenzir Node v5.7.0 introduces a new secret type that keeps its sensitive content hidden while enabling flexible secret retrieval. This release also adds support for OCSF extensions and brings several improvements to the operator. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.7.0). ### Features [Section titled “Features”](#features) #### `save_tcp` now reconnects on network outages [Section titled “save\_tcp now reconnects on network outages”](#save_tcp-now-reconnects-on-network-outages) The `save_tcp` (`from "tcp://..."`) operator now tries to reconnect in case of recoverable errors such as network outages and in case the remote end disconnects. You can use the new options `retry_delay: duration` and `max_retry_count: int` to tune the behavior to your needs. The default values are set to 30 seconds and 10 times respectively. By [@tobim](https://github.com/tobim) in [#5230](https://github.com/tenzir/tenzir/pull/5230). #### Add an option to add extra headers to the platform request [Section titled “Add an option to add extra headers to the platform request”](#add-an-option-to-add-extra-headers-to-the-platform-request) The new option `tenzir.platform-extra-headers` causes the Tenzir Node to add the given extra HTTP headers when establishing the connection to the Tenzir Platform, for example to pass additional authentication headers when traversing proxies. You can set this variable either via configuration file: ```yaml tenzir: platform-extra-headers: Authentication: Bearer XXXX Proxy-Authentication: Bearer YYYY ``` or as environment variable: (note the double underscore before the name of the header) ```sh TENZIR_PLATFORM_EXTRA_HEADERS__AUTHENTICATION="Bearer XXXX" TENZIR_PLATFORM_EXTRA_HEADERS__PROXY_AUTHENTICATION="Bearer YYYY" ``` When using the environment variable version, the Tenzir Node always converts the name of the header to lowercase and converts underscores to dashes, so a header specified as `TENZIR_PLATFORM_EXTRA_HEADERS__EXTRA_HEADER=extra` will be sent as `extra-header: extra` in the HTTP request. By [@lava](https://github.com/lava) in [#5287](https://github.com/tenzir/tenzir/pull/5287). #### Support for OCSF extensions [Section titled “Support for OCSF extensions”](#support-for-ocsf-extensions) The `ocsf::apply` operator now supports OCSF extensions. This means that `metadata.extensions` is now also taken into account for casting and validation. At the moment, only the extensions versioned together with OCSF are supported. This includes the `win` and `linux` extensions. By [@jachris](https://github.com/jachris) in [#5306](https://github.com/tenzir/tenzir/pull/5306). #### Enhanced file renaming in `from_file` operator [Section titled “Enhanced file renaming in from\_file operator”](#enhanced-file-renaming-in-from_file-operator) The `from_file` operator now provides enhanced file renaming capabilities when using the `rename` parameter. These improvements make file operations more robust and user-friendly. **Directory creation**: The operator now automatically creates intermediate directories when renaming files to paths that don’t exist yet. For example, if you rename a file to `/new/deep/directory/structure/file.txt`, all necessary parent directories (`/new`, `/new/deep`, `/new/deep/directory`, `/new/deep/directory/structure`) will be created automatically. ```tql from_file "/data/*.json", rename=path => f"/processed/by-date/2024/01/{path.file_name()}" ``` **Trailing slash handling**: When the rename target ends with a trailing slash, the operator now automatically appends the original filename. This makes it easy to move files to different directories while preserving their names. ```tql // This will rename "/input/data.json" to "/output/data.json" from_file "/input/*.json", rename=path => "/output/" ``` Previously, you would have needed to manually extract and append the filename: ```tql // Old approach - no longer necessary from_file "/input/*.json", rename=path => f"/output/{path.file_name()}" ``` By [@dominiklohmann](https://github.com/dominiklohmann) in [#5303](https://github.com/tenzir/tenzir/pull/5303). #### Preserving variants when using `ocsf::apply` [Section titled “Preserving variants when using ocsf::apply”](#preserving-variants-when-using-ocsfapply) The `ocsf::apply` operator now has an additional `preserve_variants` option, which makes it so that free-form objects are preserved as-is, instead of being JSON-encoded. Most notably, this applies to the `unmapped` field. For example, if `unmapped` is `{x: 42}`, then `ocsf::apply` would normally JSON-encode it so that it ends up with the value `"{\"x\": 42}"`. If `ocsf::apply preserve_variants=true` is used instead, then `unmapped` simply stays a record. Note that this means that the event schema changes whenever the type of `unmapped` changes. By [@jachris](https://github.com/jachris) in [#5312](https://github.com/tenzir/tenzir/pull/5312). #### Secrets [Section titled “Secrets”](#secrets) Tenzir now features a new first class type: `secret`. As the name suggests, this type contains a secret value that cannot be accessed by a user: ```tql from { s: secret("my-secret") } ``` ```tql { s: "***", // Does not render the secret value } ``` A secret is created by the `secret` function, which changes its behavior with this release. Operators now accept secrets where appropriate, most notably for username and password arguments, but also for URLs: ```tql let $url = "https://" + secret("splunk-host") + ":8088" to_splunk $url, hec_token=secret("splunk-hec-token") ``` However, a `string` is implicitly convertible to a `secret` in an operator argument, meaning that you do not have to configure a secret if you are fine with just a string literal: ```tql to_splunk "https://localhost:8088", hec_token="my-plaintext-token" ``` Along with this feature in the Tenzir Node, we introduced secret stores to the Tenzir Platform. You can now centrally manage secrets in the platform, which will usable by all nodes within the workspace. Read more about this in the release notes for the Tenzir Platform and our Explanations page on secrets. By [@IyeOnline](https://github.com/IyeOnline) in [#5065](https://github.com/tenzir/tenzir/pull/5065), [#5197](https://github.com/tenzir/tenzir/pull/5197). ### Changes [Section titled “Changes”](#changes) #### The `secret` function returns secrets [Section titled “The secret function returns secrets”](#the-secret-function-returns-secrets) The `secret` function now returns a `secret`, the strong type introduced in this release. Previously it returned a plaintext `string`. This change protects secrets from being leaked, as only operators can resolve secrets now. If you want to retain the old behavior , you can enable the configuration option `tenzir.legacy-secret-model`. In this mode, the `secret` function can only resolve secrets from the Tenzir Node’s configuration file and not access any external secret store. By [@IyeOnline](https://github.com/IyeOnline) in [#5065](https://github.com/tenzir/tenzir/pull/5065), [#5197](https://github.com/tenzir/tenzir/pull/5197). #### Kafka operators now automatically configure SASL mechanism for AWS IAM [Section titled “Kafka operators now automatically configure SASL mechanism for AWS IAM”](#kafka-operators-now-automatically-configure-sasl-mechanism-for-aws-iam) The `load_kafka` and `save_kafka` operators now automatically set `sasl.mechanism` option to the expected `OAUTHBEARER` when using the `aws_iam` option. If the mechanism has already been set to a different value, an error is emitted. By [@raxyte](https://github.com/raxyte) in [#5307](https://github.com/tenzir/tenzir/pull/5307). #### TQL2 support in compaction plugin [Section titled “TQL2 support in compaction plugin”](#tql2-support-in-compaction-plugin) The pipelines defined as part of the compaction configuration can now use TQL2. For backwards-compatibility, TQL1 pipelines still work, but they are deprecated and emit a warning on start-up. By [@jachris](https://github.com/jachris) in [#5302](https://github.com/tenzir/tenzir/pull/5302). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fixed shutdown hang during storage optimization [Section titled “Fixed shutdown hang during storage optimization”](#fixed-shutdown-hang-during-storage-optimization) Nodes periodically merge and optimize their storage over time. We fixed a hang on shutdown for nodes while this process was ongoing. By [@IyeOnline](https://github.com/IyeOnline) in [#5301](https://github.com/tenzir/tenzir/pull/5301). #### `from_file` with a per-file sink [Section titled “from\_file with a per-file sink”](#from_file-with-a-per-file-sink) The `from_file` operator no longer fails when its per-file pipeline argument is a sink. Before this fix, the following pipeline which opens a new TCP connection per file would not work: ```tql from_file "./*.csv" { read_csv write_ndjson save_tcp "localhost:8080" } ``` By [@dominiklohmann](https://github.com/dominiklohmann) in [#5303](https://github.com/tenzir/tenzir/pull/5303).

# Smarter HTTP Ingestion

This release introduces format and compression inference from URLs for HTTP data sources, streamlining data loading workflows. It also includes bug fixes for secret resolution and HTTP server mode. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.8.0). ### Features [Section titled “Features”](#features) #### HTTP format and compression inference [Section titled “HTTP format and compression inference”](#http-format-and-compression-inference) The `from_http` and `http` operators now automatically infer the file format (such as JSON, CSV, Parquet, etc.) and compression type (such as gzip, zstd, etc.) directly from the URL’s file extension, just like the generic `from` operator. This makes it easier to load data from HTTP sources without manually specifying the format or decompression step. If the format or compression cannot be determined from the URL, the operators will fall back to using the HTTP `Content-Type` and `Content-Encoding` response headers to determine how to parse and decompress the data. **Examples** **Inference Succeeds** ```tql from_http "https://example.org/data/events.csv.zst" ``` The operator infers both the `zstd` compression and the `CSV` format from the file extension, decompresses, and parses accordingly. **Inference Fails, Fallback to Headers** ```tql from_http "https://example.org/download" ``` If the URL does not contain a recognizable file extension, the operator will use the HTTP `Content-Type` and `Content-Encoding` headers from the response to determine the format and compression. **Manual Specification Required** ```tql from_http "https://example.org/archive" { decompress_gzip read_json } ``` If neither the URL nor the HTTP headers provide enough information, you can explicitly specify the decompression and parsing steps using a pipeline argument. By [@raxyte](https://github.com/raxyte) in [#5300](https://github.com/tenzir/tenzir/pull/5300). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix crash in `from secret` [Section titled “Fix crash in from secret”](#fix-crash-in-from-secret) We fixed a crash in `from secret("key")`. This is now gracefully rejected, as generic `from` cannot resolve secrets. By [@IyeOnline](https://github.com/IyeOnline) in [#5321](https://github.com/tenzir/tenzir/pull/5321). #### `from_http server=true` assertion failures [Section titled “from\_http server=true assertion failures”](#from_http-servertrue-assertion-failures) `from_http server=true` failed with internal assertions and stopped the pipeline on receiving requests when `metadata_field` was specified. By [@raxyte](https://github.com/raxyte) in [#5325](https://github.com/tenzir/tenzir/pull/5325).

# UUID Functions

This release brings a family of UUID functions to TQL, making it easier to generate random numbers for a variety of use cases. Download the release on [GitHub](https://github.com/tenzir/tenzir/releases/tag/v5.9.0). ### Features [Section titled “Features”](#features) #### Add `uuid()` function for generating UUIDs [Section titled “Add uuid() function for generating UUIDs”](#add-uuid-function-for-generating-uuids) Need a unique identifier? Look no further! The new `uuid()` function brings the power of Universally Unique Identifiers to Tenzir, supporting multiple UUID versions for different use cases. **Generate tracking IDs for security events:** ```tql from { event_id: uuid(), timestamp: now(), action: "login_attempt" } ``` ```tql { event_id: "62c9b810-1ecc-4511-9707-977b72c2a9dc", timestamp: 2025-07-04T13:47:15.473012Z, action: "login_attempt", } ``` **Create time-ordered database keys with v7:** ```tql // v7 UUIDs are perfect for database primary keys - they're time-sortable! from { id: uuid(version="v7"), created_at: now(), user: "alice" } ``` ```tql { id: "0197d5b1-1dc1-7070-804f-d6d749f15f56", created_at: 2025-07-04T13:47:23.969114Z, user: "alice", } ``` **Build distributed system identifiers with v1:** ```tql // v1 includes MAC address for true uniqueness across nodes from { node_id: uuid(version="v1"), cluster: "production" } ``` ```tql { node_id: "6eac5cce-58dd-11f0-a47d-33e666d9ff94", cluster: "production", } ``` **Generate secure random tokens with v4 (default):** ```tql // Perfect for session tokens or API keys from { session_token: uuid(), // defaults to v4 expires_at: now() + 1h } ``` ```tql { session_token: "f43e6460-23e2-45a3-87af-f8b7d10c4e35", expires_at: 2025-07-04T14:47:44.632335Z, } ``` **Use v6 for better database performance:** ```tql // v6 reorders v1 fields for improved database index locality from { record_id: uuid(version="v6"), data: "important stuff" } ``` ```tql { record_id: "1f058dd7-aa81-6496-a3ef-bd8da76352a4", data: "important stuff", } ``` **Even generate the special nil UUID:** ```tql // Sometimes you need all zeros from { placeholder: uuid(version="nil") } ``` ```tql { placeholder: "00000000-0000-0000-0000-000000000000", } ``` The function supports UUID versions 1, 4 (default), 6, 7, and nil—covering everything from time-based identifiers to cryptographically secure random IDs. Whether you’re tracking security events, building distributed systems, or just need a unique identifier, `uuid()` has you covered! By [@mavam](https://github.com/mavam) in [#5097](https://github.com/tenzir/tenzir/pull/5097).

# Tenzir Platform Changelog

This page lists the changelog for Tenzir Platform. ## Versions [Section titled “Versions”](#versions) * [Next (Unreleased)](/changelog/platform/next) * [Version 1.19.1](/changelog/platform/v1-19-1) * [Version 1.19.0](/changelog/platform/v1-19-0) * [Version 1.18.0](/changelog/platform/v1-18-0) * [Version 1.17.4](/changelog/platform/v1-17-4) * [Version 1.17.3](/changelog/platform/v1-17-3) * [Version 1.17.2](/changelog/platform/v1-17-2) * [Version 1.17.1](/changelog/platform/v1-17-1) * [Version 1.17.0](/changelog/platform/v1-17-0) * [Version 1.16.1](/changelog/platform/v1-16-1) * [Version 1.16.0](/changelog/platform/v1-16-0) * [Version 1.15.0](/changelog/platform/v1-15-0) * [Version 1.14.1](/changelog/platform/v1-14-1) * [Version 1.14.0](/changelog/platform/v1-14-0) * [Version 1.13.0](/changelog/platform/v1-13-0) * [Version 1.12.0](/changelog/platform/v1-12-0) * [Version 1.11.1](/changelog/platform/v1-11-1) * [Version 1.10.4](/changelog/platform/v1-10-4) * [Version 1.10.3](/changelog/platform/v1-10-3) * [Version 1.10.2](/changelog/platform/v1-10-2) * [Version 1.10.1](/changelog/platform/v1-10-1) * [Version 1.10.0](/changelog/platform/v1-10-0) * [Version 1.9.7](/changelog/platform/v1-9-7) * [Version 1.9.6](/changelog/platform/v1-9-6) * [Version 1.9.5](/changelog/platform/v1-9-5) * [Version 1.9.4](/changelog/platform/v1-9-4) * [Version 1.9.3](/changelog/platform/v1-9-3) * [Version 1.9.2](/changelog/platform/v1-9-2) * [Version 1.9.1](/changelog/platform/v1-9-1) * [Version 1.9.0](/changelog/platform/v1-9-0) * [Version 1.8.5](/changelog/platform/v1-8-5) * [Version 1.8.4](/changelog/platform/v1-8-4) * [Version 1.8.3](/changelog/platform/v1-8-3) * [Version 1.8.2](/changelog/platform/v1-8-2) * [Version 1.8.1](/changelog/platform/v1-8-1) * [Version 1.8.0](/changelog/platform/v1-8-0) * [Version 1.7.2](/changelog/platform/v1-7-2) * [Version 1.7.1](/changelog/platform/v1-7-1) * [Version 1.7.0](/changelog/platform/v1-7-0) * [Version 1.6.1](/changelog/platform/v1-6-1) * [Version 1.6.0](/changelog/platform/v1-6-0) * [Version 1.5.0](/changelog/platform/v1-5-0) * [Version 1.4.1](/changelog/platform/v1-4-1) * [Version 1.4.0](/changelog/platform/v1-4-0) * [Version 1.3.0](/changelog/platform/v1-3-0) * [Version 1.2.1](/changelog/platform/v1-2-1) * [Version 1.2.0](/changelog/platform/v1-2-0) * [Version 1.1.2](/changelog/platform/v1-1-2) * [Version 1.1.1](/changelog/platform/v1-1-1) * [Version 1.1.0](/changelog/platform/v1-1-0) * [Version 1.0.8](/changelog/platform/v1-0-8) * [Version 1.0.7](/changelog/platform/v1-0-7) * [Version 1.0.6](/changelog/platform/v1-0-6) * [Version 1.0.5](/changelog/platform/v1-0-5) * [Version 1.0.4](/changelog/platform/v1-0-4) * [Version 1.0.3](/changelog/platform/v1-0-3) * [Version 1.0.2](/changelog/platform/v1-0-2) * [Version 1.0.1](/changelog/platform/v1-0-1) * [Version 1.0.0](/changelog/platform/v1-0-0) * [Version 0.20.2](/changelog/platform/v0-20-2) * [Version 0.20.1](/changelog/platform/v0-20-1) * [Version 0.20.0](/changelog/platform/v0-20-0) * [Version 0.19.1](/changelog/platform/v0-19-1) * [Version 0.19.0](/changelog/platform/v0-19-0) * [Version 0.18.2](/changelog/platform/v0-18-2) * [Version 0.18.1](/changelog/platform/v0-18-1) * [Version 0.18.0](/changelog/platform/v0-18-0) * [Version 0.17.2](/changelog/platform/v0-17-2) * [Version 0.17.1](/changelog/platform/v0-17-1) * [Version 0.17.0](/changelog/platform/v0-17-0) * [Version 0.16.0](/changelog/platform/v0-16-0)

# Next

Unreleased changes. ### Features [Section titled “Features”](#features) #### Added keyboard shortcut indicators [Section titled “Added keyboard shortcut indicators”](#added-keyboard-shortcut-indicators) We added visual indicators for keyboard shortcuts to all buttons in modals and other places that support them, making it easier to discover and use shortcuts. By [@gitryder](https://github.com/gitryder). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Big numbers in objects and lists [Section titled “Big numbers in objects and lists”](#big-numbers-in-objects-and-lists) Big numbers (those exceeding `9007199254740991`) in records and lists no longer cause the data table to fail rendering. By [@jachris](https://github.com/jachris).

# Tenzir Platform v0.16

This release introduces the initial public version of the on-premise Tenzir Platform for Sovereign Edition customers. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v0.16.0).

# Tenzir Platform v0.17

This release introduces the ability to change pipelines on [app.tenzir.com](https://app.tenzir.com/) more quickly. Users can click on any pipeline on the overview page to open a detailed view, directly edit the definition or options, and use the new action menu to quickly start, pause, stop, duplicate, or delete pipelines. This release brings the following improvements for Sovereign Edition users: The `tenzir-platform` CLI supports changing user and workspace icons, printing node and workspace lists in JSON format, and logging in with the client credentials flow for non-interactive authentication. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v0.17.0).

# Tenzir Platform v0.17.1

This patch release fixes a bug where very long-running instances of the tenant-manager issue expired user keys, making it impossible for users to log in successfully. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v0.17.1).

# Tenzir Platform v0.17.2

This release fixes a bug in the `tenzir-platform auth` subcommand. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v0.17.2).

# Tenzir Platform v0.18

This release introduces diagnostics on the overview page on [app.tenzir.com](https://app.tenzir.com/), making it easier to spot mistakes in pipelines. The overview page becomes more responsive when viewing a node with many running pipelines. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v0.18.0).

# Tenzir Platform v0.18.1

* This release fixes a memory leak in the overview page * This release updates the docker compose examples by automatically pinning them to the corresponding platform version Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v0.18.1).

# Tenzir Platform v0.18.2

This bugfix release: * Improves the fix for the memory leak on the overview page * Fixes an argument parsing bug in the `tenzir-platform admin delete-auth-rule` CLI command Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v0.18.2).

# Tenzir Platform v0.19

* This release moves pipeline filters into the pipeline table’s header, preparing for further upcoming changes to the table * This release adds a detailed activity view to the detailed pipeline view that opens when clicking on a pipeline * Clicking on the diagnostics column in the pipelines table now opens the detailed pipeline view with the diagnostics tab active * This release fixes scrolling in the detailed pipeline view Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v0.19.0).

# Tenzir Platform v0.19.1

* This release fixes the CI not triggering for the Tenzir Platform v0.19 release, which caused the release artifacts not to be created. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v0.19.1).

# Tenzir Platform v0.20

This release brings the following improvements and changes: * The new `tenzir-platform admin spawn-node` CLI command allows running nodes with arbitrary Docker images * The CLI no longer requests the ‘email’ scope by default when using the non-interactive login, fixing a compatibility issue with the keycloak identity provider * This release reduces the CPU usage of activity spark bars in the pipelines list, making them update more smoothly * Spark bars no longer stop updating for stopped pipelines * This release fixes a bug that causes increased network usage from fetching diagnostics and metrics in the app * This release fixes scrolling in the detailed pipeline view for pipelines with long definitions Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v0.20.0).

# Tenzir Platform v0.20.1

This release brings the following improvements and changes: * This release fixes a bug that causes spark bars for recently completed or stopped pipelines to show incorrect data * This release fixes a bug that causes the event inspector in the explorer not to be scrollable Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v0.20.1).

# Tenzir Platform v0.20.2

This bugfix release contains various small fixes and reliability improvements for the Tenzir Platform: * This release fixes request ID forwarding and malformed JSON responses * This release fixes the `admin update-workspace` subcommand for CLI * This release improves the Websocket Gateway Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v0.20.2).

# Tenzir Platform v1.0

Tenzir Platform becomes generally available. Since going live with app.tenzir.com last year, this release makes quite a few changes. This release announces an all-new open source library for packages, early availability of TQL2 (the next-generation language for pipelines), and a complete redesign of app.tenzir.com, which now has a sleek, modern look. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.0.0).

# Tenzir Platform v1.0.1

This patch release contains the following bug fixes and improvements over [Tenzir Platform v1.0.0](https://github.com/tenzir/platform/releases/tag/v1.0.0): * This release displays errors when fetching packages in a less obtrusive way. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.0.1).

# Tenzir Platform v1.0.2

This patch release contains the following bug fixes and improvements over [Tenzir Platform v1.0.1](https://github.com/tenzir/platform/releases/tag/v1.0.1): * This release fixes a potential hang when opening the history when it contains some pipelines whose definition must be URL-encoded. * Sorting schemas now has a deterministic order when both a schema and a category with the same name exist, e.g., for a schema `foo` and `foo.bar`. * This release fixes a bug that potentially leads to corruption of dashboard configurations after loading the dashboard fails. * This release fixes a hang when adding a chart to a dashboard without assigning a name explicitly. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.0.2).

# Tenzir Platform v1.0.3

This patch release contains the following bug fixes and improvements over [Tenzir Platform v1.0.2](https://github.com/tenzir/platform/releases/tag/v1.0.2): * This release fixes the download button to work correctly for pipelines written in TQL2. * This release fixes charts on the dashboard to work correctly for pipelines written in TQL2. * This release improves the run button in the explorer to check more reliably whether a pipeline is deployable. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.0.3).

# Tenzir Platform v1.0.4

This patch release contains the following changes, bug fixes and improvements over [Tenzir Platform v1.0.3](https://github.com/tenzir/platform/releases/tag/v1.0.3): * This release fixes and improves alignment and styling throughout the application. * The run button in the explorer now indicates whether it is activated. * Open dropdown menus now prevent accidental interaction with other elements on the page when clicking on them. * Pipeline names can no longer be edited inline in the pipelines table, and instead must be edited through the sidebar. * The *installed* tab becomes the default tab in the library. * The nodes dropdown on the pipelines page with a collapsed nodes sidebar now includes all functionality from the sidebar. * Activity metrics no longer show `undefined B/s` for the unit when the ingress or egress averages between 0 and 1 byte per second. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.0.4).

# Tenzir Platform v1.0.5

This patch release contains the following changes, bug fixes and improvements over [Tenzir Platform v1.0.4](https://github.com/tenzir/platform/releases/tag/v1.0.4): * This release open-sources the **Tenzir Platform CLI**, which can be used to show and manage nodes and workspaces. Try it yourself with `uvx tenzir-platform --help`. * This release implements support for package updates in the Library tab. * This release completely redesigns and reimplements the toast components. * Additionally, this release contains many fixes and reliability improvements, in particular for diagnostics and in the pipeline inspector. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.0.5).

# Tenzir Platform v1.0.6

This patch release contains the following changes, bug fixes and improvements over [Tenzir Platform v1.0.5](https://github.com/tenzir/platform/releases/tag/v1.0.5): * This release fixes the JSON formatting in the Tenzir Platform CLI output. * This release significantly reduces latency and network traffic when interacting with nodes in the app by making requests go through the platform control endpoint directly. * The library becomes searchable and allows additional pipeline configuration when installing packages. * Package descriptions now support Markdown, e.g., to insert links or code blocks. * This release fixes some minor UI bugs and adds a few quality-of-life improvements to the new redesigned app. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.0.6).

# Tenzir Platform v1.0.7

This patch release contains the following changes, bug fixes and improvements over [Tenzir Platform v1.0.6](https://github.com/tenzir/platform/releases/tag/v1.0.6): * This release fixes a regression that causes the pipelines page not to display any pipelines for nodes with older versions than Tenzir Node v4.20. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.0.7).

# Tenzir Platform v1.0.8

This patch release contains the following changes, bug fixes and improvements over [Tenzir Platform v1.0.7](https://github.com/tenzir/platform/releases/tag/v1.0.7): * This release fixes the positioning of the “Load More” button in the Explorer results table. * This release improves the pipeline table UI with clearer filtering indicators and a “New” badge for newly created pipelines. * This release resolves an issue where toasts occasionally render under drawers. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.0.8).

# Tenzir Platform v1.1

This release brings key enhancements, including improved diagnostics, authentication updates, and various bug fixes for a smoother user experience. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.1.0).

# Tenzir Platform v1.1.1

This patch release contains the following changes, bug fixes and improvements over [Tenzir Platform v1.1](https://github.com/tenzir/platform/releases/tag/v1.1.0): * The new **Add pipeline** button on the pipeline page brings users back to the Explorer. * Scrolling in the schemas dropdown in the Explorer now works as expected again. * This release applies a few cosmetic touchups throughout the user interface. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.1.1).

# Tenzir Platform v1.1.2

This patch release contains the following changes, bug fixes and improvements over [Tenzir Platform v1.1.1](https://github.com/tenzir/platform/releases/tag/v1.1.1): * This release fixes a bug in the handling of OIDC discovery URLs, which leads to custom OIDC providers being accessed with an incorrect authorization URL. * This release updates the `localdev` example setup to work correctly in the case where the built-in `dex` auth provider is accessed through plain HTTP. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.1.2).

# Layout Restructure & Workspaces

This release restructures the page layout for better usability and adds the ability to statically define workspaces in on-prem environments. This release also contains a large number of additional bug fixes and improvements: **Infrastructure** * This release improves the `localdev` example setup for the Tenzir Platform. It now contains a Tenzir Node that is automatically connected to the local platform instance and a CLI container with admin permissions. Additionally, users of the `localdev` setup are now granted admin permissions by default. * This release fixes a bug in the alerts API that causes configured alerts to be only activated after the next restart of the websocket gateway. * The new `TENZIR_PLATFORM_METRICS_STORE_S3_BUCKET_NAME` variable can be set to a valid S3 bucket name. If set, the platform stores all pipeline metrics it receives from connected Tenzir Nodes into this bucket. **UI** * The URL format was changed and now contains the workspace id, making it easier to share Tenzir Platform URLs with other users. NOTE: There is no automatic redirect, so old pipeline share url will not work anymore. * This release fixes the y-axis ticks for stacked area and bar charts. * This release fixes rendering of blobs in the `Data.Blob` component. * This release adds BITZ and TQL as downloadable formats for events. * This release fixes an issue where pie chart colors are sometimes incorrect in the dashboard. **CLI** * This release replaces the `--dry-run` option for the `tenzir-platform admin add-auth-rule` commands with the new `tenzir-platform tools print-auth-rule` commands. * The Tenzir Platform CLI now automatically authenticates using the client credentials flow when a client secret is provided as environment variable. * The Tenzir Platform CLI now supports device code flow authentication for IdP’s without a complete verification URL (like Microsoft Entra) Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.10.0).

# Static Workspaces & Health

This patch release fixes a number of issues found since the release of [Tenzir Platform v1.10](https://github.com/tenzir/platform/releases/tag/v1.10.0): * The platform now generates valid Tenzir tokens for non-ephemeral nodes in statically defined workspaces. * This release adds a new `/health` endpoint to the user API that can be used to check for network connectivity. * This release fixes TQL syntax highlighting. * This release fixes the display of very old demo nodes in the “Connect Node” view. * This release adjusts the background color of the library page. * This release stabilizes the order of items in the contexts table. * This release applies several fixes to the nodes page. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.10.1).

# Chart & Node Fixes

This patch release contains a number of additional bugfixes since [Tenzir Platform v1.10.1](https://github.com/tenzir/platform/releases/tag/v1.10.1): * This release fixes a bug that causes nodes to be shown as offline in the websocket gateway while still being connected. * Tooltips in line and grouped area charts are now sorted by value. * This release fixes a bug where charts with logarithmic scales do not show any ticks when the domain includes 0. * This release fixes a bug where maximum and minimum values are not being passed to explorer charts. * This release fixes repeated values appearing in logarithmic scales on charts. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.10.2).

# Platform Changelog

As of this release, there is a detailed changelog for the Tenzir Platform on the revamped docs.tenzir.com. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.10.3). ### Features [Section titled “Features”](#features) #### New documentation site [Section titled “New documentation site”](#new-documentation-site) The embedded documentation on app.tenzir.com now points to the revamped documentation page. This page features: * A clean, new look with a clearer page structure. * More guides and an easier-to-navigate TQL reference. * A detailed changelog for Tenzir Platform (in addition to the existing changelog for Tenzir Node). By [@dominiklohmann](https://github.com/dominiklohmann).

# Ephemeral Node Icon

This release adds a custom icon for ephemeral nodes, making them easier to distinguish from regular ones. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.10.4). ### Features [Section titled “Features”](#features) #### Custom ephemeral node icon [Section titled “Custom ephemeral node icon”](#custom-ephemeral-node-icon) Ephemeral nodes now show a custom icon, indicating that they disappear when disconnecting. By [@gitryder](https://github.com/gitryder).

# Pipeline Widgets

The all-new pipeline widgets make it easy to see at a glance which the total ingress and egress of all pipelines, and to easily figure out which pipelines had warnings and errors. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.11.0). ### Features [Section titled “Features”](#features) #### Support HTTP Proxies in the Sovereign Edition [Section titled “Support HTTP Proxies in the Sovereign Edition”](#support-http-proxies-in-the-sovereign-edition) The `ghcr.io/tenzir/app` container image for the Sovereign Edition now respects the `HTTP_PROXY` and `HTTPS_PROXY` environment variables. By [@tobim](https://github.com/tobim). #### Page load progress bar [Section titled “Page load progress bar”](#page-load-progress-bar) Switching between pages in the app now shows a loading bar at the top of the page. By [@dit7ya](https://github.com/dit7ya). #### Pipeline page widgets [Section titled “Pipeline page widgets”](#pipeline-page-widgets) **Introduction** The pipeline page now features four widgets placed above the table of pipelines. These widgets provide information about pipelines shown below, as well as allow you to further filter down the list of pipelines. **The Status Widget** The first widget, placed in the top left of the screen, shows the total number of pipelines found after search and filtering. It also shows a breakdown of how many pipelines exist for each of 4 statuses: * `Running`, * `Completed`, * `Failed` or * `Stopped`. Clicking on one of these status buttons will filter to pipelines with that particular status. Holding the `Shift` key while clicking will add the selected status to your current filter instead of replacing it. The status widget replaces the pipeline state filtering feature found in the pipelines table header, which has now been removed. **The Daily Ingress/Egress Widget** Just below the Status Widget is a widget that shows the total ingress and egress traffic for all pipelines after search and filtering, and the percentage difference between the two. **The Ingress/Egress Chart Widget** To the right of the other two widgets, the Ingress/Egress Chart shows a graph of all combined ingress and egress for the pipelines after searching and filtering. It supports a few different periods which can be selected from a drop-down. **The Diagnostics Widget** On the rightmost side of the widgets row you’ll find a heatmap visualizing how many pipelines experienced warnings or errors, with four-hour cells. Searching or otherwise filtering the list of pipelines will update this widget to reflect the new set of pipelines. Clicking on a cell will filter the list of pipelines to contain only those pipelines that encountered warnings or errors during the corresponding time period. Clicking again will remove the filter. The time range selected for the diagnostics is also used for the diagnostics column in the pipeline list below. By [@gitryder](https://github.com/gitryder), [@avaq](https://github.com/avaq), [@dit7ya](https://github.com/dit7ya). ### Changes [Section titled “Changes”](#changes) #### Removal of pipeline pausing [Section titled “Removal of pipeline pausing”](#removal-of-pipeline-pausing) Pipeline pausing is a rarely used feature, and its support will soon be removed from nodes, so we’ve updated the UI, and no longer show the pause buttons in the pipeline detail page, and the multi-select pipeline actions. If a pipeline is already paused, it can still be found in the pipeline list, and is categorized by the status widget as a “stopped” pipeline. By [@dit7ya](https://github.com/dit7ya), [@gitryder](https://github.com/gitryder). #### Removal of pipeline labels [Section titled “Removal of pipeline labels”](#removal-of-pipeline-labels) Labels are a feature that has long been scheduled for removal, and the rework of the pipelines page that comes with this release was a good opportunity to do so. By [@avaq](https://github.com/avaq), [@dit7ya](https://github.com/dit7ya). #### Node ID and tab in the URL [Section titled “Node ID and tab in the URL”](#node-id-and-tab-in-the-url) The selected node, and the tab you’re viewing, are now part of the page URL, which has the following consequences: 1. You should now stay where you were when reloading the page 2. Copying links, bookmarking, etc. is now possible. 3. Some links into the app might have broken, but most will redirect to the right place. 4. Previously created pipeline share URLs will not work anymore. By [@avaq](https://github.com/avaq). #### Lower wait times when data loading fails [Section titled “Lower wait times when data loading fails”](#lower-wait-times-when-data-loading-fails) When there’s an error that prevents the app from being able to load data, the app would previously keep trying for 30 seconds while showing a loading spinner. This has been reduced to 5 seconds so that in case of a problem, the UI will display the error sooner. By [@avaq](https://github.com/avaq). #### Improved page titles [Section titled “Improved page titles”](#improved-page-titles) The page you’re on in the app is now shown in the tab title, making it easier to find the right tab when working with multiple tabs, and making it easier to find things in the browser history. By [@avaq](https://github.com/avaq), [@gitryder](https://github.com/gitryder). #### Optimized pipeline listing [Section titled “Optimized pipeline listing”](#optimized-pipeline-listing) On the pipelines page, the list of pipelines is now more realtime while using less network traffic. By [@avaq](https://github.com/avaq). #### Move pipeline actions into table header [Section titled “Move pipeline actions into table header”](#move-pipeline-actions-into-table-header) We have moved the pipeline actions (start/ stop/ delete) into a floating action bar to the bottom. The table layout has also slightly changed - to select pipelines (for actions), click on the toggle button in the header. By [@gitryder](https://github.com/gitryder). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fixed version identifier in Sovereign Edition [Section titled “Fixed version identifier in Sovereign Edition”](#fixed-version-identifier-in-sovereign-edition) The Sovereign Edition of the Tenzir Platform now correctly prints its current Git commit hash in the browser console upon loading. By [@lava](https://github.com/lava) in [#87](https://github.com/tenzir/platform/pull/87). #### Fix glitch when saving a pipeline [Section titled “Fix glitch when saving a pipeline”](#fix-glitch-when-saving-a-pipeline) Fixed an issue where when updating a pipeline via the pipeline detail pane, the “Restart on error” checkbox would briefly reset to its previous state before switching to the correct one. By [@avaq](https://github.com/avaq). #### Fix navigation sometimes being non-responsive [Section titled “Fix navigation sometimes being non-responsive”](#fix-navigation-sometimes-being-non-responsive) We resolved an issue where ocasionally and seemingly at random, when clicking any button in the app that would lead to another page, nothing would happen, and you’d have to click again. By [@avaq](https://github.com/avaq).

# Pipeline Widgets

The all-new pipeline widgets make it easy to see at a glance which the total ingress and egress of all pipelines, and to easily figure out which pipelines had warnings and errors. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.11.1). ### Features [Section titled “Features”](#features) #### Support HTTP Proxies in the Sovereign Edition [Section titled “Support HTTP Proxies in the Sovereign Edition”](#support-http-proxies-in-the-sovereign-edition) The `ghcr.io/tenzir/app` container image for the Sovereign Edition now respects the `HTTP_PROXY` and `HTTPS_PROXY` environment variables. By [@tobim](https://github.com/tobim). #### Page load progress bar [Section titled “Page load progress bar”](#page-load-progress-bar) Switching between pages in the app now shows a loading bar at the top of the page. By [@dit7ya](https://github.com/dit7ya). #### Pipeline page widgets [Section titled “Pipeline page widgets”](#pipeline-page-widgets) **Introduction** The pipeline page now features four widgets placed above the table of pipelines. These widgets provide information about pipelines shown below, as well as allow you to further filter down the list of pipelines. **The Status Widget** The first widget, placed in the top left of the screen, shows the total number of pipelines found after search and filtering. It also shows a breakdown of how many pipelines exist for each of 4 statuses: * `Running`, * `Completed`, * `Failed` or * `Stopped`. Clicking on one of these status buttons will filter to pipelines with that particular status. Holding the `Shift` key while clicking will add the selected status to your current filter instead of replacing it. The status widget replaces the pipeline state filtering feature found in the pipelines table header, which has now been removed. **The Daily Ingress/Egress Widget** Just below the Status Widget is a widget that shows the total ingress and egress traffic for all pipelines after search and filtering, and the percentage difference between the two. **The Ingress/Egress Chart Widget** To the right of the other two widgets, the Ingress/Egress Chart shows a graph of all combined ingress and egress for the pipelines after searching and filtering. It supports a few different periods which can be selected from a drop-down. **The Diagnostics Widget** On the rightmost side of the widgets row you’ll find a heatmap visualizing how many pipelines experienced warnings or errors, with four-hour cells. Searching or otherwise filtering the list of pipelines will update this widget to reflect the new set of pipelines. Clicking on a cell will filter the list of pipelines to contain only those pipelines that encountered warnings or errors during the corresponding time period. Clicking again will remove the filter. The time range selected for the diagnostics is also used for the diagnostics column in the pipeline list below. By [@gitryder](https://github.com/gitryder), [@avaq](https://github.com/avaq), [@dit7ya](https://github.com/dit7ya). ### Changes [Section titled “Changes”](#changes) #### Removal of pipeline pausing [Section titled “Removal of pipeline pausing”](#removal-of-pipeline-pausing) Pipeline pausing is a rarely used feature, and its support will soon be removed from nodes, so we’ve updated the UI, and no longer show the pause buttons in the pipeline detail page, and the multi-select pipeline actions. If a pipeline is already paused, it can still be found in the pipeline list, and is categorized by the status widget as a “stopped” pipeline. By [@dit7ya](https://github.com/dit7ya), [@gitryder](https://github.com/gitryder). #### Removal of pipeline labels [Section titled “Removal of pipeline labels”](#removal-of-pipeline-labels) Labels are a feature that has long been scheduled for removal, and the rework of the pipelines page that comes with this release was a good opportunity to do so. By [@avaq](https://github.com/avaq), [@dit7ya](https://github.com/dit7ya). #### Node ID and tab in the URL [Section titled “Node ID and tab in the URL”](#node-id-and-tab-in-the-url) The selected node, and the tab you’re viewing, are now part of the page URL, which has the following consequences: 1. You should now stay where you were when reloading the page 2. Copying links, bookmarking, etc. is now possible. 3. Some links into the app might have broken, but most will redirect to the right place. 4. Previously created pipeline share URLs will not work anymore. By [@avaq](https://github.com/avaq). #### Lower wait times when data loading fails [Section titled “Lower wait times when data loading fails”](#lower-wait-times-when-data-loading-fails) When there’s an error that prevents the app from being able to load data, the app would previously keep trying for 30 seconds while showing a loading spinner. This has been reduced to 5 seconds so that in case of a problem, the UI will display the error sooner. By [@avaq](https://github.com/avaq). #### Improved page titles [Section titled “Improved page titles”](#improved-page-titles) The page you’re on in the app is now shown in the tab title, making it easier to find the right tab when working with multiple tabs, and making it easier to find things in the browser history. By [@avaq](https://github.com/avaq), [@gitryder](https://github.com/gitryder). #### Optimized pipeline listing [Section titled “Optimized pipeline listing”](#optimized-pipeline-listing) On the pipelines page, the list of pipelines is now more realtime while using less network traffic. By [@avaq](https://github.com/avaq). #### Move pipeline actions into table header [Section titled “Move pipeline actions into table header”](#move-pipeline-actions-into-table-header) We have moved the pipeline actions (start/ stop/ delete) into a floating action bar to the bottom. The table layout has also slightly changed - to select pipelines (for actions), click on the toggle button in the header. By [@gitryder](https://github.com/gitryder). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fixed version identifier in Sovereign Edition [Section titled “Fixed version identifier in Sovereign Edition”](#fixed-version-identifier-in-sovereign-edition) The Sovereign Edition of the Tenzir Platform now correctly prints its current Git commit hash in the browser console upon loading. By [@lava](https://github.com/lava) in [#87](https://github.com/tenzir/platform/pull/87). #### Fix glitch when saving a pipeline [Section titled “Fix glitch when saving a pipeline”](#fix-glitch-when-saving-a-pipeline) Fixed an issue where when updating a pipeline via the pipeline detail pane, the “Restart on error” checkbox would briefly reset to its previous state before switching to the correct one. By [@avaq](https://github.com/avaq). #### Fix navigation sometimes being non-responsive [Section titled “Fix navigation sometimes being non-responsive”](#fix-navigation-sometimes-being-non-responsive) We resolved an issue where ocasionally and seemingly at random, when clicking any button in the app that would lead to another page, nothing would happen, and you’d have to click again. By [@avaq](https://github.com/avaq).

# Action Bar

Tenzir Platform v1.12 introduces an action bar at the bottom of the Explorer, providing easier access to view settings. Additionally, the widget row on the nodes page has been enhanced with numerous improvements and bug fixes. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.12.0). ### Features [Section titled “Features”](#features) #### Support GCloud OAuth Clients [Section titled “Support GCloud OAuth Clients”](#support-gcloud-oauth-clients) The platform now supports tokens created by Google Cloud IAP. By [@lava](https://github.com/lava). ### Changes [Section titled “Changes”](#changes) #### Improved pipeline list activity metrics loading state [Section titled “Improved pipeline list activity metrics loading state”](#improved-pipeline-list-activity-metrics-loading-state) * The loading state for the sparkbars in the pipeline table no longer shows forever if none of the pipelines are running. * The loading spinner for the sparkbars in the pipeline table has been replaced by a pulsating skeleton of the sparkbars, which is a little easier on the eyes. By [@avaq](https://github.com/avaq). #### Result controls moved to a floating bar [Section titled “Result controls moved to a floating bar”](#result-controls-moved-to-a-floating-bar) The result controls in the Explorer are now shown in a floating bar anchored at the bottom center of the page, instead of above the results table, for easier access and a cleaner layout. By [@gitryder](https://github.com/gitryder). #### Schemas pane on the right [Section titled “Schemas pane on the right”](#schemas-pane-on-the-right) The schemas pane in the Explorer is now docked at the right edge consistently, removing confusion between the icons for expanding schemas pane and the nodes pane, and putting more attention on the results table. By [@dominiklohmann](https://github.com/dominiklohmann). #### Add realtime updates to pipeline list diagnostics [Section titled “Add realtime updates to pipeline list diagnostics”](#add-realtime-updates-to-pipeline-list-diagnostics) The diagnostics widget and numbers of diagnostics in the pipeline list now update in real time. By [@avaq](https://github.com/avaq). #### Improvements to the Ingress/Egress data visualization [Section titled “Improvements to the Ingress/Egress data visualization”](#improvements-to-the-ingressegress-data-visualization) * The daily throughput widget now shows the number of bytes for the window that exactly matches the 24h range from the last seen data point, including smooth interpolation. * The ingress/egress data shown now gets more realtime updates. * The ingress/egress graph’s X domain was made more stable, meaning there’s no sudden jumps in the graph’s X axis when new data is shown. By [@avaq](https://github.com/avaq). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix editor strip overlapping last lines [Section titled “Fix editor strip overlapping last lines”](#fix-editor-strip-overlapping-last-lines) The editor’s control strip, which includes the Run button, no longer overlaps the last few lines of your code. You can now see and work with your entire script without anything getting in the way. By [@gitryder](https://github.com/gitryder). #### Preserved dashboard cell order when adding new cells [Section titled “Preserved dashboard cell order when adding new cells”](#preserved-dashboard-cell-order-when-adding-new-cells) Fixed an issue where existing dashboard cells were sometimes being reordered when a new cell was added. By [@dit7ya](https://github.com/dit7ya).

# Schema Search & GCP Support

This release contains improved integration for running the Tenzir Platform inside GCP, a new Schema Search functionality, and an option for showing the total diagnostic count in heatmap cells. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.13.0). ### Features [Section titled “Features”](#features) #### Option to allow passing extra headers to the API endpoint [Section titled “Option to allow passing extra headers to the API endpoint”](#option-to-allow-passing-extra-headers-to-the-api-endpoint) The Tenzir Platform CLI now respects the `TENZIR_PLATFORM_CLI_EXTRA_HEADERS` environment variable to add extra headers to any request made against the platform API. The value of this variable must be set to a map of strings, eg.: ```plaintext TENZIR_PLATFORM_CLI_EXTRA_HEADERS='{"Proxy-Authentication": "Bearer XXXXXXXXXXXXXXXXX"}' ``` By [@lava](https://github.com/lava) in [#107](https://github.com/tenzir/platform/pull/107). #### Explorer schema search and filter [Section titled “Explorer schema search and filter”](#explorer-schema-search-and-filter) The schemas pane/ dropdown in the explorer page now has a search functionality. By [@dit7ya](https://github.com/dit7ya). #### Add support for Google OAuth clients to Platform CLI [Section titled “Add support for Google OAuth clients to Platform CLI”](#add-support-for-google-oauth-clients-to-platform-cli) The Tenzir Platform CLI now supports logging into internal Google OAuth clients created in GCP using the device code flow. By [@lava](https://github.com/lava) in [#107](https://github.com/tenzir/platform/pull/107). #### Add option for showing total diagnostics count in heatmap cells [Section titled “Add option for showing total diagnostics count in heatmap cells”](#add-option-for-showing-total-diagnostics-count-in-heatmap-cells) Users can now switch between counting unique pipelines with diagnostics (default) or total diagnostic message counts in heatmap cells. The new “Count by” option is available in the time range dropdown of the diagnostics heatmap in the pipelines tab of the nodes page. By [@dit7ya](https://github.com/dit7ya). #### Better error handling in the Tenzir Platform CLI [Section titled “Better error handling in the Tenzir Platform CLI”](#better-error-handling-in-the-tenzir-platform-cli) When encountering authentication errors, the Tenzir Platform CLI now exits with a nice error message instead of printing a raw stacktrace: ```sh $ TENZIR_PLATFORM_CLI_ID_TOKEN=xxxx tenzir-platform workspace list Error: Invalid JWT while validating TENZIR_PLATFORM_CLI_ID_TOKEN (hint) upstream error: Not enough segments ``` By [@lava](https://github.com/lava) in [#107](https://github.com/tenzir/platform/pull/107). ### Changes [Section titled “Changes”](#changes) #### Update Tenzir Platform examples [Section titled “Update Tenzir Platform examples”](#update-tenzir-platform-examples) We updated all examples in the Tenzir Platform repository to use the latest best practices and to better integrate with the new docs page at <https://docs.tenzir.com> We also removed the outdated `tenzir-developers` example, and added a new `native-tls` example instead showing a complete setup with a private certificate authority. Note that in order to get more consistent terminology in our examples, we updated the following variable names. If you are planning to use an old `.env` file with the new platform version, you will need to update these names as well. The internal environment variables used by the individual docker services have not been changed, so if you use your own `docker-compose.yaml` file updating the platform version is safe without renaming these variables in your `.env` file. ```plaintext TENZIR_PLATFORM_DOMAIN -> TENZIR_PLATFORM_UI_ENDPOINT TENZIR_PLATFORM_CONTROL_ENDPOINT -> TENZIR_PLATFORM_NODES_ENDPOINT TENZIR_PLATFORM_BLOBS_ENDPOINT -> TENZIR_PLATFORM_DOWNLOADS_ENDPOINT TENZIR_PLATFORM_OIDC_ADMIN_RULES -> TENZIR_PLATFORM_ADMIN_RULES ``` By [@lava](https://github.com/lava) in [#106](https://github.com/tenzir/platform/pull/106). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix total activity change getting capped at 99.9 [Section titled “Fix total activity change getting capped at 99.9”](#fix-total-activity-change-getting-capped-at-999) The percentage change in the ingress/egress widget was wrongly capped at 99.9 even when the actual value was much higher. By [@dit7ya](https://github.com/dit7ya). #### Fix pages reloading or resetting out of nowhere [Section titled “Fix pages reloading or resetting out of nowhere”](#fix-pages-reloading-or-resetting-out-of-nowhere) We addressed a bug that caused many components in the app to reset or reload whenever the user session was automatically extended in the background (primarily affecting sovereign edition users with short session lifespans). By [@avaq](https://github.com/avaq).

# Platform Secrets

This release adds CLI support for adding, removing and updating secrets. It also adds a new three-dot menu on the pipelines page, as well as partial pipeline execution from the history. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.14.0). ### Features [Section titled “Features”](#features) #### Three-dot menu for pipeline items [Section titled “Three-dot menu for pipeline items”](#three-dot-menu-for-pipeline-items) You can now quickly start, stop, copy the ID, or delete a pipeline right from the pipelines table. Just click the three-dot menu at the far right of any pipeline row. It’s a simple way to manage one pipeline at a time, without needing to open the bulk actions menu. By [@gitryder](https://github.com/gitryder). #### Add secrets support for the Platform [Section titled “Add secrets support for the Platform”](#add-secrets-support-for-the-platform) With this release, the Tenzir Platform now supports storing secrets on a per-workspace level. In the Tenzir UI, you can click on the new gears icon in the workspace switcher to get to the Workspace settings, where you can add, modify or delete secrets for you workspace. In the Tenzir CLI, you can use the new `tenzir-platform secret` subcommand for the same purpose: ```plain tenzir-platform secret add <name> [--file=<file>] [--value=<value>] [--env] tenzir-platform secret update <secret> [--file=<file>] [--value=<value>] [--env] tenzir-platform secret delete <secret> tenzir-platform secret list [--json] ``` By [@lava](https://github.com/lava) in [#73](https://github.com/tenzir/platform/pull/73). #### Support using different blob storage URLs for UI and Nodes [Section titled “Support using different blob storage URLs for UI and Nodes”](#support-using-different-blob-storage-urls-for-ui-and-nodes) The Tenzir Platform now supports the `BLOB_STORAGE__NODES_PUBLIC_ENDPOINT_URL` environment variable that allows overriding the URL used by the nodes to reach the configured S3-compatible blob storage. This is useful if the Tenzir Nodes run in a separate network from the Tenzir UI, and the blob storage is exposed under different domains in both networks. By [@lava](https://github.com/lava). #### Partial pipeline execution [Section titled “Partial pipeline execution”](#partial-pipeline-execution) You can now run a selected portion of the pipeline by highlighting it with your mouse or keyboard. When a selection is active, the **Run** button changes to **Run selected**, allowing you to execute just the highlighted section for quicker iteration and testing. By [@gitryder](https://github.com/gitryder). #### Secret data type display [Section titled “Secret data type display”](#secret-data-type-display) Secret data types now display as `<secret>` in the platform, for example, in the explorer table. A tooltip explains that secret values are not transported to the platform for security reasons. In TQL exports (such as copy to clipboard), secrets are copied as `null`. By [@dit7ya](https://github.com/dit7ya). ### Changes [Section titled “Changes”](#changes) #### Make the list of nodes reload more often again [Section titled “Make the list of nodes reload more often again”](#make-the-list-of-nodes-reload-more-often-again) We recently raised the refresh time on the list of nodes to 30 seconds. After your feedback, it became apparent that we should have kept it as it was. By [@avaq](https://github.com/avaq). #### Better error messages for HTTP errors [Section titled “Better error messages for HTTP errors”](#better-error-messages-for-http-errors) The Tenzir Platform CLI now prints better error messages for HTTP errors encountered when communicating with the Tenzir Platform, including the contents of the `detail` field if provided. By [@lava](https://github.com/lava) in [#73](https://github.com/tenzir/platform/pull/73). #### Chronological diagnostics sorting in the explorer [Section titled “Chronological diagnostics sorting in the explorer”](#chronological-diagnostics-sorting-in-the-explorer) Diagnostics listed next to the editor are now sorted chronologically, making it easier to follow the order in which issues occur. By [@gitryder](https://github.com/gitryder). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix false ‘deployed pipeline failed’ toasts [Section titled “Fix false ‘deployed pipeline failed’ toasts”](#fix-false-deployed-pipeline-failed-toasts) We no longer show ‘deployed pipeline failed’ toasts for pipelines that weren’t actually deployed, but were running via the Explorer, Dashboard, or other sources like that. #### Fix ‘View’-button in failed pipeline Toast [Section titled “Fix ‘View’-button in failed pipeline Toast”](#fix-view-button-in-failed-pipeline-toast) When a deployed pipeline fails, a “Toast” popup is shown in the bottom right that allows you to view the error, except, that button didn’t work. Now it does! And while we were at it, we also improved the text for these toasts a little to make it clearer that it’s specifically about a *deployed* pipeline. By [@avaq](https://github.com/avaq). #### Correctly set workspace category when creating new workspaces [Section titled “Correctly set workspace category when creating new workspaces”](#correctly-set-workspace-category-when-creating-new-workspaces) The Tenzir Platform CLI now correctly sets the workspace category when creating a new workspace. By [@lava](https://github.com/lava) in [#73](https://github.com/tenzir/platform/pull/73).

# Fix Pipelines Table

We resolved an issue where some rows in the pipelines table were being cut off. The table now scrolls properly when there are many entries. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.14.1). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix table scroll to show all pipelines [Section titled “Fix table scroll to show all pipelines”](#fix-table-scroll-to-show-all-pipelines) We fixed a bug that prevented the table from scrolling when pipelines overflowed, so you can now access all rows without any being cut off. By [@gitryder](https://github.com/gitryder).

# External JWT Support

This release adds support for reading externally-supplied JWT tokens from a header, instead of manually clicking on the *Log In* button. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.15.0). ### Features [Section titled “Features”](#features) #### Add support for login via externally-supplied JWTs [Section titled “Add support for login via externally-supplied JWTs”](#add-support-for-login-via-externally-supplied-jwts) You can now configure the Tenzir Platform to accept externally-supplied JWTs, instead of presenting a *Login* button and performing the OIDC flow itself. This is done by setting the `PRIVATE_JWT_FROM_HEADER` environment variable of the Tenzir UI service to the name of a header containing the external JWT. This is useful for situations where access to the Tenzir Platform is already protected by an external authentication proxy that provides identity information to the application. In this case, the provided information can now be used directly instead of going through a second round of logins. For example, to use this feature in combination with Google Cloud IAP, you would set `PRIVATE_JWT_FROM_HEADER=X-Goog-IAP-JWT-Assertion` and set the trusted issuer in the platform to `{"issuer":"https://cloud.google.com/iap","audiences":["<your_iap_audience>"]}`, where the audience string depends on your IAP configuration but would typically look like `"/projects/<project_number>/global/backendServices/<oauth_client_id>"`. By [@lava](https://github.com/lava). #### Add support for passing multiple issuer URLs [Section titled “Add support for passing multiple issuer URLs”](#add-support-for-passing-multiple-issuer-urls) The Tenzir Platform can now accept JWTs from multiple independent issuers. This is useful in situations where the CLI and UI users are served by two different OIDC providers. To configure multiple OIDC providers, set the `TENZIR_PLATFORM_OIDC_TRUSTED_AUDIENCES` environment variable in your `.env` file to a list of issuer configurations: ```dotenv TENZIR_PLATFORM_OIDC_TRUSTED_AUDIENCES='[{"issuer": "https://accounts.google.com", "audiences": ["audience1"]}, {"issuer": "https://cloud.google.com/iap", "audiences": ["audience2", "audience3"]}]' ``` Note that the previous way of setting a single JSON object with `issuer` and `audiences` keys for this variable is still supported, so no change is required if you only want to use a single issuer. By [@lava](https://github.com/lava). #### Persistent widget time range [Section titled “Persistent widget time range”](#persistent-widget-time-range) The selected time range for the widgets now persists across page reloads and navigation, so you don’t have to reselect it each time. By [@gitryder](https://github.com/gitryder), [@avaq](https://github.com/avaq). ### Changes [Section titled “Changes”](#changes) #### Dashboard error handling improvements [Section titled “Dashboard error handling improvements”](#dashboard-error-handling-improvements) Improve error handling related to loading dashboard data, adding cells to the dashboard, and saving/deleting dashboards. By [@avaq](https://github.com/avaq). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix nodes not changing/disappearing after editing/deleting them [Section titled “Fix nodes not changing/disappearing after editing/deleting them”](#fix-nodes-not-changingdisappearing-after-editingdeleting-them) Fix an issue where the node wouldn’t disappear from the list of nodes after the node was deleted, or would update itself after being renamed, from the dropdown menu (while the side bar was collapsed). By [@avaq](https://github.com/avaq).

# Diagnostic Discovery

This release adds two mechanism for a better diagnostics experience. Diagnostics are now shown directly in the editor. Additionally, the diagnostics heatmap in the pipeline overview can now be interacted with. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.16.0). ### Features [Section titled “Features”](#features) #### A new way to view pipeline diagnostics [Section titled “A new way to view pipeline diagnostics”](#a-new-way-to-view-pipeline-diagnostics) You can now view the exact diagnostics that occurred during a window of time by clicking on the corresponding cell in the heatmap. This opens up a new panel below the heatmap where diagnostics are shown grouped by pipeline. From here, it’s also possible to search for diagnostics by text. By [@dit7ya](https://github.com/dit7ya), [@avaq](https://github.com/avaq), [@gitryder](https://github.com/gitryder). #### Diagnostics in the editor [Section titled “Diagnostics in the editor”](#diagnostics-in-the-editor) Diagnostics are now shown directly in the editor, with the associated code snippet being highlighted. Users can hover over the code to see detailed error and warning information in a floating popup. Additionally, the diagnostics pane opener button has been moved to the editor’s results strip for improved accessibility. By [@dit7ya](https://github.com/dit7ya). ### Changes [Section titled “Changes”](#changes) #### Removed TQL2 switch from editor [Section titled “Removed TQL2 switch from editor”](#removed-tql2-switch-from-editor) With the minimum required node version now at 5.0.0, the editor no longer shows the TQL2 switch. You can now run TQL2 pipelines natively without needing to toggle anything. By [@gitryder](https://github.com/gitryder).

# Fix Scrolling Issues

This release fixes two issues in the Tenzir UI that were found since the last release. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.16.1). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix unscrollable pipelines table [Section titled “Fix unscrollable pipelines table”](#fix-unscrollable-pipelines-table) We fixed a bug that prevented the pipelines table from scrolling to the bottom, which caused some pipelines to be hidden and inaccessible. By [@gitryder](https://github.com/gitryder). #### Fixed stray line in widget axis [Section titled “Fixed stray line in widget axis”](#fixed-stray-line-in-widget-axis) We fixed a visual bug where a thin white line appeared above the “Egress” label in the first widget on the Nodes page due to an empty axis label. By [@gitryder](https://github.com/gitryder).

# Working Package Examples

This release fixes the display of example pipelines in packages. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.17.0). ### Changes [Section titled “Changes”](#changes) #### Print better error message for audience mismatch [Section titled “Print better error message for audience mismatch”](#print-better-error-message-for-audience-mismatch) The error message emitted by the platform on an audience mismatch in a supplied JWT now mentions the expected and provided audiences. (unless the provided audience contains non-url-safe characters) By [@lava](https://github.com/lava). #### Custom OIDC sign-in request params [Section titled “Custom OIDC sign-in request params”](#custom-oidc-sign-in-request-params) You can now use the environment variable `EXTRA_OIDC_REQUEST_PARAMS` to set custom query parameters with the sign-in requests that get sent to the OIDC provider. This is useful for configuring the endpoint’s behavior through provider specific options. By [@tobim](https://github.com/tobim). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fixed 0 showing as empty in package inputs [Section titled “Fixed 0 showing as empty in package inputs”](#fixed-0-showing-as-empty-in-package-inputs) We fixed an issue where the default value 0 in package inputs was incorrectly shown as an empty field. By [@gitryder](https://github.com/gitryder). #### Fixed the examples not loading in the Explorer [Section titled “Fixed the examples not loading in the Explorer”](#fixed-the-examples-not-loading-in-the-explorer) We fixed an issue that prevented examples from loading in the examples pane of the Explorer tab. They now appear as expected. By [@gitryder](https://github.com/gitryder).

# Visible zero durations

The app now renders durations of length `0` correctly in the detailed event view. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.17.1). ### Changes [Section titled “Changes”](#changes) #### Allow renaming of nodes before connection [Section titled “Allow renaming of nodes before connection”](#allow-renaming-of-nodes-before-connection) Previously, a node had to be connected before renaming was possible. You can now rename provisioned nodes even before they’re connected. By [@gitryder](https://github.com/gitryder). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fixed 0s durations showing as empty [Section titled “Fixed 0s durations showing as empty”](#fixed-0s-durations-showing-as-empty) We fixed a formatting issue where exact 0s durations appeared as empty strings in the Inspector. These now display correctly. By [@gitryder](https://github.com/gitryder). #### Fixed selection in read-only pipeline code blocks [Section titled “Fixed selection in read-only pipeline code blocks”](#fixed-selection-in-read-only-pipeline-code-blocks) We fixed an issue where code in code blocks couldn’t be selected in package or configured pipelines. You can now easily copy specific parts of a pipeline. By [@gitryder](https://github.com/gitryder).

# Improved History Pane Controls

You can now select parts of a pipeline from the history pane without closing it and the bottom bar in charts does not overlap with the contant any more. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.17.2). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fixed history item clicks blocking text selection [Section titled “Fixed history item clicks blocking text selection”](#fixed-history-item-clicks-blocking-text-selection) Clicking a history item no longer adds its pipeline to the editor. That action now appears as a button in the floating controls on each item, so you can freely select and copy text without accidentally modifying the editor or closing the history pane. By [@gitryder](https://github.com/gitryder). #### Added bottom margin to charts [Section titled “Added bottom margin to charts”](#added-bottom-margin-to-charts) We added extra space below charts to prevent them from overlapping with the floating controls bar in the Explorer. By [@gitryder](https://github.com/gitryder).

# Fixed Download Urls

This bugfix release fixes an issue where the Tenzir Platform would generate download URLs with an incorrect signature. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.17.3). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fix download links for Sovereign Edition platform [Section titled “Fix download links for Sovereign Edition platform”](#fix-download-links-for-sovereign-edition-platform) We switched to use the AWS v4 signature algorithm for generating presigned URLs, rather than the deprecated v2 version. This fixes an incompatibility between recent versions of boto3 and seaweedfs. By [@lava](https://github.com/lava) in [#123](https://github.com/tenzir/platform/pull/123).

# Updated CORS settings

This patch release contains no public-facing bug-fixes or features.. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.17.4).

# UI Reorganization

With this release of the Tenzir Platform, we reorganized the UI to make the most important pages more accessible. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.18.0). ### Features [Section titled “Features”](#features) #### Allow custom OIDC scope and audience params [Section titled “Allow custom OIDC scope and audience params”](#allow-custom-oidc-scope-and-audience-params) Added support for customizing OIDC scope and audience parameters in the CLI to provide more flexibility in authentication configuration. By [@tobim](https://github.com/tobim) in [#127](https://github.com/tenzir/platform/pull/127). #### Added search to key dropdowns [Section titled “Added search to key dropdowns”](#added-search-to-key-dropdowns) You can now easily search and select items in key dropdowns such as the node selector, dashboard filters, and the workspace switcher, making it quicker to find what you need and reducing the effort of scrolling through long lists. By [@gitryder](https://github.com/gitryder). #### Live activity redesign with Sparklines [Section titled “Live activity redesign with Sparklines”](#live-activity-redesign-with-sparklines) The platform now shows activity for deployed piplines with sparklines (instead of sparkbars). The data behind the sparkline is also improved and more accurate now. By [@dit7ya](https://github.com/dit7ya). #### Copy token action for nodes [Section titled “Copy token action for nodes”](#copy-token-action-for-nodes) We added a “Copy token” option to the node selector’s actions menu, so you can quickly copy a Tenzir node’s token when needed. By [@gitryder](https://github.com/gitryder). ### Changes [Section titled “Changes”](#changes) #### Reorganized navigation for easier access [Section titled “Reorganized navigation for easier access”](#reorganized-navigation-for-easier-access) We reorganized the navigation to make it easier to use. The Nodes menu item is now replaced by dedicated items for Pipelines, Explorer, Contexts, and Library. The Packages tab has also moved into the Library, where you can select it from the dropdown. By [@gitryder](https://github.com/gitryder). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fixed performance issue in charts [Section titled “Fixed performance issue in charts”](#fixed-performance-issue-in-charts) We resolved an issue that could cause the app to use more memory than necessary when displaying charts. By [@gitryder](https://github.com/gitryder), [@dit7ya](https://github.com/dit7ya).

# Pipeline Detail Page

This release adds a new detail page, as well as many UI fixes and improvements. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.19.0). ### Features [Section titled “Features”](#features) #### Pipeline detail page [Section titled “Pipeline detail page”](#pipeline-detail-page) Pipelines now have their own dedicated detail pages that you can access by clicking on any pipeline name. This gives you a comprehensive view of your pipeline in a full-screen interface designed for deep inspection and configuration. By [@gitryder](https://github.com/gitryder). ### Changes [Section titled “Changes”](#changes) #### Show current and latest versions in node update info [Section titled “Show current and latest versions in node update info”](#show-current-and-latest-versions-in-node-update-info) We now show both the current version and the latest available version when an update is available or required. For example, in the node selector you see your current version alongside the latest release version. By [@gitryder](https://github.com/gitryder). #### Update postgres in examples to v17.6 [Section titled “Update postgres in examples to v17.6”](#update-postgres-in-examples-to-v176) Update the postgres version to 17.6 in the example docker-compose.yaml files. By [@weh](https://github.com/weh) in [#129](https://github.com/tenzir/platform/pull/129). #### Prepare upcoming library format changes [Section titled “Prepare upcoming library format changes”](#prepare-upcoming-library-format-changes) The Tenzir Platform now supports the upcoming package format changes in the Tenzir Library, which will be introduced in the near future. By \[@gitryder, tobim]\(<https://github.com/gitryder>, tobim). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Various UI Improvements [Section titled “Various UI Improvements”](#various-ui-improvements) This release also contains many additional bugfixes and improvements to the Tenzir UI: * Fixed an issue that prevented cookie deletion. * Improved error logging for OpenID configuration decoding failures. * Fixed a bug where column resizing would break when new data with the same schema arrived. * Big numbers are now handled precisely in the data table and inspector. * A toast message is now displayed while the data download is being prepared. * Fixed a bug that caused the page to freeze when clicking outside the pipeline editor during editing. * The timestamp displayed in the tooltip of ingress/egress charts was fixed. By \[@gitryder, dit7ya]\(<https://github.com/gitryder>, dit7ya). #### Detailed pipeline activity spikes [Section titled “Detailed pipeline activity spikes”](#detailed-pipeline-activity-spikes) The detailed pipeline activity charts for the 15min range previously showed spikes even when the underlying data flow was steady. Now, the activity chart should correctly follow the actual data flow. By [@jachris](https://github.com/jachris). #### Fix inifinite loading for dashboard cells that produce no data [Section titled “Fix inifinite loading for dashboard cells that produce no data”](#fix-inifinite-loading-for-dashboard-cells-that-produce-no-data) Dashboard cells that produce no data no longer show an infinite loading animation. By [@dit7ya](https://github.com/dit7ya).

# Various Bugfixes

This release fixes several bugs in the Tenzir Platform; from the Secret Store API to the way ephemeral node tokens are generated. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.19.1). ### Changes [Section titled “Changes”](#changes) #### Enable secrets in localdev example [Section titled “Enable secrets in localdev example”](#enable-secrets-in-localdev-example) Secrets are now enabled by default in the ‘localdev’ example deployment of the Tenzir Platform. By [@lava](https://github.com/lava) in [#131](https://github.com/tenzir/platform/pull/131). ### Bug Fixes [Section titled “Bug Fixes”](#bug-fixes) #### Fixed internal server error when changing the default secret store [Section titled “Fixed internal server error when changing the default secret store”](#fixed-internal-server-error-when-changing-the-default-secret-store) Fixed an issue that could cause the Tenzir Platform API to return a 500 internal server error for certain parameters. By [@lava](https://github.com/lava) in [#131](https://github.com/tenzir/platform/pull/131). #### Update the secret store CLI interface to align with the Platform API [Section titled “Update the secret store CLI interface to align with the Platform API”](#update-the-secret-store-cli-interface-to-align-with-the-platform-api) The Tenzir Platform CLI was calling an outdated version of the secret store API, leading to unintended 404 errors. The CLI has been updated to use the latest version now. By [@lava](https://github.com/lava) in [#131](https://github.com/tenzir/platform/pull/131). #### Fix token generation for static workspaces [Section titled “Fix token generation for static workspaces”](#fix-token-generation-for-static-workspaces) Fixed a bug that caused static workspace tokens to include stray b’…’ characters, resulting in invalid node tokens. By [@lava](https://github.com/lava).

# Tenzir Platform v1.2

This release brings improvements to diagnostics in the Explorer, adds the ability to download charts, and includes many stability improvements. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.2.0).

# Tenzir Platform v1.2.1

This patch release contains the following changes, bug fixes and improvements over [Tenzir Platform v1.2](https://github.com/tenzir/platform/releases/tag/v1.2.0): * This release handles OIDC issuer URLs without a trailing slash correctly. * This release fixes an issue where the `PUBLIC_OIDC_SCOPES` variable is ignored. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.2.1).

# Tenzir Platform v1.3

This release introduces a new **vertical layout** option to make better use of the screen space available for event data and longer pipelines: This release also contains many additional improvements and bugfixes: * The explorer event inspector now automatically selects the first event if it is open. * This release fixes an issue in the detailed activity charts in the pipelines page where the ingress and egress activities are mistakenly swapped. * Charts in the dashboard show up to 10,000 events now. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.3.0).

# Tenzir Platform v1.4

This release introduces **alerts** for the Tenzir Platform, allowing users to get notified when a node is unexpectedly offline. This release also contains a lot of other noteworthy improvements and bug fixes: * The workspace switcher becomes significantly faster * A new diagnostics drawer on the dashboard page makes warnings and errors more accessible * The image download of charts now works as expected Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.4.0).

# Tenzir Platform v1.4.1

This patch release contains the following changes, bug fixes and improvements over [Tenzir Platform v1.4](https://github.com/tenzir/platform/releases/tag/v1.4.0): * This release fixes a bug where the app shows an infinite loader when creating a new account after logging out of an existing account. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.4.1).

# Tenzir Platform v1.5

This release brings a major upgrade to Dashboards making them independent of nodes. This release also introduces a **dedicated Contexts page** that allows for managing contexts directly in the Tenzir Platform. This release includes several additional enhancements and fixes: * This release fixes an issue preventing package uninstallation. * This release resolves a bug causing infinite loading when logging into a new account after logging out. * This release fixes a problem that breaks account deletion. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.5.0).

# Tenzir Platform v1.6

This release features a new UI for example pipelines and adds support for the new TQL2 mode for nodes. Note: The **minimum node version** for Tenzir Platform v1.6 updates to Tenzir Node **v4.24**. Older nodes need to be upgraded before they can reconnect to the newest platform version. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.6.0).

# Tenzir Platform v1.6.1

This patch release contains the following changes, bug fixes and improvements over [Tenzir Platform v1.6](https://github.com/tenzir/platform/releases/tag/v1.6.0): * This release fixes an issue that prevents the display of activity spark bars * This release fixes a race condition that leads to a parse error in the detailed pipeline activity view * This release adds a new option to specify CORS settings for the on-prem version of the websocket gateway Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.6.1).

# Tenzir Platform v1.7

This release introduces a new Drag’n’Drop feature to easily work with data from local files, and adds additional configuration knobs for Sovereign Edition users. Sovereign Edition users get a few more options to customize their deployment: * `ANALYTICS_WEBHOOK_URL`: Allows configuring an analytics sink for sending events * `TLS_KEYFILE`/`TLS_CERTFILE`: Allow the platform and websocket gateway services to provide native TLS support, when not running behind a reverse proxy Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.7.0).

# Tenzir Platform v1.7.1

This patch release contains the following bug fixes and improvements over [Tenzir Platform v1.7](https://github.com/tenzir/platform/releases/tag/v1.7.0): * This release fixes an issue that causes Demo Nodes to periodically lose their connection to the platform * This release fixes node switching in the Library package install tab * This release adds new placeholder screens * This release fixes table column order mismatch for numerical keys * This release prevents schema tree from getting cut-off Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.7.1).

# Tenzir Platform v1.7.2

This patch release contains the following changes, bug fixes and improvements over [Tenzir Platform v1.7.1](https://github.com/tenzir/platform/releases/tag/v1.7.1): * This release handles incoming timestamps with a ‘Z’ timezone suffix in pipeline data Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.7.2).

# New Charting & Examples

This release adds support for the new and improved charting operators of Tenzir Node v4.27, and revamps example deployments in the platform repository. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.8.0).

# Explorer & TLS Support

This patch release contains the following changes, bug fixes and improvements over [Tenzir Platform v1.8](https://github.com/tenzir/platform/releases/tag/v1.8): * This release fixes explorer results being hidden when pausing the pipeline * This release fixes Run button scrolling out of view * This release adds a Discord link to the app * This release supports `TLS_KEYFILE` and `TLS_CERTFILE` in the app Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.8.1).

# Dashboard & Error Handling

This patch release contains the following changes, bug fixes and improvements over [Tenzir Platform v1.8.1](https://github.com/tenzir/platform/releases/tag/v1.8.1): * Numbers in the platform become thousands-separated * Titles become required before adding charts to dashboards * Dashboard charts now load data fully correctly * Failure of various data-fetching tasks now shows errors in the UI * This release includes styling fixes, updates, and small features Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.8.2).

# Node Selection & UI Fixes

This patch release includes the following bug fixes over [Tenzir Platform v1.8.2](https://github.com/tenzir/platform/releases/tag/v1.8.2): * This release fixes a bug where a newly added node is not automatically selected on the Pipelines page. * This release ensures that the node selector on different pages does not overflow off the screen. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.8.3).

# Pipeline Page & Load Time

This patch release includes the following bug fixes over [Tenzir Platform v1.8.3](https://github.com/tenzir/platform/releases/tag/v1.8.3): * This release fixes a bug where the pipeline page crashes when navigating away from it and back to a newly loaded page. * This release fixes the broken hover state of the dropdown in DetailedActivity. * This release reduces 5s-7s spikes in the initial load time of the platform page. * This release improves the styling and user experience of the download menu to be consistent with the node submenu used for charts.” Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.8.4).

# CI Workflow Improvements

This release does not contain any user-facing changes, only improvements to the internal CI release workflow. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.8.5).

# Explorer for Large Datasets

This release revamps the Explorer to better support large datasets. Additionally, this release contains the following bug fixes and improvements: * The *Add to Dashboard* button in the Explorer is no longer disabled when the corresponding history entry is removed. * This release fixes a bug that prevents the *Save* button on dashboards from working. The save button now also shows a loading state when applicable. * This release makes pie chart legends scrollable. * All log scales in charts change to symlog scales, which handle zero and negative values more gracefully. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.9.0).

# Auth Rules & CLI Tokens

This patch release includes the following bug fixes over [Tenzir Platform v1.9.0](https://github.com/tenzir/platform/releases/tag/v1.9.0), all of them geared towards Sovereign Edition users: * This release improves safety against accidentally logging secrets from the configuration * This release adds support for a new ‘allow-all’ auth rule that allows configuring global access to workspaces * This release adds support for using access tokens as a fallback for id tokens in the CLI * This release adds support for a new `TENZIR_PLATFORM_CLI_ID_TOKEN` override to manually set a valid id token for the CLI, instead of going through an OIDC flow Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.9.1).

# CLI Verbose Fix

This patch release includes the following bug fixes over [Tenzir Platform v1.9.1](https://github.com/tenzir/platform/releases/tag/v1.9.1): * This release fixes the CLI to not ignore the `TENZIR_PLATFORM_CLI_VERBOSE` setting Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.9.2).

# Performance & Metrics

This patch release includes the following bug fixes over [Tenzir Platform v1.9.2](https://github.com/tenzir/platform/releases/tag/v1.9.2): * This release fixes some small issues in the platform, and improves performance at various places. * The platform gains opt-in support for storing pipeline metrics from connected nodes. * OIDC requests now use form serialization correctly. * This release fixes variable descriptions in the onprem example of the Sovereign Edition platform. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.9.3).

# Table & UI Improvements

This patch release includes the following improvements over [Tenzir Platform v1.9.3](https://github.com/tenzir/platform/releases/tag/v1.9.3): * This release fixes the pipelines and context tables to use the full available width of the screen. * The edit button for pipeline names in the detailed pipelines pane no longer remains dysfunctional. * The history in the Explorer now works correctly for going back to the very last and going forward to the most recent entry. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.9.4).

# Pipeline Table & Bandwidth

This patch release includes the following improvements over [Tenzir Platform v1.9.4](https://github.com/tenzir/platform/releases/tag/v1.9.4): * The pipelines table sorting and filtering by column works correctly again. * This release reduces bandwidth usage between the node and the platform. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.9.5).

# TQL2 Switch Improvements

This patch release includes the following improvements over [Tenzir Platform v1.9.5](https://github.com/tenzir/platform/releases/tag/v1.9.5): * The TQL2 switch no longer shows in the Explorer for nodes that have the TQL2-only mode enabled through the `TENZIR_TQL2=true` option. This prepares for the upcoming Tenzir Node v5.0 release, which enables TQL2 by default. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.9.6).

# Data Inspector Overhaul

This patch release comes with a number of frontend improvements since [Tenzir Platform v1.9.6](https://github.com/tenzir/platform/releases/tag/v1.9.5): * This release completely overhauls the data inspector to give a more detailed tree view of the data, and makes it possible to collapse and expand the tree. * The copy button in the data inspector now copies the data as TQL instead of JSON. Download the release on [GitHub](https://github.com/tenzir/platform/releases/tag/v1.9.7).